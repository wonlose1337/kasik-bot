import logging
import re
import json
import random
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
import asyncio
import datetime
from PIL import Image, ImageDraw, ImageFont
import os
import pathlib

def safe_print(text: str):
    try:
        print(text)
    except UnicodeEncodeError:
        try:
            print(text.encode('ascii', 'ignore').decode('ascii'))
        except Exception:
            pass

def is_admin(user_id: int) -> bool:
    """–ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
    return user_id in ADMIN_IDS

async def check_channel_subscription(user_id: int) -> bool:
    """–ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª @daisicx"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª @daisicx
        member = await bot.get_chat_member(chat_id='@daisicx', user_id=user_id)
        return member.status not in ['left', 'kicked']
    except Exception as e:
        print(f"–æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

def update_roulette_history(user_id: str, amount: int, bet_type: str):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞–≤–æ–∫ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    """
    current_time = datetime.datetime.now().timestamp()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in roulette_bet_history:
        roulette_bet_history[user_id] = []
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (—Å—Ç–∞—Ä—à–µ BET_HISTORY_WINDOW —Å–µ–∫—É–Ω–¥)
    roulette_bet_history[user_id] = [
        bet for bet in roulette_bet_history[user_id] 
        if current_time - bet['time'] < BET_HISTORY_WINDOW
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç–∞–≤–∫—É –≤ –∏—Å—Ç–æ—Ä–∏—é
    roulette_bet_history[user_id].append({
        'time': current_time,
        'amount': amount,
        'bet_type': bet_type
    })

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏–∑ config.py
API_TOKEN = os.getenv('BOT_TOKEN')
if not API_TOKEN:
    try:
        from config import BOT_TOKEN
        API_TOKEN = BOT_TOKEN
        safe_print("‚úÖ –¢–æ–∫–µ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ config.py")
    except ImportError:
        safe_print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ config.py!")
        safe_print("üîê –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª config.py —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç BOT_TOKEN")
        exit(1)

if not API_TOKEN:
    safe_print("‚ùå –û–®–ò–ë–ö–ê: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    safe_print("üîê –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –∏–ª–∏ —Ñ–∞–π–ª config.py")
    exit(1)

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
DB_FILE = 'users_db.json'
CHATS_FILE = 'bot_chats.json'
# –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–¥–æ –∏—Å–∫–ª—é—á–∞—Ç—å –ø—Ä–∏ –º–∞—Å—Å–æ–≤—ã—Ö —Ä–∞—Å—Å—ã–ª–∫–∞—Ö –ø–æ —á–∞—Ç–∞–º
# —É–∫–∞–∂–∏ —è–≤–Ω—ã–π ID, –µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–µ–Ω, –∏–Ω–∞—á–µ –±–æ—Ç –ø–æ–ø—Ä–æ–±—É–µ—Ç —Ä–∞–∑—Ä–µ—à–∏—Ç—å –ø–æ —é–∑–µ—Ä–Ω–µ–π–º—É
MAIN_CHAT_USERNAME = 'Daisicxchat'
MAIN_CHAT_ID: int | None = None

# –°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞–≤–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏–≥—Ä—ã
roulette_bet_history = {}  # {user_id: [{'time': timestamp, 'amount': amount, 'bet_type': bet_type}, ...]}
BET_HISTORY_WINDOW = 300  # –æ–∫–Ω–æ –≤ 5 –º–∏–Ω—É—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
# –°—á—ë—Ç—á–∏–∫ –ø–æ–¥—Ä—è–¥ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å—Ç–∞–≤–æ–∫ –¥–ª—è —Ç–æ—á–µ—á–Ω–æ–≥–æ –∑–∞–Ω–∏–∂–µ–Ω–∏—è —à–∞–Ω—Å–æ–≤ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–ø–∞–º–µ –æ–¥–Ω–∏–º –∏ —Ç–µ–º –∂–µ
roulette_bet_streaks = {}  # {user_id: {'bet_type': str, 'streak': int}}
# –§–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞–≤–∫–∏, —á—Ç–æ–±—ã –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç–∞–≤–æ–∫ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
roulette_in_progress = set()  # set[user_id]



# –ê–¥–º–∏–Ω—ã (ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
ADMIN_IDS = {
    
    6076432444,  # –≤—ã–∞–≤—ã
    6190327518,  # —Ö—É–π–Ω—è  
    737300328,  # —Å–æ—Å–æ
}

# –ü—Ä–æ—Ü–µ–Ω—Ç –Ω–∞–ª–æ–≥–∞ –Ω–∞ –±–æ–≥–∞—Ç—Å—Ç–≤–æ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5%)
WEALTH_TAX_PERCENT = 5

# –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞–ª–æ–≥–∞
TAX_SETTINGS_FILE = 'tax_settings.json'

# –ö–æ–º–∏—Å—Å–∏—è –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è —Ç–æ–ø-20 –∏–≥—Ä–æ–∫–æ–≤ (20%)
TRANSFER_COMMISSION_TOP20 = 20

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–∞—è —Å—É–º–º–∞ –≤–∫–ª–∞–¥–∞ (1–∫–∫–∫–∫)
BANK_MAX_DEPOSIT = 1_000_000_000_000_000_000_000_000

# –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
promo_codes = {}  # {code: {'reward': amount, 'activations': max_activations, 'current_activations': 0, 'expiry': timestamp, 'created_by': admin_id}}

# –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç—ã –≥—Ä—É–∑—á–∏–∫–∞
loader_jobs = {}  # {user_id: {'start_time': timestamp, 'total_earnings': 0, 'cargo_count': 0}}
cargo_types = [
    # –æ–±—ã—á–Ω—ã–µ –≥—Ä—É–∑—ã (80% —à–∞–Ω—Å)
    {'name': '–∫–æ—Ä–æ–±–∫–∏ —Å –æ–¥–µ–∂–¥–æ–π', 'weight': '–ª–µ–≥–∫–∏–π', 'time': 5, 'payment': 150000000, 'emoji': 'üì¶'},
    {'name': '–º–µ—à–∫–∏ —Å –º—É–∫–æ–π', 'weight': '—Å—Ä–µ–¥–Ω–∏–π', 'time': 15, 'payment': 250000000, 'emoji': 'üõçÔ∏è'},
    {'name': '—è—â–∏–∫–∏ —Å –æ–≤–æ—â–∞–º–∏', 'weight': '—Å—Ä–µ–¥–Ω–∏–π', 'time': 20, 'payment': 300000000, 'emoji': 'ü•¨'},
    {'name': '–±–æ—á–∫–∏ —Å –≤–æ–¥–æ–π', 'weight': '—Ç—è–∂–µ–ª—ã–π', 'time': 30, 'payment': 400000000, 'emoji': 'üõ¢Ô∏è'},
    {'name': '–º–µ–±–µ–ª—å', 'weight': '–æ—á–µ–Ω—å —Ç—è–∂–µ–ª—ã–π', 'time': 45, 'payment': 500000000, 'emoji': 'ü™ë'},
    {'name': '—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã', 'weight': '–æ—á–µ–Ω—å —Ç—è–∂–µ–ª—ã–π', 'time': 60, 'payment': 600000000, 'emoji': 'üß±'},
    
    # —Ü–µ–Ω–Ω—ã–µ –≥—Ä—É–∑—ã (15% —à–∞–Ω—Å)
    {'name': '—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', 'weight': '—Å—Ä–µ–¥–Ω–∏–π', 'time': 25, 'payment': 800000000, 'emoji': 'üíª', 'rare': True},
    {'name': '–º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ', 'weight': '—Ç—è–∂–µ–ª—ã–π', 'time': 40, 'payment': 1000000000, 'emoji': 'üè•', 'rare': True},
    {'name': '—Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∏', 'weight': '–æ—á–µ–Ω—å —Ç—è–∂–µ–ª—ã–π', 'time': 55, 'payment': 1200000000, 'emoji': '‚ùÑÔ∏è', 'rare': True},
    
    # —Å—É–ø–µ—Ä —Ä–µ–¥–∫–∏–µ –≥—Ä—É–∑—ã (5% —à–∞–Ω—Å)
    {'name': '–∞–ª–º–∞–∑—ã', 'weight': '–ª–µ–≥–∫–∏–π', 'time': 10, 'payment': 2000000000, 'emoji': 'üíé', 'super_rare': True},
    {'name': '—é–≤–µ–ª–∏—Ä–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è', 'weight': '–ª–µ–≥–∫–∏–π', 'time': 8, 'payment': 2500000000, 'emoji': 'üíç', 'super_rare': True},
    {'name': '–∑–æ–ª–æ—Ç—ã–µ —Å–ª–∏—Ç–∫–∏', 'weight': '—Å—Ä–µ–¥–Ω–∏–π', 'time': 20, 'payment': 3000000000, 'emoji': 'ü•á', 'super_rare': True},
    {'name': '–∞–Ω—Ç–∏–∫–≤–∞—Ä–∏–∞—Ç', 'weight': '—Å—Ä–µ–¥–Ω–∏–π', 'time': 35, 'payment': 3500000000, 'emoji': 'üè∫', 'super_rare': True},
]

def load_users():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    try:
        with open(DB_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
            
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏
            fixed_data = {}
            
            for user_id, user_data in data.items():
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º user_id –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
                user_id_str = str(user_id)
    
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å–∏ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∏–∫–∞–º–∏
                if 'nick' in user_data and user_data['nick'].startswith('/'):
                    continue
                
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å, –æ—Å—Ç–∞–≤–ª—è–µ–º –±–æ–ª–µ–µ –ø–æ–ª–Ω—É—é –∑–∞–ø–∏—Å—å
                if user_id_str in fixed_data:
                    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∑–∞–ø–∏—Å–∏ –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç—É, —É –∫–æ—Ç–æ—Ä–æ–π –±–æ–ª—å—à–µ –ø–æ–ª–µ–π
                    if len(user_data) > len(fixed_data[user_id_str]):
                        fixed_data[user_id_str] = user_data
                else:
                    fixed_data[user_id_str] = user_data
            
            # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–º–µ—é—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è
            for user_id, user_data in fixed_data.items():
                if 'warns' not in user_data:
                    user_data['warns'] = 0
                if 'banned' not in user_data:
                    user_data['banned'] = False
                if 'referral_earnings' not in user_data:
                    user_data['referral_earnings'] = 0
                if 'referrals' not in user_data:
                    user_data['referrals'] = 0
                if 'balance' not in user_data:
                    user_data['balance'] = 0  # 0 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
            print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(fixed_data)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î")
            return fixed_data
    except FileNotFoundError:
        print(f"–§–∞–π–ª {DB_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        return {}
    except json.JSONDecodeError as e:
        print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON —Ñ–∞–π–ª–∞: {e}")
        print("–°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        return {}
    except Exception as e:
        print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return {}

def save_users():
    """—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ json —Ñ–∞–π–ª"""
    try:
        # —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–º–µ—é—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
        for user_id, user_data in users.items():
            if 'warns' not in user_data:
                user_data['warns'] = 0
            if 'banned' not in user_data:
                user_data['banned'] = False
            if 'referral_earnings' not in user_data:
                user_data['referral_earnings'] = 0
        
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—à–∏—Ä—è–µ–º –ª–∏–º–∏—Ç —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π
        auto_extend_k_limit()
        
        with open(DB_FILE, 'w', encoding='utf-8') as f:
            json.dump(users, f, ensure_ascii=False, indent=2)

    except Exception as e:
        print(f"–æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

def save_promo_codes():
    """—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥—ã –≤ JSON —Ñ–∞–π–ª"""
    try:
        with open('promo_codes.json', 'w', encoding='utf-8') as f:
            json.dump(promo_codes, f, ensure_ascii=False, indent=2)
        print(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {len(promo_codes)} —à—Ç.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: {e}")

def load_promo_codes():
    """–∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥—ã –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    global promo_codes
    try:
        with open('promo_codes.json', 'r', encoding='utf-8') as f:
            promo_codes = json.load(f)
        print(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(promo_codes)} —à—Ç.")
    except FileNotFoundError:
        print("üìÅ –§–∞–π–ª promo_codes.json –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –±–∞–∑—É –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤")
        promo_codes = {}
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: {e}, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –±–∞–∑—É")
        promo_codes = {}

def generate_random_promo():
    """–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥"""
    import string
    chars = string.ascii_uppercase + string.digits
    return ''.join(random.choice(chars) for _ in range(8))

def is_promo_valid(promo_code: str) -> bool:
    """–ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    if promo_code not in promo_codes:
        return False
    
    promo = promo_codes[promo_code]
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π (–µ—Å–ª–∏ –Ω–µ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ)
    if promo['activations'] != -1 and promo['current_activations'] >= promo['activations']:
        return False
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
    if promo['expiry'] and datetime.datetime.now().timestamp() > promo['expiry']:
        return False
    
    return True

def activate_promo(promo_code: str, user_id: str) -> tuple[bool, str, int]:
    """–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not is_promo_valid(promo_code):
        return False, "–ø—Ä–æ–º–æ–∫–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω", 0
    
    promo = promo_codes[promo_code]
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥
    if 'used_by' not in promo:
        promo['used_by'] = []
    
    if user_id in promo['used_by']:
        return False, "—Ç—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥", 0
    
    # –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
    promo['current_activations'] += 1
    promo['used_by'].append(user_id)
    
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥—ã
    save_promo_codes()
    
    return True, "–ø—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!", promo['reward']

async def activate_promo_from_link(message: types.Message, user_id_str: str, promo_code: str):
    """–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
    success, message_text, reward = activate_promo(promo_code, user_id_str)
    
    if success:
        # –Ω–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É
        users[user_id_str]['balance'] += reward
        save_users()
        
        # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        success_text = f"üéâ <b>–ø—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø–æ —Å—Å—ã–ª–∫–µ!</b>\n\n"
        success_text += f"üé´ <b>–ø—Ä–æ–º–æ–∫–æ–¥:</b> {promo_code}\n"
        success_text += f"üí∞ <b>–Ω–∞–≥—Ä–∞–¥–∞:</b> ${format_money(reward)}\n"
        success_text += f"üí≥ <b>–Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:</b> ${format_money(users[user_id_str]['balance'])}\n\n"
        success_text += "‚úÖ <b>–Ω–∞–≥—Ä–∞–¥–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å!</b>"
        
        await message.answer(success_text, parse_mode='HTML')
    else:
        # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        error_text = f"‚ùå <b>–æ—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞</b>\n\n"
        error_text += f"üé´ <b>–ø—Ä–æ–º–æ–∫–æ–¥:</b> {promo_code}\n"
        error_text += f"‚ö†Ô∏è <b>–ø—Ä–∏—á–∏–Ω–∞:</b> {message_text}\n\n"
        error_text += "üí° <b>–≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</b>\n"
        error_text += "‚Ä¢ –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n"
        error_text += "‚Ä¢ –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω\n"
        error_text += "‚Ä¢ –∏—Å—Ç–µ–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è\n"
        error_text += "‚Ä¢ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–π"
        
        await message.answer(error_text, parse_mode='HTML')
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await show_menu(message, int(user_id_str))

def load_tax_settings():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ª–æ–≥–∞ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    global WEALTH_TAX_PERCENT
    global TRANSFER_COMMISSION_TOP20
    try:
        with open(TAX_SETTINGS_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
            WEALTH_TAX_PERCENT = data.get('wealth_tax_percent', 5)
            TRANSFER_COMMISSION_TOP20 = data.get('transfer_commission_top20', TRANSFER_COMMISSION_TOP20)
            print(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ª–æ–≥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {WEALTH_TAX_PERCENT}%")
    except FileNotFoundError:
        print(f"üìÅ –§–∞–π–ª {TAX_SETTINGS_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 5%")
        WEALTH_TAX_PERCENT = 5
        # –∫–æ–º–∏—Å—Å–∏—è –æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –∑–∞–¥–∞–Ω–Ω–æ–º—É –≤ –∫–æ–¥–µ
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞–ª–æ–≥–∞: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 5%")
        WEALTH_TAX_PERCENT = 5

def save_tax_settings():
    
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ª–æ–≥–∞ –≤ JSON —Ñ–∞–π–ª"""
    try:
        data = {
            'wealth_tax_percent': WEALTH_TAX_PERCENT,
            'transfer_commission_top20': TRANSFER_COMMISSION_TOP20,
            'last_updated': datetime.datetime.now().isoformat()
        }
        with open(TAX_SETTINGS_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        print(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ª–æ–≥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {WEALTH_TAX_PERCENT}%")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞–ª–æ–≥–∞: {e}")

def create_backup():
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É backup –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if not os.path.exists('backup'):
            os.makedirs('backup')
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
        timestamp = datetime.datetime.now().strftime('%Y%m%d_%H%M%S')
        backup_filename = f'backup/users_backup_{timestamp}.json'
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        with open(DB_FILE, 'r', encoding='utf-8') as source:
            data = json.load(source)
        
        with open(backup_filename, 'w', encoding='utf-8') as target:
            json.dump(data, target, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_filename}")
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10)
        cleanup_old_backups()
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
        return False

def cleanup_old_backups():
    """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10"""
    try:
        if not os.path.exists('backup'):
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
        backup_files = []
        for filename in os.listdir('backup'):
            if filename.startswith('users_backup_') and filename.endswith('.json'):
                file_path = os.path.join('backup', filename)
                backup_files.append((file_path, os.path.getmtime(file_path)))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
        backup_files.sort(key=lambda x: x[1], reverse=True)
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
        if len(backup_files) > 10:
            for file_path, _ in backup_files[10:]:
                try:
                    os.remove(file_path)
                    print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {file_path}")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: {e}")

async def start_backup_scheduler():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç"""
    print("üíæ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    # –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    if hasattr(start_backup_scheduler, '_running'):
        print("‚ö†Ô∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω!")
        return
    
    start_backup_scheduler._running = True
    
    try:
        while True:
            try:
                # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
                success = create_backup()
                
                if success:
                    print(f"üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ –≤ {datetime.datetime.now().strftime('%H:%M:%S')}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –≤ {datetime.datetime.now().strftime('%H:%M:%S')}")
                
                # –ñ–¥–µ–º 30 –º–∏–Ω—É—Ç (1800 —Å–µ–∫—É–Ω–¥)
                await asyncio.sleep(1800)
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
                await asyncio.sleep(60)  # –∂–¥–µ–º 1 –º–∏–Ω—É—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
    finally:
        # –°–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        start_backup_scheduler._running = False

def is_top20_player(user_id: str) -> bool:
    
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ —Ç–æ–ø-20"""
    try:
        top_20_players = get_top_players()[:20]
        return user_id in [str(uid) for uid, _ in top_20_players]
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–ø-20 –∏–≥—Ä–æ–∫–∞ {user_id}: {e}")
        return False

def migrate_existing_users():
    """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –¥–æ–±–∞–≤–ª—è—è –Ω–æ–≤—ã–µ –ø–æ–ª—è"""
    migrated_count = 0
    
    for user_id, user_data in users.items():
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è
        if 'registration_date' not in user_data:
            user_data['registration_date'] = str(datetime.datetime.now())
            migrated_count += 1
        
        if 'last_activity' not in user_data:
            user_data['last_activity'] = str(datetime.datetime.now())
            migrated_count += 1
        
        if 'total_messages' not in user_data:
            user_data['total_messages'] = 0
            migrated_count += 1
        
        if 'phone_number' not in user_data:
            user_data['phone_number'] = None
            migrated_count += 1
        
        if 'email' not in user_data:
            user_data['email'] = None
            migrated_count += 1
        
        if 'age' not in user_data:
            user_data['age'] = None
            migrated_count += 1
        
        if 'city' not in user_data:
            user_data['city'] = None
            migrated_count += 1
        
        if 'country' not in user_data:
            user_data['country'] = None
            migrated_count += 1
        
        if 'language' not in user_data:
            user_data['language'] = 'ru'
            migrated_count += 1
        
        if 'device_info' not in user_data:
            user_data['device_info'] = None
            migrated_count += 1
        
        if 'ip_address' not in user_data:
            user_data['ip_address'] = None
            migrated_count += 1
        
        if 'referral_source' not in user_data:
            user_data['referral_source'] = 'direct'
            migrated_count += 1
        
        if 'account_type' not in user_data:
            user_data['account_type'] = 'regular'
            migrated_count += 1
        
        if 'verification_status' not in user_data:
            user_data['verification_status'] = 'unverified'
            migrated_count += 1
        
        if 'security_level' not in user_data:
            user_data['security_level'] = 'basic'
            migrated_count += 1
        
        if 'premium_features' not in user_data:
            user_data['premium_features'] = False
            migrated_count += 1
        
        if 'last_login' not in user_data:
            user_data['last_login'] = str(datetime.datetime.now())
            migrated_count += 1
        
        if 'login_count' not in user_data:
            user_data['login_count'] = 1
            migrated_count += 1
        
        if 'session_duration' not in user_data:
            user_data['session_duration'] = 0
            migrated_count += 1
        
        if 'last_bonus_time' not in user_data:
            user_data['last_bonus_time'] = 0
            migrated_count += 1
        
        if 'preferences' not in user_data:
            user_data['preferences'] = {
                'notifications': True,
                'privacy_mode': False,
                'auto_save': True
            }
            migrated_count += 1
        
        if 'bank_deposit' not in user_data:
            user_data['bank_deposit'] = 0
            migrated_count += 1
        
        if 'bank_deposit_time' not in user_data:
            user_data['bank_deposit_time'] = 0
            migrated_count += 1
    
    if migrated_count > 0:
        print(f"–ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ {migrated_count} –ø–æ–ª–µ–π –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        save_users()
    
    return migrated_count

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
users = load_users()
safe_print("–∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")



# —á–∞—Ç—ã –±–æ—Ç–∞ (–¥–ª—è —Ä–∞—Å—Å—ã–ª–æ–∫ –≤ —á–∞—Ç—ã)
def load_bot_chats() -> list[int]:
    
    try:
        with open(CHATS_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
            if isinstance(data, list):
                return [int(x) for x in data]
    except FileNotFoundError:
        pass
    except Exception as e:
        safe_print(f"–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤: {e}")
    return []

def save_bot_chats(chats: list[int]):
    try:
        with open(CHATS_FILE, 'w', encoding='utf-8') as f:
            json.dump(chats, f, ensure_ascii=False, indent=2)
    except Exception as e:
        safe_print(f"–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤: {e}")

bot_chats: list[int] = load_bot_chats()
@dp.callback_query(lambda c: c.data in ['bc_target_dm','bc_target_chats','bc_target_chats_ex_main','bc_cancel'])
async def broadcast_target_choice(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    
    if user_id not in ADMIN_IDS:
        await callback.answer()
        return
    if callback.data == 'bc_cancel':
        await state.clear()
        await callback.message.edit_text('—Ä–∞—Å—Å—ã–ª–∫—É –æ—Ç–º–µ–Ω–∏–ª')
        await callback.answer()
        return
    await state.update_data(broadcast_target=callback.data)
    
    # –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∏ –ø—Ä–æ—Å–∏–º —Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ
    await callback.message.edit_text(
        'üì¢ —Ä–∞—Å—Å—ã–ª–∫–∞\n\n'
        '–æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n\n'
        'üí° –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ HTML-—Ç–µ–≥–∏:\n'
        '‚Ä¢ <b>–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç</b> - <code>&lt;b&gt;—Ç–µ–∫—Å—Ç&lt;/b&gt;</code>\n'
        '‚Ä¢ <i>–∫—É—Ä—Å–∏–≤</i> - <code>&lt;i&gt;—Ç–µ–∫—Å—Ç&lt;/i&gt;</code>\n'
        '‚Ä¢ <u>–ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π</u> - <code>&lt;u&gt;—Ç–µ–∫—Å—Ç&lt;/u&gt;</code>\n'
        '‚Ä¢  –∑–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π ridiculous  - <code>&lt;s&gt;—Ç–µ–∫—Å—Ç&lt;/s&gt;</code>\n'
        '‚Ä¢ <code>–º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π</code> - <code>&lt;code&gt;—Ç–µ–∫—Å—Ç&lt;/code&gt;</code>\n'
        '‚Ä¢ <a href="https://t.me/Daisicxchat">—Å—Å—ã–ª–∫–∞</a> - <code>&lt;a href="—Å—Å—ã–ª–∫–∞"&gt;—Ç–µ–∫—Å—Ç&lt;/a&gt;</code>\n'
    
    '‚Ä¢ <blockquote>—Ü–∏—Ç–∞—Ç–∞</blockquote> - <code>&lt;blockquote&gt;—Ç–µ–∫—Å—Ç&lt;/blockquote&gt;</code>\n\n'
        'üì∑ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å —Ñ–æ—Ç–æ:\n'
        '–æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç\n\n'
        '‚ùå –¥–ª—è –æ—Ç–º–µ–Ω—ã: –Ω–∞–ø–∏—à–∏ "–æ—Ç–º–µ–Ω–∞"\n\n'
        '–∞ –ø–æ—Ç–æ–º –µ—â—ë —Å–ø—Ä–æ—à—É ‚Äî –Ω—É–∂–Ω–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞ —Å —Å—Å—ã–ª–∫–æ–π –∏–ª–∏ –Ω–µ—Ç',
        parse_mode='HTML'
    
    )
    await state.set_state(AdminState.waiting_for_broadcast_text)
    await callback.answer()

# —Ñ–∏–∫—Å–∏—Ä—É–µ–º —á–∞—Ç—ã –ø—Ä–∏ —Å–æ–±—ã—Ç–∏—è—Ö my_chat_member (–±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω/—É–¥–∞–ª—ë–Ω)
@dp.my_chat_member()
async def on_my_chat_member(update: types.ChatMemberUpdated):
    try:
        chat_id = update.chat.id
        status = update.new_chat_member.status
        if status in ('member', 'administrator'):  # –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω/–µ—Å—Ç—å –¥–æ—Å—Ç—É–ø
            if chat_id not in bot_chats:
                bot_chats.append(chat_id)
                save_bot_chats(bot_chats)
        elif status in ('left', 'kicked'):  # –±–æ—Ç–∞ –≤—ã–≥–Ω–∞–ª–∏/–≤—ã—à–µ–ª
            if chat_id in bot_chats:
                bot_chats.remove(chat_id)
                save_bot_chats(bot_chats)
    except Exception as e:
        safe_print(f"–æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤: {e}")

# –ú–∏–≥—Ä–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
migrate_existing_users()

class RegisterState(StatesGroup):
    waiting_for_nick = State()
class AdminState(StatesGroup):
    
    waiting_for_target = State()
    waiting_for_warn_reason = State()
    
    waiting_for_warn_duration = State()
    waiting_for_ban_reason = State()
    
    waiting_for_ban_duration = State()
    waiting_for_unwarn_count = State()
    
    waiting_for_balance_amount = State()
    waiting_for_warn_date = State() # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–∞—Ç—ã –≤–∞—Ä–Ω–∞
    
    waiting_for_ban_date = State() # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–∞—Ç—ã –±–∞–Ω–∞
    waiting_for_probe_target = State()
    
    waiting_for_unwarn_reason = State()
    waiting_for_unban_reason = State()
    
    waiting_for_annul_reason = State()
    waiting_for_give_amount = State()
    
    waiting_for_give_reason = State()
    waiting_for_broadcast_text = State()
    
    waiting_for_broadcast_button_decision = State()
    waiting_for_broadcast_button_data = State()
    
    waiting_for_broadcast_target = State()
    waiting_for_reset_all_balance_confirm = State()
    
    waiting_for_tax_percent = State()
    waiting_for_commission_percent = State()
    
    waiting_for_add_admin_username = State()
    waiting_for_annul_deposit_target = State()
    
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
    waiting_for_promo_code = State()
    waiting_for_promo_reward = State()
    waiting_for_promo_activations = State()
    waiting_for_promo_expiry_date = State()
    waiting_for_promo_expiry_time = State()

class TransferState(StatesGroup):
    waiting_for_confirmation = State()

class SettingsState(StatesGroup):
    waiting_for_new_nick = State()

class PromoState(StatesGroup):
    waiting_for_promo_input = State()

class LoaderState(StatesGroup):
    working = State()

def format_money(amount: int) -> str:
    
    # –≤—Å–µ–≥–¥–∞ –ø–∏—à–µ–º –¥–µ–Ω—å–≥–∏ —Å —Ç–æ—á–∫–∞–º–∏ –≤ —á–∏—Å–ª–µ
    return f"{int(amount):,}".replace(",", ".")

def update_user_activity(user_id: str):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id in users:
        users[user_id]['last_activity'] = str(datetime.datetime.now())
        users[user_id]['total_messages'] = users[user_id].get('total_messages', 0) + 1
        users[user_id]['login_count'] = users[user_id].get('login_count', 0) + 1
        users[user_id]['last_login'] = str(datetime.datetime.now())

def collect_user_info(message: types.Message, user_id: str):
    """–°–æ–±–∏—Ä–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    if user_id in users:
        user_data = users[user_id]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        user_data['last_activity'] = str(datetime.datetime.now())
        
        # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
        if hasattr(message.from_user, 'language_code'):
            user_data['language'] = message.from_user.language_code or 'ru'
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        user_data['total_messages'] = user_data.get('total_messages', 0) + 1
        
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞ —Å–µ—Å—Å–∏—é, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≤—Ö–æ–¥–æ–≤
        last_login = user_data.get('last_login', '')
        try:
            needs_new_login = False
            if not last_login:
                needs_new_login = True
            else:
                last_dt = datetime.datetime.fromisoformat(last_login.replace('Z', '+00:00'))
                needs_new_login = (datetime.datetime.now() - last_dt).total_seconds() > 3600
            if needs_new_login:
                user_data['login_count'] = user_data.get('login_count', 0) + 1
                user_data['last_login'] = str(datetime.datetime.now())
        except Exception:
            # –í —Å–ª—É—á–∞–µ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º last_login –∏ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ–º
            user_data['login_count'] = user_data.get('login_count', 0) + 1
            user_data['last_login'] = str(datetime.datetime.now())

def parse_amount(text):
    """–ø–∞—Ä—Å–∏—Ç —Å—É–º–º—É –∏–∑ —Ç–µ–∫—Å—Ç–∞, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è"""
    import re
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏
    if text.lower().strip() == '–≤—Å–µ':
        return -1
    
    # —É–±–∏—Ä–∞–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä, –ª–∞—Ç–∏–Ω–∏—Ü—ã, –∫–∏—Ä–∏–ª–ª–∏—Ü—ã, —Ç–æ—á–∫–∏ –∏ –ø—Ä–æ–±–µ–ª–æ–≤
    # (—Å–∏–º–≤–æ–ª "k" —Ç–∞–∫–∂–µ –¥–æ–ø—É—Å—Ç–∏–º –¥–ª—è –∫—Ä–∞—Ç–Ω–æ—Å—Ç–∏)
    text = re.sub(r'[^0-9a-z–∞-—è\s.]', '', text.lower())
    
    # —Å–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –æ–±—ã—á–Ω—ã–µ —á–∏—Å–ª–∞ –±–µ–∑ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π
    simple_match = re.search(r'^(\d+(?:\.\d+)?)$', text)
    
    if simple_match:
        return int(float(simple_match.group(1)))
    
    # –∏—â–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è —Å –±—É–∫–≤–∞–º–∏ "–∫" –∏–ª–∏ "k" (–æ—Ç –±–æ–ª—å—à–∏—Ö –∫ –º–∞–ª–µ–Ω—å–∫–∏–º)
    # –∫–∞–∂–¥–∞—è –±—É–∫–≤–∞ (–∫ –∏–ª–∏ k) —É–º–Ω–æ–∂–∞–µ—Ç –Ω–∞ 1000
    k_match = re.search(r'^(\d+(?:\.\d+)?)([–∫k]+)$', text)
    
    if k_match:
        number = float(k_match.group(1))
        k_count = len(k_match.group(2))
        multiplier = 1000 ** k_count
        return int(number * multiplier)
    
    # –∏—â–µ–º –¥—Ä—É–≥–∏–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è
    patterns = [
    
    (r'(\d+(?:\.\d+)?)\s*–º–ª–Ω', lambda m: int(float(m.group(1)) * 10**6)),                  # 100–º–ª–Ω = 100 –º–∏–ª–ª–∏–æ–Ω–æ–≤
        (r'(\d+(?:\.\d+)?)\s*—Ç', lambda m: int(float(m.group(1)) * 10**3)),                    # 100—Ç = 100 —Ç—ã—Å—è—á
    
    ]
    
    for pattern, converter in patterns:
        match = re.search(pattern, text)
        if match:
            return converter(match)
    
    # –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω–æ–µ —á–∏—Å–ª–æ
    number_match = re.search(r'(\d+(?:\.\d+)?)', text)
    
    if number_match:
        return int(float(number_match.group(1)))
    
    raise ValueError('–Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å—É–º–º—É')

def auto_extend_k_limit():
    """–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—à–∏—Ä—è–µ—Ç –ª–∏–º–∏—Ç —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –∏–≥—Ä–æ–∫–æ–≤"""
    max_balance = 0
    
    # –Ω–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
    for user_data in users.values():
        balance = user_data.get('balance', 0)
        if balance > max_balance:
            max_balance = balance
    
    # –µ—Å–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –±–æ–ª—å—à–µ 10^15 (1–∫–∫–∫–∫), –¥–æ–±–∞–≤–ª—è–µ–º –µ—â–µ –æ–¥–Ω—É "–∫"
    if max_balance > 10**15:
        return True
    
    return False

def get_max_k_count():
    """–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É–∫–≤ "–∫" –¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π"""
    if auto_extend_k_limit():
        return 20  # —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–æ 20 –±—É–∫–≤ "–∫"
    return 15  # —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ª–∏–º–∏—Ç 15 –±—É–∫–≤ "–∫"

def extract_username(text: str) -> str:
    t = text.strip()
    
    if 't.me/' in t:
        t = t.split('t.me/')[-1]
    
    if t.startswith('@'):
        t = t[1:]
    
    t = re.sub(r'[^\w_]', '', t)
    return t.lower()

async def generate_referral_link(user_id: int) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É"""
    bot_info = await bot.get_me()
    
    bot_username = bot_info.username
    return f"https://t.me/{bot_username}?start=ref{user_id}"

def get_random_referral_bonus() -> int:
    
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω—ã–π –ø—Ä–∏–∑ –æ—Ç 50–∫–∫ –¥–æ 150–∫–∫"""
    min_bonus = 50_000_000  # 50–∫–∫ = 50 –º–∏–ª–ª–∏–æ–Ω–æ–≤
    
    max_bonus = 150_000_000  # 150–∫–∫ = 150 –º–∏–ª–ª–∏–æ–Ω–æ–≤
    return random.randint(min_bonus, max_bonus)

def get_milestone_bonus(referral_count: int) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–æ–Ω—É—Å –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"""
    if referral_count == 10:
        return 10_000_000_000  # 10–∫–∫–∫ = 10 –º–∏–ª–ª–∏–∞—Ä–¥–æ–≤
    
    elif referral_count == 25:
        return 10_000_000_000  # 10–∫–∫–∫ = 10 –º–∏–ª–ª–∏–∞—Ä–¥–æ–≤
    
    elif referral_count == 50:
        return 30_000_000_000  # 30–∫–∫–∫ = 30 –º–∏–ª–ª–∏–∞—Ä–¥–æ–≤
    
    return 0

async def show_menu(message: types.Message, user_id: int, state: FSMContext = None):
    """–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id_str = str(user_id)  # –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    
    # —Å–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    # –æ—á–∏—â–∞–µ–º —Ä–∞–±–æ—Ç—É –≥—Ä—É–∑—á–∏–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –≤ –º–µ–Ω—é
    if user_id_str in loader_jobs:
        del loader_jobs[user_id_str]
        print(f"üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id_str} –≤—ã—à–µ–ª –∏–∑ —Ä–∞–±–æ—Ç—ã –≥—Ä—É–∑—á–∏–∫–∞")
    
    # –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ
    if state:
        try:
            await state.clear()
            print(f"üîÑ –û—á–∏—â–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_str}")
        except:
            pass
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if user_id_str not in users:
        await show_not_registered_message(message)
        return
    
    user_data = users[user_id_str]
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∏–∫ (–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –æ–Ω)
    if 'nick' not in user_data:
        await show_not_registered_message(message)
        return
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if user_data.get('banned', False):
        ban_reason = user_data.get('ban_reason', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        ban_date = user_data.get('ban_date', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        ban_duration = user_data.get('ban_duration', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='üí¨ –æ–±–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞–∫–∞–∑–∞–Ω–∏–µ', url='https://t.me/daisicxTp_bot')]
        ])
        
        await message.answer(
            f"üö´ <b>—Ç–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
            f"‚ùå <b>–ø—Ä–∏—á–∏–Ω–∞:</b> {ban_reason}\n"
            f"‚è∞ <b>—Å—Ä–æ–∫:</b> {ban_duration}\n"
            f"üìÖ <b>–¥–∞—Ç–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:</b> {ban_date}\n\n"
            f"üí¨ –æ–±–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞–∫–∞–∑–∞–Ω–∏–µ –º–æ–∂–Ω–æ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ\n"
            f"üîó <b>–ø–æ–¥–¥–µ—Ä–∂–∫–∞:</b> @daisicxTp_bot",
            parse_mode='HTML',
    
    reply_markup=markup
        )
        return
    
    balance = user_data.get('balance', 0)
    
    nick = user_data.get('nick', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    
    menu_text = f"–ø—Ä–∏–≤–µ—Ç, <a href=\"tg://user?id={user_id}\"><b>{nick}</b></a>\n—É —Ç–µ–±—è –Ω–∞ —Å—á–µ—Ç—É ‚Äî <b>${format_money(balance)}</b>"
    
    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
    if message.chat.type == 'private':
        markup = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
            [KeyboardButton(text='üíº —Ä–∞–±–æ—Ç–∞'), KeyboardButton(text='üí∞ –±–æ–Ω—É—Å')],
            [KeyboardButton(text='üè¶ –±–∞–Ω–∫'), KeyboardButton(text='üéÆ –∏–≥—Ä—ã')],
            [KeyboardButton(text='üèÜ'), KeyboardButton(text='üé´ –ø—Ä–æ–º–æ–∫–æ–¥—ã')],
            [KeyboardButton(text='‚öôÔ∏è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏')]
        ])
        
        # –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º
        try:
            image_paths = [
    
    'img/plyer_default.jpg',
                './img/plyer_default.jpg',
                'C:/Users/User/Desktop/dodeper bot/img/plyer_default.jpg'
            ]
            
            image_sent = False
            
            for image_path in image_paths:
                try:
                    if os.path.exists(image_path):
                        await bot.send_photo(
                            message.chat.id,
                            types.FSInputFile(image_path),
                            caption=menu_text,
                            parse_mode='HTML',
                            reply_markup=markup
                        )
                        image_sent = True
                        break
                except Exception as e:
                    continue
            
            if not image_sent:
                await message.answer(menu_text, parse_mode='HTML', reply_markup=markup)
        except Exception as e:
            await message.answer(menu_text, parse_mode='HTML', reply_markup=markup)
    
    else:
        # –≤ —á–∞—Ç–∞—Ö —Ç–æ–∂–µ –ø—Ä–æ–±—É–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É
        try:
            image_paths = [
    
    'img/plyer_default.jpg',
                './img/plyer_default.jpg',
                'C:/Users/User/Desktop/dodeper bot/img/plyer_default.jpg'
            ]
            
            print(f"üîç –ü—ã—Ç–∞—é—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –≤ —á–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            image_sent = False
            
            for image_path in image_paths:
                try:
                    print(f"üìÅ –ü—Ä–æ–≤–µ—Ä—è—é –ø—É—Ç—å –≤ —á–∞—Ç–µ: {image_path}")
                    if os.path.exists(image_path):
                        print(f"‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω –≤ —á–∞—Ç–µ: {image_path}")
                        await bot.send_photo(
                            message.chat.id,
                            types.FSInputFile(image_path),
                            caption=menu_text,
                            parse_mode='HTML'
                        )
                        print(f"üì∏ –ö–∞—Ä—Ç–∏–Ω–∫–∞ –≤ —á–∞—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                        image_sent = True
                        break
                    else:
                        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —á–∞—Ç–µ: {image_path}")
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –≤ —á–∞—Ç–µ {image_path}: {e}")
                    continue
            
            if not image_sent:
                print(f"üìù –ö–∞—Ä—Ç–∏–Ω–∫–∞ –≤ —á–∞—Ç–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç")
                await message.answer(menu_text, parse_mode='HTML')
        except Exception as e:
            print(f"üí• –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –≤ —á–∞—Ç–µ: {e}")
            await message.answer(menu_text, parse_mode='HTML')

async def show_work_menu(message: types.Message, user_id: int):
    
    """–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–∞–±–æ—Ç—ã"""
    user_id_str = str(user_id)
    
    # —Å–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    menu_text = 'üíº <b>—Ä–∞–∑–¥–µ–ª —Ä–∞–±–æ—Ç–∞</b>\n\n–∑–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –¥–µ–Ω—å–≥–∏ —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏'
    
    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
    if message.chat.type == 'private':
        markup = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
            [KeyboardButton(text='—Ä–µ—Ñ–µ—Ä–∞–ª—ã üë•')],
            [KeyboardButton(text='üì¶ —Ä–∞–±–æ—Ç–∞ –≥—Ä—É–∑—á–∏–∫–∞')],
            [KeyboardButton(text='–Ω–∞–∑–∞–¥ ‚¨ÖÔ∏è')]
        ])
        
        await message.answer(menu_text, parse_mode='HTML', reply_markup=markup)
    
    else:
        await message.answer(menu_text, parse_mode='HTML')

async def show_bonus_menu(message: types.Message, user_id: int):
    
    """–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –±–æ–Ω—É—Å–æ–≤"""
    user_id_str = str(user_id)
    
    # —Å–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    user_data = users[user_id_str]
    
    nick = user_data.get('nick', '–∏–≥—Ä–æ–∫')
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–æ–Ω—É—Å–∞
    last_bonus_time = user_data.get('last_bonus_time', 0)
    
    current_time = datetime.datetime.now().timestamp()
    time_diff = current_time - last_bonus_time
    
    # 5 –º–∏–Ω—É—Ç = 300 —Å–µ–∫—É–Ω–¥
    if time_diff >= 300:
        # –º–æ–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å –±–æ–Ω—É—Å
        markup = InlineKeyboardMarkup(inline_keyboard=[
    
    [InlineKeyboardButton(text='‚úÖ –∑–∞–±—Ä–∞—Ç—å –±–æ–Ω—É—Å', callback_data='claim_bonus')]
        ])
        
        await message.answer(
            f'<b>{nick}</b>, –∑–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∑–∞–±–∏—Ä–∞—Ç—å –±–æ–Ω—É—Å –∫–∞–∂–¥—ã–µ <b>5 –º–∏–Ω—É—Ç</b>\n\n—Å—É–º–º–∞ –±–æ–Ω—É—Å–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç <b>1–∫–∫–∫</b> –¥–æ <b>10–∫–∫–∫</b>',
            parse_mode='HTML',
    
    reply_markup=markup
        )
    else:
        # –µ—â–µ —Ä–∞–Ω–æ
        remaining_time = 300 - time_diff
        
        minutes = int(remaining_time // 60)
        seconds = int(remaining_time % 60)
        
        time_text = f'<b>{minutes}:{seconds:02d}</b>'
        
        await message.answer(
            f'‚ùå —Ç—ã –Ω–µ –º–æ–∂–µ—à—å –∑–∞–±—Ä–∞—Ç—å –±–æ–Ω—É—Å! –æ—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏ <b>{time_text}</b> –¥–æ –±–æ–Ω—É—Å–∞',
            parse_mode='HTML'
        )

async def show_referrals_menu(message: types.Message, user_id: int):
    """–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"""
    user_id_str = str(user_id)
    
    # —Å–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    user_data = users[user_id_str]
    
    referral_count = user_data.get('referrals', 0)
    total_earned = user_data.get('referral_earnings', 0)
    
    referral_link = await generate_referral_link(user_id)
    
    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
    if message.chat.type == 'private':
        markup = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
    
    [KeyboardButton(text='–Ω–∞–∑–∞–¥ ‚¨ÖÔ∏è')]
        ])
        await message.answer(
            f'üë• <b>—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</b>\n\nüìä —Ç–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n‚Ä¢ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ –ª—é–¥–µ–π: <b>{referral_count}</b>\n‚Ä¢ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: <b>${format_money(total_earned)}</b>\n\nüí∞ <b>–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>\n1. —Å–∫–æ–ø–∏—Ä—É–π —Å–≤–æ—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É\n2. –æ—Ç–ø—Ä–∞–≤—å –µ—ë –≤ —á–∞—Ç\n3. –∫–æ–≥–¥–∞ —á–µ–ª–æ–≤–µ–∫ –ø–µ—Ä–µ–π–¥—ë—Ç –ø–æ —Å—Å—ã–ª–∫–µ –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è\n4. —Ç—ã –ø–æ–ª—É—á–∏—à—å —Ä–∞–Ω–¥–æ–º–Ω—ã–π –ø—Ä–∏–∑ –æ—Ç <b>$50.000.000</b> –¥–æ <b>$150.000.000</b>\n\nüèÜ <b>–±–æ–Ω—É—Å—ã –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b>\n‚Ä¢ 10 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>$10.000.000.000</b> (10–∫–∫–∫)\n‚Ä¢ 25 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>$10.000.000.000</b> (10–∫–∫–∫)\n‚Ä¢ 50 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>$30.000.000.000</b> (30–∫–∫–∫)\n\nüîó <b>—Ç–≤–æ—è —Å—Å—ã–ª–∫–∞:</b>\n<code>{referral_link}</code>',
            parse_mode='HTML',
    
    reply_markup=markup
        )
    else:
        await message.answer(
            f'üë• <b>—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</b>\n\n'
            f'üìä —Ç–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n'
            f'‚Ä¢ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ –ª—é–¥–µ–π: <b>{referral_count}</b>\n'
            f'‚Ä¢ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: <b>${format_money(total_earned)}</b>\n\n'
            f'üí∞ <b>–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>\n'
            f'1. —Å–∫–æ–ø–∏—Ä—É–π —Å–≤–æ—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É\n'
            f'2. –æ—Ç–ø—Ä–∞–≤—å –µ—ë –≤ —á–∞—Ç\n'
            f'3. –∫–æ–≥–¥–∞ —á–µ–ª–æ–≤–µ–∫ –ø–µ—Ä–µ–π–¥—ë—Ç –ø–æ —Å—Å—ã–ª–∫–µ –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è\n'
            f'4. —Ç—ã –ø–æ–ª—É—á–∏—à—å —Ä–∞–Ω–¥–æ–º–Ω—ã–π –ø—Ä–∏–∑ –æ—Ç <b>$50.000.000</b> –¥–æ <b>$150.000.000</b>\n\n'
            f'üèÜ <b>–±–æ–Ω—É—Å—ã –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b>\n'
            f'‚Ä¢ 10 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>$10.000.000.000</b> (10–∫–∫–∫)\n'
            f'‚Ä¢ 25 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>$10.000.000.000</b> (10–∫–∫–∫)\n'
            f'‚Ä¢ 50 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>$30.000.000.000</b> (30–∫–∫–∫)\n\n'
            f'üîó <b>—Ç–≤–æ—è —Å—Å—ã–ª–∫–∞:</b>\n<code>{referral_link}</code>',
            parse_mode='HTML'
    
    )

async def show_games_menu(message: types.Message, user_id: int):
    """–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –∏–≥—Ä"""
    user_id_str = str(user_id)
    
    # —Å–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
    if message.chat.type == 'private':
        markup = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
    
    [KeyboardButton(text='—Ä—É–ª–µ—Ç–∫–∞ üé∞'), KeyboardButton(text='–∫–æ—Å—Ç–∏ üé≤')],
            [KeyboardButton(text='–±–∞—Å–∫–µ—Ç–±–æ–ª üèÄ')],
    
    [KeyboardButton(text='–Ω–∞–∑–∞–¥ ‚¨ÖÔ∏è')]
        ])
        await message.answer(
            'üéÆ <b>—Ä–∞–∑–¥–µ–ª –∏–≥—Ä—ã</b>\n\n–∑–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∏–≥—Ä–∞—Ç—å –≤ —Ä–∞–∑–Ω—ã–µ –∏–≥—Ä—ã –∏ –≤—ã–∏–≥—Ä—ã–≤–∞—Ç—å –¥–µ–Ω—å–≥–∏\n\n‚ö†Ô∏è <b>–≤–∞–∂–Ω–æ:</b> –∏–≥—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–∞—Ö!\n\nüí° <b>–ø–æ–¥—Å–∫–∞–∑–∫–∞:</b> –Ω–∞–∂–º–∏ –Ω–∞ –ª—é–±—É—é –∏–≥—Ä—É, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∏ –∫–æ–º–∞–Ω–¥—ã',
            parse_mode='HTML',
    
    reply_markup=markup
        )
    else:
        await message.answer(
            'üéÆ <b>—Ä–∞–∑–¥–µ–ª –∏–≥—Ä—ã</b>\n\n–∑–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∏–≥—Ä–∞—Ç—å –≤ —Ä–∞–∑–Ω—ã–µ –∏–≥—Ä—ã –∏ –≤—ã–∏–≥—Ä—ã–≤–∞—Ç—å –¥–µ–Ω—å–≥–∏\n\n‚ö†Ô∏è <b>–≤–∞–∂–Ω–æ:</b> –∏–≥—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–∞—Ö!\n\nüí° <b>–ø–æ–¥—Å–∫–∞–∑–∫–∞:</b> –Ω–∞–∂–º–∏ –Ω–∞ –ª—é–±—É—é –∏–≥—Ä—É, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∏ –∫–æ–º–∞–Ω–¥—ã',
            parse_mode='HTML'
    
    )

async def show_bank_menu(message: types.Message, user_id: int):
    """–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –±–∞–Ω–∫–∞"""
    user_id_str = str(user_id)
    
    # —Å–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    user_data = users[user_id_str]
    
    balance = user_data.get('balance', 0)
    deposit = user_data.get('bank_deposit', 0)
    
    deposit_time = user_data.get('bank_deposit_time', 0)
    
    # —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã
    current_time = datetime.datetime.now().timestamp()
    
    hours_passed = 0
    total_interest = 0
    
    can_withdraw = False
    
    if deposit > 0 and deposit_time > 0:
        hours_passed = (current_time - deposit_time) / 3600  # —á–∞—Å—ã
    
    # –º–∞–∫—Å–∏–º—É–º 24 —á–∞—Å–∞ –¥–ª—è 10%
        hours_passed = min(hours_passed, 24)
    
    # 10% –∑–∞ 24 —á–∞—Å–∞ = 0.4167% –∑–∞ —á–∞—Å
        total_interest = int(deposit * 0.004167 * hours_passed)
    
    # –º–æ–∂–Ω–æ —Å–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞
        can_withdraw = (current_time - deposit_time) >= 86400  # 24 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    
    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
    if message.chat.type == 'private':
        markup = InlineKeyboardMarkup(inline_keyboard=[
    
    [InlineKeyboardButton(text='üí∞ –ø–æ–ª–æ–∂–∏—Ç—å –¥–µ–Ω—å–≥–∏', callback_data='bank_deposit')],
            [InlineKeyboardButton(text='üí∏ –∑–∞–±—Ä–∞—Ç—å –¥–µ–Ω—å–≥–∏', callback_data='bank_withdraw')],
    
    [InlineKeyboardButton(text='üìä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∫–ª–∞–¥–µ', callback_data='bank_info')]
        ])
        
        bank_text = f'üè¶ <b>–±–∞–Ω–∫</b>\n\n'
    
        bank_text += f'üí≥ <b>—Ç–≤–æ–π –±–∞–ª–∞–Ω—Å:</b> <b>${format_money(balance)}</b>\n'
        
        if deposit > 0:
            hours_passed_int = int(hours_passed)
            minutes_passed_int = int((hours_passed - hours_passed_int) * 60)
            bank_text += f'üí∞ <b>–≤–∫–ª–∞–¥:</b> <b>${format_money(deposit)}</b>\n'
            bank_text += f'‚è∞ <b>–≤—Ä–µ–º—è –≤–∫–ª–∞–¥–∞:</b> <b>{hours_passed_int}—á {minutes_passed_int}–º</b>\n'
            bank_text += f'üíé <b>–Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã:</b> <b>${format_money(total_interest)}</b>\n'
            if can_withdraw:
                bank_text += f'‚úÖ <b>–º–æ–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å –¥–µ–Ω—å–≥–∏</b>\n\n'
            else:
                remaining_time = 86400 - (current_time - deposit_time)
                
                remaining_hours = int(remaining_time // 3600)
                remaining_minutes = int((remaining_time % 3600) // 60)
                
                bank_text += f'‚è≥ <b>–¥–æ —Å–Ω—è—Ç–∏—è:</b> <b>{remaining_hours}—á {remaining_minutes}–º</b>\n\n'
        else:
            bank_text += f'üí∞ <b>–≤–∫–ª–∞–¥:</b> <b>–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–∫–ª–∞–¥–∞</b>\n\n'
        
        bank_text += 'üí° <b>–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>\n'
        bank_text += '‚Ä¢ –ø–æ–ª–æ–∂–∏ –¥–µ–Ω—å–≥–∏ –≤–æ –≤–∫–ª–∞–¥\n'
        bank_text += '‚Ä¢ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è 24 —á–∞—Å–∞ (10%)\n'
        bank_text += '‚Ä¢ —Å–Ω—è—Ç—å –¥–µ–Ω—å–≥–∏ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ —Å—É—Ç–∫–∏\n'
        bank_text += '‚Ä¢ –ø—Ä–∏ –¥–æ—Å—Ä–æ—á–Ω–æ–º —Å–Ω—è—Ç–∏–∏ - —à—Ç—Ä–∞—Ñ –±–µ–∑ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤\n\n'
        bank_text += '‚ö†Ô∏è <b>–≤–∞–∂–Ω–æ:</b> –≤–∫–ª–∞–¥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ 24 —á–∞—Å–∞!'
        
        await message.answer(bank_text, parse_mode='HTML', reply_markup=markup)
    
    else:
        bank_text = f'üè¶ <b>–±–∞–Ω–∫</b>\n\n'
    
        bank_text += f'üí≥ <b>—Ç–≤–æ–π –±–∞–ª–∞–Ω—Å:</b> <b>${format_money(balance)}</b>\n'
        
        if deposit > 0:
            hours_passed_int = int(hours_passed)
    
            minutes_passed_int = int((hours_passed - hours_passed_int) * 60)
            bank_text += f'üí∞ <b>–≤–∫–ª–∞–¥:</b> <b>${format_money(deposit)}</b>\n'
            bank_text += f'‚è∞ <b>–≤—Ä–µ–º—è –≤–∫–ª–∞–¥–∞:</b> <b>{hours_passed_int}—á {minutes_passed_int}–º</b>\n'
            bank_text += f'üíé <b>–Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã:</b> <b>${format_money(total_interest)}</b>\n'
            if can_withdraw:
                bank_text += f'‚úÖ <b>–º–æ–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å –¥–µ–Ω—å–≥–∏</b>\n\n'
            else:
                remaining_time = 86400 - (current_time - deposit_time)
                
                remaining_hours = int(remaining_time // 3600)
                remaining_minutes = int((remaining_time % 3600) // 60)
    
                bank_text += f'‚è≥ <b>–¥–æ —Å–Ω—è—Ç–∏—è:</b> <b>{remaining_hours}—á {remaining_minutes}–º</b>\n\n'
        else:
            bank_text += f'üí∞ <b>–≤–∫–ª–∞–¥:</b> <b>–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–∫–ª–∞–¥–∞</b>\n\n'
        
        bank_text += 'üí° <b>–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>\n'
        bank_text += '‚Ä¢ –ø–æ–ª–æ–∂–∏ –¥–µ–Ω—å–≥–∏ –≤–æ –≤–∫–ª–∞–¥\n'
        bank_text += '‚Ä¢ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è 24 —á–∞—Å–∞ (10%)\n'
        bank_text += '‚Ä¢ —Å–Ω—è—Ç—å –¥–µ–Ω—å–≥–∏ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ —Å—É—Ç–∫–∏\n'
        bank_text += '‚Ä¢ –ø—Ä–∏ –¥–æ—Å—Ä–æ—á–Ω–æ–º —Å–Ω—è—Ç–∏–∏ - —à—Ç—Ä–∞—Ñ –±–µ–∑ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤\n\n'
        bank_text += '‚ö†Ô∏è <b>–≤–∞–∂–Ω–æ:</b> –≤–∫–ª–∞–¥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ 24 —á–∞—Å–∞!'
        
        await message.answer(bank_text, parse_mode='HTML')

# === –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –ì–†–£–ó–ß–ò–ö–ê ===

async def start_loader_work(message: types.Message, user_id_str: str, state: FSMContext):
    """–Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–±–æ—Ç—É –≥—Ä—É–∑—á–∏–∫–∞"""
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—á–∞–ª –ª–∏ —É–∂–µ —Ä–∞–±–æ—Ç—É
    if user_id_str in loader_jobs:
        await message.answer('‚ö†Ô∏è —Ç—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—à—å –≥—Ä—É–∑—á–∏–∫–æ–º! —Å–Ω–∞—á–∞–ª–∞ –∑–∞–∫–æ–Ω—á–∏ —Ç–µ–∫—É—â—É—é —Å–º–µ–Ω—É')
        return
    
    # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É
    loader_jobs[user_id_str] = {
        'start_time': datetime.datetime.now().timestamp(),
        'total_earnings': 0,
        'cargo_count': 0,
        'current_cargo': None,
        'cargo_accepted': False,
        'cargo_rejected': False
    }
    
    # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(LoaderState.working)
    
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–∞–±–æ—Ç–µ
    await send_cargo_message(message, user_id_str)
async def send_cargo_message(message: types.Message, user_id_str: str):
    """–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –≥—Ä—É–∑–µ"""
    if user_id_str not in loader_jobs:
        return
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ª–∏ —É–∂–µ –≥—Ä—É–∑
    if loader_jobs[user_id_str].get('sending_cargo', False):
        print(f"‚ö†Ô∏è –ì—Ä—É–∑ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –¥–ª—è {user_id_str}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
    
    # –ø–æ–º–µ—á–∞–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä—É–∑
    loader_jobs[user_id_str]['sending_cargo'] = True
    
    try:
        # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–∏—Å–∫ –≥—Ä—É–∑–∞
        search_text = "üîç –∏—â—É –Ω–æ–≤—ã–π –≥—Ä—É–∑..."
        search_msg = await message.answer(search_text, parse_mode='HTML')
        
        # —Ä–∞–Ω–¥–æ–º–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞ (1-3 —Å–µ–∫—É–Ω–¥—ã)
        import random
        search_time = random.uniform(1, 3)
        await asyncio.sleep(search_time)
        
        # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ
        try:
            await search_msg.delete()
        except:
            pass
        
        # –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≥—Ä—É–∑
        cargo = select_random_cargo()
        
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –≥—Ä—É–∑ –∏ –æ—á–∏—â–∞–µ–º —Ñ–ª–∞–≥–∏
        loader_jobs[user_id_str]['current_cargo'] = cargo
        loader_jobs[user_id_str]['cargo_accepted'] = False
        loader_jobs[user_id_str]['cargo_rejected'] = False
        
        # —Å–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        cargo_text = f"üì¶ <b>–Ω–∞–π–¥–µ–Ω –≥—Ä—É–∑!</b>\n\n"
        cargo_text += f"üéØ <b>–≥—Ä—É–∑:</b> {cargo['emoji']} {cargo['name']}\n"
        cargo_text += f"‚öñÔ∏è <b>–≤–µ—Å:</b> {cargo['weight']}\n"
        cargo_text += f"‚è±Ô∏è <b>–≤—Ä–µ–º—è –ø–µ—Ä–µ–Ω–æ—Å–∞:</b> {cargo['time']} —Å–µ–∫\n"
        cargo_text += f"üí∞ <b>–æ–ø–ª–∞—Ç–∞:</b> ${format_money(cargo['payment'])}\n\n"
        
        if cargo.get('super_rare'):
            cargo_text += "üíé <b>–°–£–ü–ï–† –†–ï–î–ö–ò–ô –ì–†–£–ó!</b>\n"
        elif cargo.get('rare'):
            cargo_text += "‚≠ê <b>—Ä–µ–¥–∫–∏–π –≥—Ä—É–∑!</b>\n"
        
        cargo_text += "\nü§î –±—É–¥–µ—à—å –±—Ä–∞—Ç—å —ç—Ç–æ—Ç –≥—Ä—É–∑?"
        
        # —Å–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='‚úÖ –ø—Ä–∏–Ω—è—Ç—å', callback_data='cargo_accept'), 
             InlineKeyboardButton(text='‚ùå –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è', callback_data='cargo_reject')]
        ])
        
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        cargo_msg = await message.answer(cargo_text, parse_mode='HTML', reply_markup=markup)
        
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏ —É–¥–∞–ª–∏–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏
        try:
            prev_msg_id = loader_jobs[user_id_str].get('current_message_id')
            if prev_msg_id:
                await bot.delete_message(message.chat.id, prev_msg_id)
        except:
            pass
        loader_jobs[user_id_str]['current_message_id'] = cargo_msg.message_id
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥—Ä—É–∑–∞ –¥–ª—è {user_id_str}: {e}")
    finally:
        # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥—Ä—É–∑–∞
        if user_id_str in loader_jobs:
            loader_jobs[user_id_str]['sending_cargo'] = False

def select_random_cargo():
    """–≤—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –≥—Ä—É–∑ —Å —É—á–µ—Ç–æ–º —Ä–µ–¥–∫–æ—Å—Ç–∏"""
    import random
    
    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≥—Ä—É–∑–∞ –ø–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
    rand = random.random()
    
    if rand < 0.008:  # 0.8% - —Å—É–ø–µ—Ä —Ä–µ–¥–∫–∏–µ (–±—ã–ª–æ 5%)
        rare_cargos = [c for c in cargo_types if c.get('super_rare')]
        return random.choice(rare_cargos) if rare_cargos else cargo_types[0]
    elif rand < 0.035:  # 2.7% - —Ä–µ–¥–∫–∏–µ (–±—ã–ª–æ 15%)
        rare_cargos = [c for c in cargo_types if c.get('rare')]
        return random.choice(rare_cargos) if rare_cargos else cargo_types[0]
    else:  # 96.5% - –æ–±—ã—á–Ω—ã–µ (–±—ã–ª–æ 80%)
        normal_cargos = [c for c in cargo_types if not c.get('rare') and not c.get('super_rare')]
        return random.choice(normal_cargos) if normal_cargos else cargo_types[0]

async def cargo_timer(chat_id: int, user_id_str: str, time_seconds: int):
    """—Ç–∞–π–º–µ—Ä –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –≥—Ä—É–∑–∞"""
    await asyncio.sleep(time_seconds)
    
    if user_id_str not in loader_jobs:
        return
    
    # –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å –≥—Ä—É–∑–∞
    await complete_cargo_delivery(chat_id, user_id_str)

async def complete_cargo_delivery(chat_id: int, user_id_str: str):
    """–∑–∞–≤–µ—Ä—à–∞–µ—Ç –¥–æ—Å—Ç–∞–≤–∫—É –≥—Ä—É–∑–∞ –∏ –Ω–∞—á–∏—Å–ª—è–µ—Ç –æ–ø–ª–∞—Ç—É"""
    if user_id_str not in loader_jobs:
        return
    
    job = loader_jobs[user_id_str]
    cargo = job.get('current_cargo')
    
    if not cargo:
        return
    
    # –Ω–∞—á–∏—Å–ª—è–µ–º –æ–ø–ª–∞—Ç—É
    payment = cargo['payment']
    job['total_earnings'] += payment
    job['cargo_count'] += 1
    
    # –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id_str in users:
        users[user_id_str]['balance'] += payment
        save_users()
    
    # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–Ω–æ—Å–µ
    try:
        await bot.delete_message(chat_id, job.get('delivery_message_id', 0))
    except:
        pass
    
    # —Å–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∞–≤–∫–µ –≥—Ä—É–∑–∞
    delivery_text = f"‚úÖ <b>–≥—Ä—É–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω!</b>\n\n"
    delivery_text += f"üì¶ {cargo['emoji']} {cargo['name']}\n"
    delivery_text += f"üí∞ <b>–ø–æ–ª—É—á–µ–Ω–æ:</b> ${format_money(payment)}\n\n"
    
    if cargo.get('super_rare'):
        delivery_text += "üíé <b>–°–£–ü–ï–† –†–ï–î–ö–ò–ô –ì–†–£–ó –î–û–°–¢–ê–í–õ–ï–ù!</b>\n"
    elif cargo.get('rare'):
        delivery_text += "‚≠ê <b>—Ä–µ–¥–∫–∏–π –≥—Ä—É–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω!</b>\n"
    
    # —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥—Ä—É–∑–æ–º/—Å—Ç–∞—Ç—É—Å–æ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    try:
        prev_msg_id = job.get('current_message_id')
        if prev_msg_id:
            await bot.delete_message(chat_id, prev_msg_id)
    except:
        pass
    try:
        delivery_msg = await bot.send_message(chat_id, delivery_text, parse_mode='HTML')
        job['current_message_id'] = delivery_msg.message_id
    except:
        pass
    
    # —Å–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    stats_text = f"üìä <b>—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–º–µ–Ω—ã:</b>\n"
    stats_text += f"‚Ä¢ –≥—Ä—É–∑–æ–≤ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {job['cargo_count']}\n"
    stats_text += f"‚Ä¢ –æ–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: ${format_money(job['total_earnings'])}\n\n"
    stats_text += "üîÑ –∏—â–µ–º –Ω–æ–≤—ã–π –≥—Ä—É–∑..."
    
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π, –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è—è –ø—Ä–µ–¥—ã–¥—É—â–µ–µ
    try:
        prev_msg_id = job.get('current_message_id')
        if prev_msg_id:
            await bot.delete_message(chat_id, prev_msg_id)
    except:
        pass
    try:
        stats_msg = await bot.send_message(chat_id, stats_text, parse_mode='HTML')
        job['current_message_id'] = stats_msg.message_id
    except:
        pass
    
    # –æ—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π –≥—Ä—É–∑ –∏ —Ñ–ª–∞–≥–∏
    job['current_cargo'] = None
    job['cargo_accepted'] = False
    job['cargo_rejected'] = False
    
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –≥—Ä—É–∑ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
    await asyncio.sleep(2)
    if user_id_str in loader_jobs:
        await send_cargo_message_via_bot(chat_id, user_id_str)

async def send_cargo_message_via_bot(chat_id: int, user_id_str: str):
    """–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –≥—Ä—É–∑–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞"""
    if user_id_str not in loader_jobs:
        return
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ª–∏ —É–∂–µ –≥—Ä—É–∑
    if loader_jobs[user_id_str].get('sending_cargo', False):
        print(f"‚ö†Ô∏è –ì—Ä—É–∑ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –¥–ª—è {user_id_str}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
    
    # –ø–æ–º–µ—á–∞–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä—É–∑
    loader_jobs[user_id_str]['sending_cargo'] = True
    
    try:
        # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–∏—Å–∫ –≥—Ä—É–∑–∞
        search_text = "üîç –∏—â—É –Ω–æ–≤—ã–π –≥—Ä—É–∑..."
        search_msg = await bot.send_message(chat_id, search_text, parse_mode='HTML')
        
        # —Ä–∞–Ω–¥–æ–º–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞ (1-3 —Å–µ–∫—É–Ω–¥—ã)
        import random
        search_time = random.uniform(1, 3)
        await asyncio.sleep(search_time)
        
        # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ
        try:
            await bot.delete_message(chat_id, search_msg.message_id)
        except:
            pass
        
        # –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≥—Ä—É–∑
        cargo = select_random_cargo()
        
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –≥—Ä—É–∑ –∏ –æ—á–∏—â–∞–µ–º —Ñ–ª–∞–≥–∏
        loader_jobs[user_id_str]['current_cargo'] = cargo
        loader_jobs[user_id_str]['cargo_accepted'] = False
        loader_jobs[user_id_str]['cargo_rejected'] = False
        
        # —Å–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        cargo_text = f"üì¶ <b>–Ω–∞–π–¥–µ–Ω –≥—Ä—É–∑!</b>\n\n"
        cargo_text += f"üéØ <b>–≥—Ä—É–∑:</b> {cargo['emoji']} {cargo['name']}\n"
        cargo_text += f"‚öñÔ∏è <b>–≤–µ—Å:</b> {cargo['weight']}\n"
        cargo_text += f"‚è±Ô∏è <b>–≤—Ä–µ–º—è –ø–µ—Ä–µ–Ω–æ—Å–∞:</b> {cargo['time']} —Å–µ–∫\n"
        cargo_text += f"üí∞ <b>–æ–ø–ª–∞—Ç–∞:</b> ${format_money(cargo['payment'])}\n\n"
        
        if cargo.get('super_rare'):
            cargo_text += "üíé <b>–°–£–ü–ï–† –†–ï–î–ö–ò–ô –ì–†–£–ó!</b>\n"
        elif cargo.get('rare'):
            cargo_text += "‚≠ê <b>—Ä–µ–¥–∫–∏–π –≥—Ä—É–∑!</b>\n"
        
        # —Ä–∞–Ω–¥–æ–º–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ –≥—Ä—É–∑–∞ (5-30 —Å–µ–∫—É–Ω–¥)
        accept_time = random.randint(5, 30)
        
        cargo_text += "\nü§î –±—É–¥–µ—à—å –±—Ä–∞—Ç—å —ç—Ç–æ—Ç –≥—Ä—É–∑?"
        
        # —Å–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='‚úÖ –ø—Ä–∏–Ω—è—Ç—å', callback_data='cargo_accept'), 
             InlineKeyboardButton(text='‚ùå –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è', callback_data='cargo_reject')]
        ])
        
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        cargo_msg = await bot.send_message(chat_id, cargo_text, parse_mode='HTML', reply_markup=markup)
        
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏ —É–¥–∞–ª–∏–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏
        try:
            prev_msg_id = loader_jobs[user_id_str].get('current_message_id')
            if prev_msg_id:
                await bot.delete_message(chat_id, prev_msg_id)
        except:
            pass
        loader_jobs[user_id_str]['current_message_id'] = cargo_msg.message_id
        
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –ø—Ä–∏–Ω—è—Ç–∏—è –≥—Ä—É–∑–∞
        loader_jobs[user_id_str]['cargo_accept_time'] = accept_time
        loader_jobs[user_id_str]['cargo_available_until'] = datetime.datetime.now().timestamp() + accept_time
        
        # –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ –≥—Ä—É–∑–∞
        asyncio.create_task(cargo_accept_timer(chat_id, user_id_str, accept_time))
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥—Ä—É–∑–∞ –¥–ª—è {user_id_str}: {e}")
    finally:
        # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥—Ä—É–∑–∞
        if user_id_str in loader_jobs:
            loader_jobs[user_id_str]['sending_cargo'] = False

async def cargo_accept_timer(chat_id: int, user_id_str: str, accept_time: int):
    """—Ç–∞–π–º–µ—Ä –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –≥—Ä—É–∑–∞"""
    print(f"üöÄ –¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω –¥–ª—è {user_id_str}, –≤—Ä–µ–º—è: {accept_time} —Å–µ–∫")
    
    await asyncio.sleep(accept_time)
    
    print(f"‚è∞ –¢–∞–π–º–µ—Ä –∏—Å—Ç–µ–∫ –¥–ª—è {user_id_str}")
    
    if user_id_str not in loader_jobs:
        print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id_str} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ loader_jobs")
        return
    
    job = loader_jobs[user_id_str]
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –≥—Ä—É–∑ —É–∂–µ –ø—Ä–∏–Ω—è—Ç –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω
    if ('cargo_accepted' in job and job['cargo_accepted']) or ('cargo_rejected' in job and job['cargo_rejected']):
        print(f"‚úÖ –ì—Ä—É–∑ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id_str}")
        return
    
    print(f"‚ùå –ì—Ä—É–∑ –Ω–µ –±—ã–ª –ø—Ä–∏–Ω—è—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id_str}")
    
    # –≥—Ä—É–∑ –Ω–µ –±—ã–ª –ø—Ä–∏–Ω—è—Ç –≤–æ–≤—Ä–µ–º—è
    cargo = job.get('current_cargo')
    if not cargo:
        print(f"‚ùå –ì—Ä—É–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_str}")
        return
    
    print(f"üì¶ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –≥—Ä—É–∑ –≤–∑—è–ª –¥—Ä—É–≥–æ–π –∏–≥—Ä–æ–∫ –¥–ª—è {user_id_str}")
    
    # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥—Ä—É–∑–æ–º
    try:
        await bot.delete_message(chat_id, job.get('current_message_id', 0))
        print(f"üóëÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ —Å –≥—Ä—É–∑–æ–º —É–¥–∞–ª–µ–Ω–æ –¥–ª—è {user_id_str}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –≥—Ä—É–∑ –≤–∑—è–ª –¥—Ä—É–≥–æ–π –∏–≥—Ä–æ–∫
    timeout_text = f"‚ùå <b>—Ç—ã –Ω–µ —É—Å–ø–µ–ª!</b>\n\n"
    timeout_text += f"üì¶ {cargo['emoji']} {cargo['name']}\n"
    timeout_text += f"üí∞ <b>–æ–ø–ª–∞—Ç–∞:</b> ${format_money(cargo['payment'])}\n\n"
    timeout_text += "üòî <b>–≥—Ä—É–∑ –≤–∑—è–ª –¥—Ä—É–≥–æ–π –∏–≥—Ä–æ–∫</b>"
    
    try:
        # —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            prev_msg_id = job.get('current_message_id')
            if prev_msg_id:
                await bot.delete_message(chat_id, prev_msg_id)
        except:
            pass
        timeout_msg = await bot.send_message(chat_id, timeout_text, parse_mode='HTML')
        job['current_message_id'] = timeout_msg.message_id
        print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –≥—Ä—É–∑ –≤–∑—è–ª –¥—Ä—É–≥–æ–π –∏–≥—Ä–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è {user_id_str}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    # –æ—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π –≥—Ä—É–∑ –∏ —Ñ–ª–∞–≥–∏
    job['current_cargo'] = None
    job['cargo_accepted'] = False
    job['cargo_rejected'] = False
    
    # –∏—â–µ–º –Ω–æ–≤—ã–π –≥—Ä—É–∑ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
    await asyncio.sleep(2)
    if user_id_str in loader_jobs:
        print(f"üîÑ –ò—â–µ–º –Ω–æ–≤—ã–π –≥—Ä—É–∑ –¥–ª—è {user_id_str}")
        await send_cargo_message_via_bot(chat_id, user_id_str)

async def finish_loader_work(chat_id: int, user_id_str: str):
    """–∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É –≥—Ä—É–∑—á–∏–∫–∞ –∏ –≤—ã–¥–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—É—é –æ–ø–ª–∞—Ç—É"""
    if user_id_str not in loader_jobs:
        return
    
    job = loader_jobs[user_id_str]
    
    # —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
    work_time = datetime.datetime.now().timestamp() - job['start_time']
    hours = int(work_time // 3600)
    minutes = int((work_time % 3600) // 60)
    seconds = int(work_time % 60)
    
    # —Å–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    final_text = f"üèÅ <b>—Å–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
    final_text += f"‚è±Ô∏è <b>–≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> {hours:02d}:{minutes:02d}:{seconds:02d}\n"
    final_text += f"üì¶ <b>–≥—Ä—É–∑–æ–≤ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ:</b> {job['cargo_count']}\n"
    final_text += f"üí∞ <b>–æ–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫:</b> ${format_money(job['total_earnings'])}\n\n"
    
    if job['cargo_count'] > 0:
        avg_per_cargo = job['total_earnings'] // job['cargo_count']
        final_text += f"üìä <b>—Å—Ä–µ–¥–Ω—è—è –æ–ø–ª–∞—Ç–∞ –∑–∞ –≥—Ä—É–∑:</b> ${format_money(avg_per_cargo)}\n\n"
    
    final_text += "‚úÖ <b>–≤—Å–µ –¥–µ–Ω—å–≥–∏ –Ω–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å!</b>"
    
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot.send_message(chat_id, final_text, parse_mode='HTML')
    
    # –æ—á–∏—â–∞–µ–º —Ä–∞–±–æ—Ç—É
    del loader_jobs[user_id_str]

# === –ö–û–õ–õ–ë–≠–ö–ò –î–õ–Ø –†–ê–ë–û–¢–´ –ì–†–£–ó–ß–ò–ö–ê ===

@dp.callback_query(lambda c: c.data == 'cargo_accept')
async def cargo_accept_callback(callback: types.CallbackQuery):
    """–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–Ω—è—Ç–∏—è –≥—Ä—É–∑–∞"""
    user_id = callback.from_user.id
    user_id_str = str(user_id)
    
    if user_id_str not in loader_jobs:
        await callback.answer("—Ç—ã –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—à—å –≥—Ä—É–∑—á–∏–∫–æ–º", show_alert=True)
        return
    
    job = loader_jobs[user_id_str]
    cargo = job.get('current_cargo')
    
    if not cargo:
        await callback.answer("–≥—Ä—É–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏–Ω—è—Ç –ª–∏ —É–∂–µ –≥—Ä—É–∑
    if job.get('cargo_accepted', False):
        await callback.answer("–≥—Ä—É–∑ —É–∂–µ –ø—Ä–∏–Ω—è—Ç!", show_alert=True)
        return
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω –ª–∏ –≥—Ä—É–∑
    if job.get('cargo_rejected', False):
        await callback.answer("–≥—Ä—É–∑ —É–∂–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω!", show_alert=True)
        return
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è
    current_time = datetime.datetime.now().timestamp()
    if 'cargo_available_until' in job and current_time > job['cargo_available_until']:
        print(f"‚è∞ –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ –¥–ª—è {user_id_str}, –≥—Ä—É–∑ —É–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        await callback.answer("–≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ! –≥—Ä—É–∑ –≤–∑—è–ª –¥—Ä—É–≥–æ–π –∏–≥—Ä–æ–∫", show_alert=True)
        return
    
    print(f"‚úÖ –ì—Ä—É–∑ –ø—Ä–∏–Ω—è—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id_str}")
    # –ø–æ–º–µ—á–∞–µ–º –≥—Ä—É–∑ –∫–∞–∫ –ø—Ä–∏–Ω—è—Ç—ã–π
    job['cargo_accepted'] = True
    
    # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –≥—Ä—É–∑–∞
    try:
        await callback.message.delete()
    except:
        pass
    
    # —Å–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–µ—Ä–µ–Ω–æ—Å–∞
    delivery_text = f"üì¶ <b>–Ω–∞—á–∏–Ω–∞—é –ø–µ—Ä–µ–Ω–æ—Å –≥—Ä—É–∑–∞!</b>\n\n"
    delivery_text += f"üéØ <b>–≥—Ä—É–∑:</b> {cargo['emoji']} {cargo['name']}\n"
    delivery_text += f"‚è±Ô∏è <b>–≤—Ä–µ–º—è –ø–µ—Ä–µ–Ω–æ—Å–∞:</b> {cargo['time']} —Å–µ–∫\n"
    delivery_text += f"üí∞ <b>–æ–ø–ª–∞—Ç–∞:</b> ${format_money(cargo['payment'])}\n\n"
    delivery_text += "‚è≥ –ø–µ—Ä–µ–Ω–æ—Å–∏–º –≥—Ä—É–∑..."
    
    # —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–±–æ—Ç—É
    markup = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [KeyboardButton(text='üèÅ –∑–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–±–æ—Ç—É')]
    ])
    
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–Ω–æ—Å–µ
    delivery_msg = await callback.message.answer(delivery_text, parse_mode='HTML', reply_markup=markup)
    
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–µ—Ä–µ–Ω–æ—Å–µ
    loader_jobs[user_id_str]['delivery_message_id'] = delivery_msg.message_id
    
    # –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
    asyncio.create_task(cargo_timer(callback.message.chat.id, user_id_str, cargo['time']))
    
    await callback.answer("–≥—Ä—É–∑ –ø—Ä–∏–Ω—è—Ç!")

@dp.callback_query(lambda c: c.data == 'cargo_reject')
async def cargo_reject_callback(callback: types.CallbackQuery):
    """–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–∞–∑–∞ –æ—Ç –≥—Ä—É–∑–∞"""
    user_id = callback.from_user.id
    user_id_str = str(user_id)
    
    if user_id_str not in loader_jobs:
        await callback.answer("—Ç—ã –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—à—å –≥—Ä—É–∑—á–∏–∫–æ–º", show_alert=True)
        return
    
    job = loader_jobs[user_id_str]
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏–Ω—è—Ç –ª–∏ —É–∂–µ –≥—Ä—É–∑
    if job.get('cargo_accepted', False):
        await callback.answer("–≥—Ä—É–∑ —É–∂–µ –ø—Ä–∏–Ω—è—Ç!", show_alert=True)
        return
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω –ª–∏ –≥—Ä—É–∑
    if job.get('cargo_rejected', False):
        await callback.answer("–≥—Ä—É–∑ —É–∂–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω!", show_alert=True)
        return
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è
    current_time = datetime.datetime.now().timestamp()
    if 'cargo_available_until' in job and current_time > job['cargo_available_until']:
        await callback.answer("–≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ! –≥—Ä—É–∑ –≤–∑—è–ª –¥—Ä—É–≥–æ–π –∏–≥—Ä–æ–∫", show_alert=True)
        return
    
    # –ø–æ–º–µ—á–∞–µ–º –≥—Ä—É–∑ –∫–∞–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–π (—á—Ç–æ–±—ã —Ç–∞–π–º–µ—Ä –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª)
    job['cargo_rejected'] = True
    
    # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–∫–∞–∑–æ–º
    try:
        await callback.message.delete()
    except:
        pass
    
    # –∏—â–µ–º –Ω–æ–≤—ã–π –≥—Ä—É–∑
    await send_cargo_message_via_bot(callback.message.chat.id, user_id_str)
    
    await callback.answer("–∏—â—É –Ω–æ–≤—ã–π –≥—Ä—É–∑...")

async def show_not_registered_message(message: types.Message):
    
    """–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö"""
    user_id = message.from_user.id
    
    user_id_str = str(user_id)
    
    # —Å–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    keyboard = InlineKeyboardBuilder()
    
    keyboard.button(text="—Å–æ–∑–¥–∞—Ç—å —á–µ–ª–æ–≤–µ—á–∫–∞", callback_data="create_human")
    await message.answer(
        '—Ç—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ',
        reply_markup=keyboard.as_markup()
    
    )

@dp.message(Command('start'))
async def cmd_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    
    user_id_str = str(user_id)
    
    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
    args = message.text.split()
    
    referral_id = None
    promo_code = None
    
    if len(args) > 1:
        for arg in args[1:]:
            # –ò—â–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π ID –≤ —Ñ–æ—Ä–º–∞—Ç–µ ref<id>
            if arg.startswith('ref'):
                try:
                    referral_id = int(arg[3:])
                except ValueError:
                    continue
            # –ò—â–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ promo_<code>
            elif arg.startswith('promo_'):
                promo_code = arg[6:]  # —É–±–∏—Ä–∞–µ–º 'promo_' –ø—Ä–µ—Ñ–∏–∫—Å
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    is_registered = user_id_str in users and 'nick' in users.get(user_id_str, {})
    
    if is_registered:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        user_data = users[user_id_str]
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—à—ë–ª –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
        if referral_id and str(referral_id) in users:
            users[user_id_str]['temp_referrer'] = referral_id
            users[user_id_str]['temp_referral_date'] = str(datetime.datetime.now())
            save_users()
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—à—ë–ª –ø–æ —Å—Å—ã–ª–∫–µ —Å –ø—Ä–æ–º–æ–∫–æ–¥–æ–º, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –µ–≥–æ
        if promo_code:
            await activate_promo_from_link(message, user_id_str, promo_code)
        else:
            await show_menu(message, user_id)
        return
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ
    if referral_id and str(referral_id) in users:
        if user_id_str not in users:
            users[user_id_str] = {}
        users[user_id_str]['temp_referrer'] = referral_id
        users[user_id_str]['temp_referral_date'] = str(datetime.datetime.now())
        save_users()
    
    if message.chat.type == 'private':
        markup = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[[KeyboardButton(text='–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è ‚úÖ')]])
        try:
            # –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø—É—Ç–∏ –∫ –∫–∞—Ä—Ç–∏–Ω–∫–µ
            image_paths = [
                'img/plyer_default.jpg',
                './img/plyer_default.jpg',
                'img/player_default.jpg',
                './img/player_default.jpg',
                'C:/Users/User/Desktop/dodeper bot/img/plyer_default.jpg',
                'C:/Users/User/Desktop/dodeper bot/img/player_default.jpg'
            ]
            image_sent = False
            for image_path in image_paths:
                try:
                    if os.path.exists(image_path):
                        await bot.send_photo(
                            message.chat.id,
                            types.FSInputFile(image_path),
                            caption='<b>–ø—Ä–∏–≤–µ—Ç</b>\n–≤–∏–∂—É, —á—Ç–æ —É —Ç–µ–±—è –Ω–µ—Ç—É –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –±–æ—Ç–µ, –¥–∞–≤–∞–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è',
                            parse_mode='HTML',
                            reply_markup=markup
                        )
                        image_sent = True
                        break
                except Exception:
                    continue
            if not image_sent:
                await message.answer(
                    '<b>–ø—Ä–∏–≤–µ—Ç</b>\n–≤–∏–∂—É, —á—Ç–æ —É —Ç–µ–±—è –Ω–µ—Ç—É –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –±–æ—Ç–µ, –¥–∞–≤–∞–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è',
                    parse_mode='HTML',
                    reply_markup=markup
                )
        except Exception:
            await message.answer(
                '<b>–ø—Ä–∏–≤–µ—Ç</b>\n–≤–∏–∂—É, —á—Ç–æ —É —Ç–µ–±—è –Ω–µ—Ç—É –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –±–æ—Ç–µ, –¥–∞–≤–∞–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è',
                parse_mode='HTML',
                reply_markup=markup
            )
    else:
        await message.answer('–Ω–∞–ø–∏—à–∏ –±–æ—Ç—É –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è')

# –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∞–ª–∏–∞—Å—ã –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –±–µ–∑ —Å–ª–µ—à–∞
@dp.message(F.text.lower() == '—Å—Ç–∞—Ä—Ç')
async def cmd_start_rus_text(message: types.Message, state: FSMContext):
    await cmd_start(message, state)
@dp.message(F.text.lower() == 'start')
async def cmd_start_eng_text(message: types.Message, state: FSMContext):
    await cmd_start(message, state)

@dp.message(Command('clear_db'))
async def clear_database(message: types.Message):
    user_id = message.from_user.id
    
    user_id_str = str(user_id)
    
    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS:
        await message.answer('—É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ')
        return
    
    global users
    users = {}
    
    save_users()
    await message.answer('–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞')

@dp.message(Command('fix_db'))
async def fix_database(message: types.Message):
    user_id = message.from_user.id
    
    user_id_str = str(user_id)
    
    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS:
        await message.answer('—É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ')
        return
    
    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –±–∞–∑—É –±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    fixed_users = {}
    
    for user_id, user_data in users.items():
        if user_id not in fixed_users:
            # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –µ—Å—Ç—å
            if 'warns' not in user_data:
                user_data['warns'] = 0
            if 'banned' not in user_data:
                user_data['banned'] = False
            if 'referral_earnings' not in user_data:
                user_data['referral_earnings'] = 0
            fixed_users[user_id] = user_data
    
    users = fixed_users
    
    save_users()
    await message.answer(f'–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞. –æ—Å—Ç–∞–ª–æ—Å—å {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')

@dp.message(F.text.lower() == '–º–µ–Ω—é')
async def on_menu_button(message: types.Message):
    user_id = message.from_user.id
    
    user_id_str = str(user_id)
    
    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    if user_id_str not in users:
        await show_not_registered_message(message)
        return
    
    if 'nick' not in users[user_id_str]:
        await show_not_registered_message(message)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user_data = users[user_id_str]
    
    if user_data.get('banned', False):
        ban_reason = user_data.get('ban_reason', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        ban_duration = user_data.get('ban_duration', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='üí¨ –æ–±–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞–∫–∞–∑–∞–Ω–∏–µ', url='https://t.me/daisicxTp_bot')]
        ])
        
        await message.answer(
            f"üö´ <b>—Ç–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
            f"‚ùå <b>–ø—Ä–∏—á–∏–Ω–∞:</b> {ban_reason}\n"
            f"‚è∞ <b>—Å—Ä–æ–∫:</b> {ban_duration}\n\n"
            f"üí¨ –æ–±–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞–∫–∞–∑–∞–Ω–∏–µ –º–æ–∂–Ω–æ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ\n"
            f"üîó <b>–ø–æ–¥–¥–µ—Ä–∂–∫–∞:</b> @daisicxTp_bot",
            parse_mode='HTML',
            reply_markup=markup
        )
        return
    
    await show_menu(message, user_id)

@dp.message(F.text.lower() == '—è')
async def on_ya_button(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    
    user_id_str = str(user_id)
    
    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    if user_id_str not in users:
        await show_not_registered_message(message)
        return
    
    if 'nick' not in users[user_id_str]:
        await show_not_registered_message(message)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user_data = users[user_id_str]
    
    if user_data.get('banned', False):
        ban_reason = user_data.get('ban_reason', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        ban_duration = user_data.get('ban_duration', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='üí¨ –æ–±–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞–∫–∞–∑–∞–Ω–∏–µ', url='https://t.me/daisicxTp_bot')]
        ])
        
        await message.answer(
            f"üö´ <b>—Ç–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
            f"‚ùå <b>–ø—Ä–∏—á–∏–Ω–∞:</b> {ban_reason}\n"
            f"‚è∞ <b>—Å—Ä–æ–∫:</b> {ban_duration}\n\n"
            f"üí¨ –æ–±–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞–∫–∞–∑–∞–Ω–∏–µ –º–æ–∂–Ω–æ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ\n"
            f"üîó <b>–ø–æ–¥–¥–µ—Ä–∂–∫–∞:</b> @daisicxTp_bot",
            parse_mode='HTML',
            reply_markup=markup
        )
        return
    
    await show_menu(message, user_id)

@dp.message(F.text.lower() == 'mn')
async def on_mn_button(message: types.Message):
    user_id = message.from_user.id
    
    user_id_str = str(user_id)
    
    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    if user_id_str not in users:
        await show_not_registered_message(message)
        return
    
    if 'nick' not in users[user_id_str]:
        await show_not_registered_message(message)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user_data = users[user_id_str]
    
    if user_data.get('banned', False):
        ban_reason = user_data.get('ban_reason', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        ban_duration = user_data.get('ban_duration', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='üí¨ –æ–±–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞–∫–∞–∑–∞–Ω–∏–µ', url='https://t.me/daisicxTp_bot')]
        ])
        
        await message.answer(
            f"üö´ <b>—Ç–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
            f"‚ùå <b>–ø—Ä–∏—á–∏–Ω–∞:</b> {ban_reason}\n"
            f"‚è∞ <b>—Å—Ä–æ–∫:</b> {ban_duration}\n\n"
            f"üí¨ –æ–±–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞–∫–∞–∑–∞–Ω–∏–µ –º–æ–∂–Ω–æ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ\n"
            f"üîó <b>–ø–æ–¥–¥–µ—Ä–∂–∫–∞:</b> @daisicxTp_bot",
            parse_mode='HTML',
            reply_markup=markup
        )
        return
    
    await show_menu(message, user_id)

@dp.message(F.text.lower() == 'm')
async def on_m_button(message: types.Message):
    user_id = message.from_user.id
    
    user_id_str = str(user_id)
    
    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    if user_id_str not in users:
        await show_not_registered_message(message)
        return
    
    if 'nick' not in users[user_id_str]:
        await show_not_registered_message(message)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user_data = users[user_id_str]
    
    if user_data.get('banned', False):
        ban_reason = user_data.get('ban_reason', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        ban_duration = user_data.get('ban_duration', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='üí¨ –æ–±–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞–∫–∞–∑–∞–Ω–∏–µ', url='https://t.me/daisicxTp_bot')]
        ])
        
        await message.answer(
            f"üö´ <b>—Ç–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
            f"‚ùå <b>–ø—Ä–∏—á–∏–Ω–∞:</b> {ban_reason}\n"
            f"‚è∞ <b>—Å—Ä–æ–∫:</b> {ban_duration}\n\n"
            f"üí¨ –æ–±–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞–∫–∞–∑–∞–Ω–∏–µ –º–æ–∂–Ω–æ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ\n"
            f"üîó <b>–ø–æ–¥–¥–µ—Ä–∂–∫–∞:</b> @daisicxTp_bot",
            parse_mode='HTML',
            reply_markup=markup
        )
        return
    
    await show_menu(message, user_id)

@dp.message(Command('menu'))
async def cmd_menu_en(message: types.Message):
    user_id = message.from_user.id
    
    user_id_str = str(user_id)
    
    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    if user_id_str not in users:
        await show_not_registered_message(message)
        return
    
    if 'nick' not in users[user_id_str]:
        await show_not_registered_message(message)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user_data = users[user_id_str]
    
    if user_data.get('banned', False):
        ban_reason = user_data.get('ban_reason', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        ban_duration = user_data.get('ban_duration', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='üí¨ –æ–±–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞–∫–∞–∑–∞–Ω–∏–µ', url='https://t.me/daisicxTp_bot')]
        ])
        
        await message.answer(
            f"üö´ <b>—Ç–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
            f"‚ùå <b>–ø—Ä–∏—á–∏–Ω–∞:</b> {ban_reason}\n"
            f"‚è∞ <b>—Å—Ä–æ–∫:</b> {ban_duration}\n\n"
            f"üí¨ –æ–±–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞–∫–∞–∑–∞–Ω–∏–µ –º–æ–∂–Ω–æ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ\n"
            f"üîó <b>–ø–æ–¥–¥–µ—Ä–∂–∫–∞:</b> @daisicxTp_bot",
            parse_mode='HTML',
            reply_markup=markup
        )
        return
    
    await show_menu(message, user_id)

# –ö–æ–º–∞–Ω–¥—ã –±–µ–∑ —Å–ª–µ—à–∞
@dp.message(F.text.lower() == '–º–µ–Ω—é')
async def text_menu(message: types.Message):
    user_id = message.from_user.id
    
    user_id_str = str(user_id)
    
    if user_id_str not in users:
        await show_not_registered_message(message)
        return
    
    if 'nick' not in users[user_id_str]:
        await show_not_registered_message(message)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user_data = users[user_id_str]
    
    if user_data.get('banned', False):
        ban_reason = user_data.get('ban_reason', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        ban_duration = user_data.get('ban_duration', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='üí¨ –æ–±–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞–∫–∞–∑–∞–Ω–∏–µ', url='https://t.me/daisicxTp_bot')]
        ])
        
        await message.answer(
            f"üö´ <b>—Ç–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
            f"‚ùå <b>–ø—Ä–∏—á–∏–Ω–∞:</b> {ban_reason}\n"
            f"‚è∞ <b>—Å—Ä–æ–∫:</b> {ban_duration}\n\n"
            f"üí¨ –æ–±–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞–∫–∞–∑–∞–Ω–∏–µ –º–æ–∂–Ω–æ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ\n"
            f"üîó <b>–ø–æ–¥–¥–µ—Ä–∂–∫–∞:</b> @daisicxTp_bot",
            parse_mode='HTML',
            reply_markup=markup
        )
        return
    
    await show_menu(message, user_id)

@dp.message(F.text.lower() == '—è')
async def text_ya(message: types.Message):
    user_id = message.from_user.id
    
    user_id_str = str(user_id)
    
    if user_id_str not in users:
        await show_not_registered_message(message)
        return
    
    if 'nick' not in users[user_id_str]:
        await show_not_registered_message(message)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user_data = users[user_id_str]
    
    if user_data.get('banned', False):
        ban_reason = user_data.get('ban_reason', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        ban_duration = user_data.get('ban_duration', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='üí¨ –æ–±–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞–∫–∞–∑–∞–Ω–∏–µ', url='https://t.me/daisicxTp_bot')]
        ])
        
        await message.answer(
            f"üö´ <b>—Ç–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
            f"‚ùå <b>–ø—Ä–∏—á–∏–Ω–∞:</b> {ban_reason}\n"
            f"‚è∞ <b>—Å—Ä–æ–∫:</b> {ban_duration}\n\n"
            f"üí¨ –æ–±–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞–∫–∞–∑–∞–Ω–∏–µ –º–æ–∂–Ω–æ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ\n"
            f"üîó <b>–ø–æ–¥–¥–µ—Ä–∂–∫–∞:</b> @daisicxTp_bot",
            parse_mode='HTML',
            reply_markup=markup
        )
        return
    
    await show_menu(message, user_id)

@dp.message(F.text.lower() == 'mn')
async def text_mn(message: types.Message):
    user_id = message.from_user.id
    
    user_id_str = str(user_id)
    
    if user_id_str not in users:
        await show_not_registered_message(message)
        return
    
    if 'nick' not in users[user_id_str]:
        await show_not_registered_message(message)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user_data = users[user_id_str]
    
    if user_data.get('banned', False):
        ban_reason = user_data.get('ban_reason', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        ban_duration = user_data.get('ban_duration', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='üí¨ –æ–±–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞–∫–∞–∑–∞–Ω–∏–µ', url='https://t.me/daisicxTp_bot')]
        ])
        
        await message.answer(
            f"üö´ <b>—Ç–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
            f"‚ùå <b>–ø—Ä–∏—á–∏–Ω–∞:</b> {ban_reason}\n"
            f"‚è∞ <b>—Å—Ä–æ–∫:</b> {ban_duration}\n\n"
            f"üí¨ –æ–±–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞–∫–∞–∑–∞–Ω–∏–µ –º–æ–∂–Ω–æ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ\n"
            f"üîó <b>–ø–æ–¥–¥–µ—Ä–∂–∫–∞:</b> @daisicxTp_bot",
            parse_mode='HTML',
            reply_markup=markup
        )
        return
    
    await show_menu(message, user_id)

@dp.message(F.text.lower() == 'm')
async def text_m(message: types.Message):
    user_id = message.from_user.id
    
    user_id_str = str(user_id)
    
    if user_id_str not in users:
        await show_not_registered_message(message)
        return
    
    if 'nick' not in users[user_id_str]:
        await show_not_registered_message(message)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user_data = users[user_id_str]
    
    if user_data.get('banned', False):
        ban_reason = user_data.get('ban_reason', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        ban_duration = user_data.get('ban_duration', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='üí¨ –æ–±–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞–∫–∞–∑–∞–Ω–∏–µ', url='https://t.me/daisicxTp_bot')]
        ])
        
        await message.answer(
            f"üö´ <b>—Ç–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
            f"‚ùå <b>–ø—Ä–∏—á–∏–Ω–∞:</b> {ban_reason}\n"
            f"‚è∞ <b>—Å—Ä–æ–∫:</b> {ban_duration}\n\n"
            f"üí¨ –æ–±–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞–∫–∞–∑–∞–Ω–∏–µ –º–æ–∂–Ω–æ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ\n"
            f"üîó <b>–ø–æ–¥–¥–µ—Ä–∂–∫–∞:</b> @daisicxTp_bot",
            parse_mode='HTML',
            reply_markup=markup
        )
        return
    
    await show_menu(message, user_id)

@dp.message(F.text.lower() == 'menu')
async def text_menu_en(message: types.Message):
    user_id = message.from_user.id
    
    user_id_str = str(user_id)
    
    if user_id_str not in users:
        await show_not_registered_message(message)
        return
    
    if 'nick' not in users[user_id_str]:
        await show_not_registered_message(message)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user_data = users[user_id_str]
    
    if user_data.get('banned', False):
        ban_reason = user_data.get('ban_reason', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        ban_duration = user_data.get('ban_duration', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='üí¨ –æ–±–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞–∫–∞–∑–∞–Ω–∏–µ', url='https://t.me/daisicxTp_bot')]
        ])
        
        await message.answer(
            f"üö´ <b>—Ç–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
            f"‚ùå <b>–ø—Ä–∏—á–∏–Ω–∞:</b> {ban_reason}\n"
            f"‚è∞ <b>—Å—Ä–æ–∫:</b> {ban_duration}\n\n"
            f"üí¨ –æ–±–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞–∫–∞–∑–∞–Ω–∏–µ –º–æ–∂–Ω–æ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ\n"
            f"üîó <b>–ø–æ–¥–¥–µ—Ä–∂–∫–∞:</b> @daisicxTp_bot",
            parse_mode='HTML',
            reply_markup=markup
        )
        return
    
    await show_menu(message, user_id)





# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ–±—ã—á–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
@dp.message(F.text.lower() == 'üíº —Ä–∞–±–æ—Ç–∞')
async def on_work_button(message: types.Message):
    user_id = message.from_user.id
    
    user_id_str = str(user_id)
    
    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    if user_id_str not in users:
        await show_not_registered_message(message)
        return
    
    await show_work_menu(message, user_id)
@dp.message(F.text.lower() == 'üì¶ —Ä–∞–±–æ—Ç–∞ –≥—Ä—É–∑—á–∏–∫–∞')
async def on_loader_work_button(message: types.Message, state: FSMContext):
    """–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–∞–±–æ—Ç—ã –≥—Ä—É–∑—á–∏–∫–∞"""
    user_id = message.from_user.id
    user_id_str = str(user_id)
    
    # —Å–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    if user_id_str not in users:
        await show_not_registered_message(message)
        return
    
    if 'nick' not in users[user_id_str]:
        await show_not_registered_message(message)
        return
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user_data = users[user_id_str]
    if user_data.get('banned', False):
        await message.answer('üö´ —Ç—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏ –Ω–µ –º–æ–∂–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å')
        return
    
    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–±–æ—Ç–µ –≥—Ä—É–∑—á–∏–∫–∞
    info_text = "üì¶ <b>—Ä–∞–±–æ—Ç–∞ –≥—Ä—É–∑—á–∏–∫–∞</b>\n\n"
    info_text += "üíº <b>–æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã:</b>\n"
    info_text += "‚Ä¢ —Ç–∞—Å–∫–∞–µ—à—å —Ä–∞–∑–Ω—ã–µ –≥—Ä—É–∑—ã –Ω–∞ —Å–∫–ª–∞–¥–µ\n"
    info_text += "‚Ä¢ –≤—Ä–µ–º—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–µ—Å–∞ (5-60 —Å–µ–∫)\n"
    info_text += "‚Ä¢ —á–µ–º —Ç—è–∂–µ–ª–µ–µ –≥—Ä—É–∑, —Ç–µ–º –±–æ–ª—å—à–µ –æ–ø–ª–∞—Ç–∞\n"
    info_text += "‚Ä¢ –º–æ–∂–Ω–æ —É–π—Ç–∏ —Å —Ä–∞–±–æ—Ç—ã –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç\n\n"
    
    info_text += "üí∞ <b>—Ç–∏–ø—ã –≥—Ä—É–∑–æ–≤:</b>\n"
    info_text += "‚Ä¢ –æ–±—ã—á–Ω—ã–µ –≥—Ä—É–∑—ã (80%): –∫–æ—Ä–æ–±–∫–∏, –º–µ—à–∫–∏, —è—â–∏–∫–∏\n"
    info_text += "‚Ä¢ —Ä–µ–¥–∫–∏–µ –≥—Ä—É–∑—ã (15%): —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞, –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ\n"
    info_text += "‚Ä¢ —Å—É–ø–µ—Ä —Ä–µ–¥–∫–∏–µ (5%): –∞–ª–º–∞–∑—ã, —é–≤–µ–ª–∏—Ä–∫–∞, –∑–æ–ª–æ—Ç–æ\n\n"
    
    info_text += "üíµ <b>—Å—Ä–µ–¥–Ω—è—è –æ–ø–ª–∞—Ç–∞:</b> ~250–∫–∫ –∑–∞ –≥—Ä—É–∑\n"
    info_text += "‚è±Ô∏è <b>–≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> –ø–æ –∂–µ–ª–∞–Ω–∏—é\n\n"
    
    info_text += "üéØ <b>–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>\n"
    info_text += "1. –Ω–∞–∂–∏–º–∞–µ—à—å '–Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É'\n"
    info_text += "2. –±–æ—Ç –¥–∞–µ—Ç –≥—Ä—É–∑ –∏ —Ç–∞–π–º–µ—Ä\n"
    info_text += "3. –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–ª—É—á–∞–µ—à—å –æ–ø–ª–∞—Ç—É\n"
    info_text += "4. –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π –≥—Ä—É–∑\n"
    info_text += "5. –º–æ–∂–µ—à—å —É–π—Ç–∏ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç"
    
    # —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    markup = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [KeyboardButton(text='üöÄ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –≥—Ä—É–∑—á–∏–∫–æ–º')],
        [KeyboardButton(text='–Ω–∞–∑–∞–¥ ‚¨ÖÔ∏è')]
    ])
    
    await message.answer(info_text, parse_mode='HTML', reply_markup=markup)

@dp.message(F.text.lower() == 'üöÄ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –≥—Ä—É–∑—á–∏–∫–æ–º')
async def on_start_loader_work_button(message: types.Message, state: FSMContext):
    """–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≥—Ä—É–∑—á–∏–∫–∞"""
    user_id = message.from_user.id
    user_id_str = str(user_id)
    
    # —Å–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    if user_id_str not in users:
        await show_not_registered_message(message)
        return
    
    if 'nick' not in users[user_id_str]:
        await show_not_registered_message(message)
        return
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user_data = users[user_id_str]
    if user_data.get('banned', False):
        await message.answer('üö´ —Ç—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏ –Ω–µ –º–æ–∂–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å')
        return
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ —É–∂–µ –≥—Ä—É–∑—á–∏–∫–æ–º
    if user_id_str in loader_jobs:
        await message.answer('‚ö†Ô∏è —Ç—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—à—å –≥—Ä—É–∑—á–∏–∫–æ–º! —Å–Ω–∞—á–∞–ª–∞ –∑–∞–∫–æ–Ω—á–∏ —Ç–µ–∫—É—â—É—é —Å–º–µ–Ω—É')
        return
    
    # –Ω–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É –≥—Ä—É–∑—á–∏–∫–∞
    await start_loader_work(message, user_id_str, state)

@dp.message(F.text.lower() == 'üé´ –ø—Ä–æ–º–æ–∫–æ–¥—ã')
async def on_promo_button(message: types.Message, state: FSMContext):
    """–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤"""
    user_id = message.from_user.id
    user_id_str = str(user_id)
    
    # —Å–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    

    
    if user_id_str not in users:
        await show_not_registered_message(message)
        return
    
    if 'nick' not in users[user_id_str]:
        await show_not_registered_message(message)
        return
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user_data = users[user_id_str]
    if user_data.get('banned', False):
        await message.answer('üö´ —Ç—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏ –Ω–µ –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã')
        return
    
    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
    promo_text = "üé´ <b>–ø—Ä–æ–º–æ–∫–æ–¥—ã</b>\n\n"
    promo_text += "üí° <b>–∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n"
    promo_text += "‚Ä¢ –≤–≤–µ–¥–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –≤ –ø–æ–ª–µ –Ω–∏–∂–µ\n"
    promo_text += "‚Ä¢ –ø–æ–ª—É—á–∏—à—å –Ω–∞–≥—Ä–∞–¥—É –Ω–∞ –±–∞–ª–∞–Ω—Å\n"
    promo_text += "‚Ä¢ –∫–∞–∂–¥—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑\n\n"
    
    promo_text += "üí∞ <b>–Ω–∞–≥—Ä–∞–¥—ã:</b>\n"
    promo_text += "‚Ä¢ –≤–∞–ª—é—Ç–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å\n"
    promo_text += "‚Ä¢ —Ä–∞–∑–º–µ—Ä –Ω–∞–≥—Ä–∞–¥—ã –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥–∞\n\n"
    
    promo_text += "‚ö†Ô∏è <b>–≤–Ω–∏–º–∞–Ω–∏–µ:</b>\n"
    promo_text += "‚Ä¢ –ø—Ä–æ–º–æ–∫–æ–¥—ã –º–æ–≥—É—Ç –∏–º–µ—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏\n"
    promo_text += "‚Ä¢ –ø—Ä–æ–º–æ–∫–æ–¥—ã –º–æ–≥—É—Ç –∏–º–µ—Ç—å –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–π\n"
    promo_text += "‚Ä¢ –∏—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ–º–æ–∫–æ–¥—ã –≤–æ–≤—Ä–µ–º—è!"
    
    # —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [KeyboardButton(text='üîë –≤–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥')],
        [KeyboardButton(text='–Ω–∞–∑–∞–¥ ‚¨ÖÔ∏è')]
    ])
    
    await message.answer(promo_text, parse_mode='HTML', reply_markup=markup)

@dp.message(F.text.lower() == 'üîë –≤–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥')
async def on_enter_promo_button(message: types.Message, state: FSMContext):
    """–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    user_id = message.from_user.id
    user_id_str = str(user_id)
    
    # —Å–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    if user_id_str not in users:
        await show_not_registered_message(message)
        return
    
    if 'nick' not in users[user_id_str]:
        await show_not_registered_message(message)
        return
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user_data = users[user_id_str]
    if user_data.get('banned', False):
        await message.answer('üö´ —Ç—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏ –Ω–µ –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã')
        return
    
    # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
    await state.set_state(PromoState.waiting_for_promo_input)
    
    # —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    markup = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [KeyboardButton(text='–Ω–∞–∑–∞–¥ ‚¨ÖÔ∏è')]
    ])
    
    await message.answer(
        "üîë <b>–≤–≤–µ–¥–∏ –ø—Ä–æ–º–æ–∫–æ–¥:</b>\n\n"
        "üìù –Ω–∞–ø–∏—à–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –≤ —á–∞—Ç\n"
        "üí° –ø—Ä–æ–º–æ–∫–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –±—É–∫–≤ –∏ —Ü–∏—Ñ—Ä\n"
        "‚ùå –¥–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏ '–Ω–∞–∑–∞–¥'",
        parse_mode='HTML',
        reply_markup=markup
    )

@dp.message(PromoState.waiting_for_promo_input)
async def handle_promo_input(message: types.Message, state: FSMContext):
    """–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    user_id = message.from_user.id
    user_id_str = str(user_id)
    
    # —Å–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    if user_id_str not in users:
        await show_not_registered_message(message)
        return
    
    if 'nick' not in users[user_id_str]:
        await show_not_registered_message(message)
        return
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user_data = users[user_id_str]
    if user_data.get('banned', False):
        await message.answer('üö´ —Ç—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏ –Ω–µ –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã')
        await state.clear()
        await show_menu(message, user_id)
        return
    
    promo_code = message.text.strip().upper()
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞
    if promo_code.startswith('/'):
        await message.answer('‚ùå —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞, –∞ –Ω–µ –ø—Ä–æ–º–æ–∫–æ–¥!')
        return
    
    # –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
    success, message_text, reward = activate_promo(promo_code, user_id_str)
    
    if success:
        # –Ω–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É
        users[user_id_str]['balance'] += reward
        save_users()
        
        # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        success_text = f"‚úÖ <b>–ø—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
        success_text += f"üé´ <b>–ø—Ä–æ–º–æ–∫–æ–¥:</b> {promo_code}\n"
        success_text += f"üí∞ <b>–Ω–∞–≥—Ä–∞–¥–∞:</b> ${format_money(reward)}\n"
        success_text += f"üí≥ <b>–Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:</b> ${format_money(users[user_id_str]['balance'])}\n\n"
        success_text += "üéâ <b>–ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –Ω–∞–≥—Ä–∞–¥—ã!</b>"
        
        await message.answer(success_text, parse_mode='HTML')
    else:
        # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        error_text = f"‚ùå <b>–æ—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞</b>\n\n"
        error_text += f"üé´ <b>–ø—Ä–æ–º–æ–∫–æ–¥:</b> {promo_code}\n"
        error_text += f"‚ö†Ô∏è <b>–ø—Ä–∏—á–∏–Ω–∞:</b> {message_text}\n\n"
        error_text += "üí° <b>–≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</b>\n"
        error_text += "‚Ä¢ –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n"
        error_text += "‚Ä¢ –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω\n"
        error_text += "‚Ä¢ –∏—Å—Ç–µ–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è\n"
        error_text += "‚Ä¢ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–π"
        
        await message.answer(error_text, parse_mode='HTML')
    
    # –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await state.clear()
    await show_menu(message, user_id)

@dp.message(F.text.lower() == '‚ùå —É–π—Ç–∏ —Å —Ä–∞–±–æ—Ç—ã')
async def on_quit_loader_work_button(message: types.Message, state: FSMContext):
    """–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É—Ö–æ–¥–∞ —Å —Ä–∞–±–æ—Ç—ã –≥—Ä—É–∑—á–∏–∫–∞"""
    user_id = message.from_user.id
    user_id_str = str(user_id)
    
    if user_id_str not in loader_jobs:
        await message.answer('—Ç—ã –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—à—å –≥—Ä—É–∑—á–∏–∫–æ–º')
        return
    
    # –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞–±–æ—Ç–µ
    job = loader_jobs[user_id_str]
    user_data = users[user_id_str]
    nick = user_data.get('nick', '–∏–≥—Ä–æ–∫')
    
    # —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
    work_time = datetime.datetime.now().timestamp() - job['start_time']
    hours = int(work_time // 3600)
    minutes = int((work_time % 3600) // 60)
    seconds = int(work_time % 60)
    
    # —Å–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirm_text = f"ü§î <b>{nick}, —Ç—ã —Ç–æ—á–Ω–æ —Ö–æ—á–µ—à—å —É–π—Ç–∏ —Å —Ä–∞–±–æ—Ç—ã?</b>\n\n"
    confirm_text += f"‚è±Ô∏è <b>–≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> {hours:02d}:{minutes:02d}:{seconds:02d}\n"
    confirm_text += f"üì¶ <b>–≥—Ä—É–∑–æ–≤ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ:</b> {job['cargo_count']}\n"
    confirm_text += f"üí∞ <b>—Ç—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª:</b> ${format_money(job['total_earnings'])}\n\n"
    confirm_text += "‚ùì –ø–æ–¥—Ç–≤–µ—Ä–¥–∏ —É—Ö–æ–¥ —Å —Ä–∞–±–æ—Ç—ã"
    
    # —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    markup = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [KeyboardButton(text='‚úÖ –¥–∞, —É–π—Ç–∏ —Å —Ä–∞–±–æ—Ç—ã')],
        [KeyboardButton(text='‚ùå –Ω–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É')]
    ])
    
    await message.answer(confirm_text, parse_mode='HTML', reply_markup=markup)

@dp.message(F.text.lower() == '‚úÖ –¥–∞, —É–π—Ç–∏ —Å —Ä–∞–±–æ—Ç—ã')
async def on_confirm_quit_loader_work(message: types.Message, state: FSMContext):
    """–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É—Ö–æ–¥–∞ —Å —Ä–∞–±–æ—Ç—ã –≥—Ä—É–∑—á–∏–∫–∞"""
    user_id = message.from_user.id
    user_id_str = str(user_id)
    
    if user_id_str not in loader_jobs:
        await message.answer('—Ç—ã –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—à—å –≥—Ä—É–∑—á–∏–∫–æ–º')
        return
    
    # –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É
    await finish_loader_work(message.chat.id, user_id_str)
    
    # –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await show_menu(message, user_id)

@dp.message(F.text.lower() == '‚ùå –Ω–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É')
async def on_cancel_quit_loader_work(message: types.Message):
    """–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —É—Ö–æ–¥–∞ —Å —Ä–∞–±–æ—Ç—ã –≥—Ä—É–∑—á–∏–∫–∞"""
    user_id = message.from_user.id
    user_id_str = str(user_id)
    
    if user_id_str not in loader_jobs:
        await message.answer('—Ç—ã –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—à—å –≥—Ä—É–∑—á–∏–∫–æ–º')
        return
    
    # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ä–∞–±–æ—Ç–µ
    await message.answer('‚úÖ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É!', reply_markup=ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [KeyboardButton(text='üèÅ –∑–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–±–æ—Ç—É')]
    ]))

@dp.message(F.text.lower() == 'üèÅ –∑–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–±–æ—Ç—É')
async def on_finish_loader_work_button(message: types.Message, state: FSMContext):
    """–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –≥—Ä—É–∑—á–∏–∫–∞"""
    user_id = message.from_user.id
    user_id_str = str(user_id)
    
    if user_id_str not in loader_jobs:
        await message.answer('—Ç—ã –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—à—å –≥—Ä—É–∑—á–∏–∫–æ–º')
        return
    
    # –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É
    await finish_loader_work(message.chat.id, user_id_str)
    
    # –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await show_menu(message, user_id)


@dp.message(F.text.lower() == 'üí∞ –±–æ–Ω—É—Å')
async def on_bonus_button(message: types.Message):
    user_id = message.from_user.id
    
    user_id_str = str(user_id)    # —Å–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    if user_id_str not in users:
        await show_not_registered_message(message)
        return
    
    if 'nick' not in users[user_id_str]:
        await show_not_registered_message(message)
        return
    
    await show_bonus_menu(message, user_id)

@dp.message(F.text.lower() == 'üéÆ –∏–≥—Ä—ã')
async def on_games_button(message: types.Message):
    user_id = message.from_user.id
    
    user_id_str = str(user_id)    # —Å–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    if user_id_str not in users:
        await show_not_registered_message(message)
        return
    
    if 'nick' not in users[user_id_str]:
        await show_not_registered_message(message)
        return
    
    await show_games_menu(message, user_id)

@dp.message(F.text.lower() == 'üè¶ –±–∞–Ω–∫')
async def on_bank_button(message: types.Message):
    user_id = message.from_user.id
    
    user_id_str = str(user_id)    # —Å–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    if user_id_str not in users:
        await show_not_registered_message(message)
        return
    
    if 'nick' not in users[user_id_str]:
        await show_not_registered_message(message)
        return
    
    await show_bank_menu(message, user_id)

@dp.message(F.text.lower() == '—Ä–µ—Ñ–µ—Ä–∞–ª—ã üë•')
async def on_referrals_button(message: types.Message):
    user_id = message.from_user.id
    
    user_id_str = str(user_id)
    
    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    if user_id_str not in users:
        await show_not_registered_message(message)
        return
    
    if 'nick' not in users[user_id_str]:
        await show_not_registered_message(message)
        return
    
    await show_referrals_menu(message, user_id)

@dp.message(F.text.lower() == '—Ä—É–ª–µ—Ç–∫–∞ üé∞')
async def on_roulette_button(message: types.Message):
    user_id = message.from_user.id
    
    user_id_str = str(user_id)    # —Å–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    if user_id_str not in users:
        await show_not_registered_message(message)
        return
    
    if 'nick' not in users[user_id_str]:
        await show_not_registered_message(message)
        return
    
    await message.answer(
        'üé∞ <b>—Ä—É–ª–µ—Ç–∫–∞</b>\n\n'
        '–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∏–≥—Ä–∞ –≤ —Ä—É–ª–µ—Ç–∫—É —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤—ã–∏–≥—Ä–∞—Ç—å –±–æ–ª—å—à–∏–µ –¥–µ–Ω—å–≥–∏!\n\n'
        'üéØ <b>–∫–∞–∫ –∏–≥—Ä–∞—Ç—å:</b>\n'
        '‚Ä¢ –¥–µ–ª–∞–π —Å—Ç–∞–≤–∫–∏ –Ω–∞ —á–∏—Å–ª–∞ –æ—Ç 0 –¥–æ 36\n'
        '‚Ä¢ –∏–ª–∏ —Å—Ç–∞–≤—å –Ω–∞ —Ü–≤–µ—Ç–∞ (–∫—Ä–∞—Å–Ω—ã–π/—á–µ—Ä–Ω—ã–π)\n'
        '‚Ä¢ –≤—ã–∏–≥—Ä—ã—à –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–∏–ø–∞ —Å—Ç–∞–≤–∫–∏\n\n'
        'üí∞ <b>–≤—ã–∏–≥—Ä—ã—à–∏:</b>\n'
        '‚Ä¢ –Ω–∞ —á–∏—Å–ª–æ (35:1): <b>35x</b> –æ—Ç —Å—Ç–∞–≤–∫–∏\n'
        '‚Ä¢ –Ω–∞ —Ü–≤–µ—Ç (1:1): <b>2x</b> –æ—Ç —Å—Ç–∞–≤–∫–∏\n'
        '‚Ä¢ –Ω–∞ —á–µ—Ç–Ω–æ–µ/–Ω–µ—á–µ—Ç–Ω–æ–µ (1:1): <b>2x</b> –æ—Ç —Å—Ç–∞–≤–∫–∏\n\n'
        '‚öñÔ∏è <b>—Å–∏—Å—Ç–µ–º–∞ —à–∞–Ω—Å–æ–≤:</b>\n'
        '‚Ä¢ x2 —Å—Ç–∞–≤–∫–∏ (—Ü–≤–µ—Ç–∞, —á–µ—Ç/–Ω–µ—á–µ—Ç): –¥–æ 60%\n'
        '‚Ä¢ x3 —Å—Ç–∞–≤–∫–∏ (—Ä—è–¥—ã, –¥—é–∂–∏–Ω—ã): –¥–æ 40%\n'
        '‚Ä¢ x36 —Å—Ç–∞–≤–∫–∏ (—á–∏—Å–ª–∞, –∑–µ—Ä–æ): –¥–æ 3%\n'
        '‚Ä¢ —Ç–æ–ø-3 –∏–≥—Ä–æ–∫–∏ –ø–æ–ª—É—á–∞—é—Ç –∞–Ω—Ç–∏-–±–æ–Ω—É—Å—ã\n'
        '‚Ä¢ –±–æ–≥–∞—Ç—ã–µ –∏–≥—Ä–æ–∫–∏ –∏–º–µ—é—Ç –ø–æ–Ω–∏–∂–µ–Ω–Ω—ã–µ —à–∞–Ω—Å—ã\n'
        '‚Ä¢ —á–µ–º –≤—ã—à–µ —à–∞–Ω—Å, —Ç–µ–º –±–æ–ª—å—à–µ —Ä–∏—Å–∫ –ø—Ä–æ–∏–≥—Ä—ã—à–∞\n\n'
        '‚ö†Ô∏è <b>–≤–∞–∂–Ω–æ:</b> –∏–≥—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–∞—Ö!\n\n'
        'üìù <b>–∫–æ–º–∞–Ω–¥—ã:</b>\n'
        '‚Ä¢ <code>/rul</code> - –æ—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞\n'
        '‚Ä¢ <code>—Ä—É–ª —á–µ—Ç–Ω–æ–µ 1.5–∫</code> - –Ω–∞ —á–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ\n'
        '‚Ä¢ <code>—Ä—É–ª –∫—Ä–∞ 1.5–∫</code> - –Ω–∞ –∫—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç\n'
        '‚Ä¢ <code>—Ä—É–ª —á–µ—Ä 1.5–∫</code> - –Ω–∞ —á–µ—Ä–Ω—ã–π —Ü–≤–µ—Ç\n'
        '‚Ä¢ <code>—Ä—É–ª 7 1.5–∫</code> - –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ',
        parse_mode='HTML'
    
    )

@dp.message(F.text.lower() == '–∫–æ—Å—Ç–∏ üé≤')
async def on_dice_button(message: types.Message):
    user_id = message.from_user.id
    
    user_id_str = str(user_id)    # —Å–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    if user_id_str not in users:
        await show_not_registered_message(message)
        return
    
    if 'nick' not in users[user_id_str]:
        await show_not_registered_message(message)
        return
    
    await message.answer(
        'üé≤ <b>–∫–æ—Å—Ç–∏</b>\n\n'
        '—É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–∞—è –∏–≥—Ä–∞ –≤ –∫–æ—Å—Ç–∏ –º–µ–∂–¥—É –¥–≤—É–º—è –∏–≥—Ä–æ–∫–∞–º–∏!\n\n'
        'üéØ <b>–∫–∞–∫ –∏–≥—Ä–∞—Ç—å:</b>\n'
        '‚Ä¢ —Å–æ–∑–¥–∞–π –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π "–∫–æ—Å—Ç–∏ —Å—É–º–º–∞"\n'
        '‚Ä¢ –≤—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤—ã–∑–æ–≤\n'
        '‚Ä¢ –æ–±–∞ –±—Ä–æ—Å–∞—é—Ç –∫–æ—Å—Ç–∏ –ø–æ –æ—á–µ—Ä–µ–¥–∏\n'
        '‚Ä¢ —É –∫–æ–≥–æ –±–æ–ª—å—à–µ –æ—á–∫–æ–≤ - —Ç–æ—Ç –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç —Å—Ç–∞–≤–∫—É\n\n'
        'üí∞ <b>–≤—ã–∏–≥—Ä—ã—à–∏:</b>\n'
        '‚Ä¢ –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –∑–∞–±–∏—Ä–∞–µ—Ç —Å—Ç–∞–≤–∫—É –æ–±–æ–∏—Ö –∏–≥—Ä–æ–∫–æ–≤\n'
        '‚Ä¢ –ø—Ä–∏ –Ω–∏—á—å–µ –∫–∞–∂–¥—ã–π –ø–æ–ª—É—á–∞–µ—Ç —Å–≤–æ—é —Å—Ç–∞–≤–∫—É –æ–±—Ä–∞—Ç–Ω–æ\n'
        '‚Ä¢ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π —Ç–µ—Ä—è–µ—Ç —Å–≤–æ—é —Å—Ç–∞–≤–∫—É\n\n'
        '‚ö†Ô∏è <b>–≤–∞–∂–Ω–æ:</b> –∏–≥—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–∞—Ö!\n\n'
        'üìù <b>–∫–æ–º–∞–Ω–¥—ã:</b>\n'
        '‚Ä¢ <code>–∫–æ—Å—Ç–∏ 1.5–∫</code> - —Å–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É —Å–æ —Å—Ç–∞–≤–∫–æ–π 1.5–∫\n'
        '‚Ä¢ <code>–∫–æ—Å—Ç–∏ –≤—Å–µ</code> - —Å—Ç–∞–≤–∫–∞ –≤—Å–µ–º –±–∞–ª–∞–Ω—Å–æ–º\n'
        '‚Ä¢ <code>–∫–æ—Å—Ç–∏ 500–∫</code> - —Å—Ç–∞–≤–∫–∞ 500–∫',
        parse_mode='HTML'
    
    )

@dp.message(F.text.lower() == '–±–∞—Å–∫–µ—Ç–±–æ–ª üèÄ')
async def on_basketball_button(message: types.Message):
    user_id = message.from_user.id
    
    user_id_str = str(user_id)    # —Å–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    if user_id_str not in users:
        await show_not_registered_message(message)
        return
    
    if 'nick' not in users[user_id_str]:
        await show_not_registered_message(message)
        return
    
    await message.answer(
        'üèÄ <b>–±–∞—Å–∫–µ—Ç–±–æ–ª</b>\n\n'
        '—Å–ø–æ—Ä—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞ –≤ –±–∞—Å–∫–µ—Ç–±–æ–ª –º–µ–∂–¥—É –¥–≤—É–º—è –∏–≥—Ä–æ–∫–∞–º–∏!\n\n'
        'üéØ <b>–∫–∞–∫ –∏–≥—Ä–∞—Ç—å:</b>\n'
        '‚Ä¢ —Å–æ–∑–¥–∞–π –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π "–±–∞—Å–∫–µ—Ç —Å—É–º–º–∞"\n'
        '‚Ä¢ –≤—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤—ã–∑–æ–≤\n'
        '‚Ä¢ –æ–±–∞ –±—Ä–æ—Å–∞—é—Ç –º—è—á –ø–æ –æ—á–µ—Ä–µ–¥–∏\n'
        '‚Ä¢ —É –∫–æ–≥–æ –±–æ–ª—å—à–µ –æ—á–∫–æ–≤ - —Ç–æ—Ç –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç\n\n'
        'üí∞ <b>–≤—ã–∏–≥—Ä—ã—à–∏:</b>\n'
        '‚Ä¢ –ø–æ–±–µ–¥–∞: <b>2x</b> –æ—Ç —Å—Ç–∞–≤–∫–∏\n'
        '‚Ä¢ –ø—Ä–∏ –Ω–∏—á—å–µ –∫–∞–∂–¥—ã–π –ø–æ–ª—É—á–∞–µ—Ç —Å–≤–æ—é —Å—Ç–∞–≤–∫—É –æ–±—Ä–∞—Ç–Ω–æ\n\n'
        '‚ö†Ô∏è <b>–≤–∞–∂–Ω–æ:</b> –∏–≥—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–∞—Ö!\n\n'
        'üìù <b>–∫–æ–º–∞–Ω–¥—ã:</b>\n'
        '‚Ä¢ <code>–±–∞—Å–∫–µ—Ç 1.5–∫</code> - —Å–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É —Å–æ —Å—Ç–∞–≤–∫–æ–π 1.5–∫\n'
        '‚Ä¢ <code>–±—Å–∫ 1.5–∫</code> - –∫–æ—Ä–æ—Ç–∫–∞—è –∫–æ–º–∞–Ω–¥–∞\n'
        '‚Ä¢ <code>–±–∞—Å–∫–µ—Ç –≤—Å–µ</code> - —Å—Ç–∞–≤–∫–∞ –≤—Å–µ–º –±–∞–ª–∞–Ω—Å–æ–º',
        parse_mode='HTML'
    
    )

@dp.message(F.text.lower() == '–Ω–∞–∑–∞–¥ ‚¨ÖÔ∏è')
async def on_back_button(message: types.Message):
    user_id = message.from_user.id
    
    user_id_str = str(user_id)    # —Å–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    if user_id_str not in users:
        await show_not_registered_message(message)
        return
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if message.chat.type == 'private':
        # –µ—Å–ª–∏ —ç—Ç–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await show_menu(message, user_id)
    else:
        # –µ—Å–ª–∏ —ç—Ç–æ —á–∞—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await show_menu(message, user_id)

@dp.message(F.text.lower() == '–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è ‚úÖ')
async def on_register_button(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    
    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, str(user_id))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (—Ç–æ–ª—å–∫–æ –ø–æ –Ω–∞–ª–∏—á–∏—é nick)
    user_id_str = str(user_id)
    if user_id_str in users and 'nick' in users[user_id_str]:
        await message.answer('—Ç—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!')
        return
    
    await message.answer('–Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –Ω–∏–∫', reply_markup=ReplyKeyboardRemove())
    
    await state.set_state(RegisterState.waiting_for_nick)

@dp.message(F.text.lower().contains('–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'))
async def register_start_fallback(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (—Ç–æ–ª—å–∫–æ –ø–æ –Ω–∞–ª–∏—á–∏—é nick)
    user_id_str = str(user_id)
    if user_id_str in users and 'nick' in users[user_id_str]:
        await message.answer('—Ç—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!')
        return
    
    await message.answer('–Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –Ω–∏–∫')
    await state.set_state(RegisterState.waiting_for_nick)
@dp.message(RegisterState.waiting_for_nick)
async def process_nick(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    
    user_id_str = str(user_id)  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
    nick = message.text.strip()
    
    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if user_id_str in users and 'nick' in users[user_id_str]:
        await message.answer('—Ç—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!')
        await state.clear()
        await show_menu(message, user_id)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –Ω–∏–∫–∞
    if len(nick) < 2 or len(nick) > 20:
        await message.answer('–Ω–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 2 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤')
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ –Ω–∏–∫
    for existing_user in users.values():
        if 'nick' in existing_user and existing_user['nick'].lower() == nick.lower():
            await message.answer('—ç—Ç–æ—Ç –Ω–∏–∫ —É–∂–µ –∑–∞–Ω—è—Ç, –≤—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–π')
            return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ—Ñ–µ—Ä–µ—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    temp_referrer = None
    
    if user_id_str in users and 'temp_referrer' in users[user_id_str]:
        temp_referrer = users[user_id_str]['temp_referrer']
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users[user_id_str] = {
        'nick': nick,
        'tg_username': message.from_user.username or '–±–µ–∑_—é–∑',
        'balance': 0,  # 0 –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
        'referrals': 0,
        'referral_earnings': 0,
        'warns': 0,
        'banned': False,
        'registration_date': str(datetime.datetime.now()),
        'last_activity': str(datetime.datetime.now()),
        'total_messages': 0,
        'phone_number': None,
        'email': None,
        'age': None,
        'city': None,
        'country': None,
        'language': message.from_user.language_code or 'ru',
        'device_info': None,
        'ip_address': None,
        'referral_source': 'direct' if not temp_referrer else 'referral',
        'account_type': 'regular',
        'verification_status': 'unverified',
        'security_level': 'basic',
        'premium_features': False,
        'last_login': str(datetime.datetime.now()),
        'login_count': 1,
        'session_duration': 0,
        'last_bonus_time': 0,
        'preferences': {
            'notifications': True,
            'privacy_mode': False,
            'auto_save': True
        },
        'bank_deposit': 0,
        'bank_deposit_time': 0
    }
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—à—ë–ª –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ
    if temp_referrer and str(temp_referrer) in users:
        referrer_id_str = str(temp_referrer)
        referrer_data = users[referrer_id_str]
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        referrer_data['referrals'] = referrer_data.get('referrals', 0) + 1
        
        # –í—ã–¥–∞—ë–º —Å–ª—É—á–∞–π–Ω—ã–π –±–æ–Ω—É—Å
        bonus = get_random_referral_bonus()
        users[user_id_str]['balance'] += bonus
        referrer_data['referral_earnings'] = referrer_data.get('referral_earnings', 0) + bonus
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        milestone_bonus = get_milestone_bonus(referrer_data['referrals'])
        if milestone_bonus > 0:
            referrer_data['balance'] += milestone_bonus
            referrer_data['referral_earnings'] += milestone_bonus
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        save_users()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
        try:
            await bot.send_message(
                temp_referrer,
                f"üéâ —Ç—ã –∑–∞—Å–∫–∞–º–∏–ª –º–∞–º–æ–Ω—Ç–∞!\n\n"
                f"üë§ <b>–Ω–æ–≤—ã–π –∏–≥—Ä–æ–∫:</b> <a href=\"tg://user?id={user_id}\"><b>{nick}</b></a>\n"
                f"üí∞ <b>—Ç–≤–æ–π –±–æ–Ω—É—Å:</b> <b>${format_money(bonus)}</b>\n"
                f"üìä <b>–≤—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b> <b>{referrer_data['referrals']}</b>\n"
                f"üíé <b>–æ–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫:</b> <b>${format_money(referrer_data['referral_earnings'])}</b>",
                parse_mode='HTML'
            )
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å milestone –±–æ–Ω—É—Å
            if milestone_bonus > 0:
                await bot.send_message(
                    temp_referrer,
                    f"üèÜ <b>–¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!</b>\n\n"
                    f"üéØ <b>{referrer_data['referrals']} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤</b>\n"
                    f"üí∞ <b>–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –±–æ–Ω—É—Å:</b> <b>${format_money(milestone_bonus)}</b>",
                    parse_mode='HTML'
                )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–µ—Ä—É {temp_referrer}: {e}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    save_users()
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
    await show_menu(message, user_id)

async def process_transfer(message: types.Message, text: str, user_id: int):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–≤–æ–¥ –¥–µ–Ω–µ–≥"""
    user_id_str = str(user_id)
    
    if user_id_str not in users:
        await show_not_registered_message(message)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user_data = users[user_id_str]
    
    if user_data.get('banned', False):
        ban_reason = user_data.get('ban_reason', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        ban_duration = user_data.get('ban_duration', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='üí¨ –æ–±–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞–∫–∞–∑–∞–Ω–∏–µ', url='https://t.me/daisicxTp_bot')]
        ])
        
        await message.answer(
            f"üö´ <b>—Ç–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
            f"‚ùå <b>–ø—Ä–∏—á–∏–Ω–∞:</b> {ban_reason}\n"
            f"‚è∞ <b>—Å—Ä–æ–∫:</b> {ban_duration}\n\n"
            f"üí¨ –æ–±–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞–∫–∞–∑–∞–Ω–∏–µ –º–æ–∂–Ω–æ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ\n"
            f"üîó <b>–ø–æ–¥–¥–µ—Ä–∂–∫–∞:</b> @daisicxTp_bot",
            parse_mode='HTML',
            reply_markup=markup
        )
        return
    
    # –ü–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏ —Å—É–º–º—ã
    text_lower = text.lower()
    
    # –ò—â–µ–º —Å—É–º–º—É –≤ —Ç–µ–∫—Å—Ç–µ - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π regex –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ª—é–±–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ "–∫"
    # –ò—â–µ–º —Å—É–º–º—É –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –ø–µ—Ä–µ–¥ username
    amount_match = re.search(r'(\d+(?:[.,]\d+)?(?:–∫+)?|–≤—Å–µ)(?:\s*$|\s+(?:@|—é–∑))', text_lower)
    
    if not amount_match:
        await message.answer('—É–∫–∞–∂–∏ —Å—É–º–º—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞. –Ω–∞–ø—Ä–∏–º–µ—Ä: –∫–∏–Ω—É—Ç—å —é–∑ 1–∫ –∏–ª–∏ –∫–∏–Ω—É—Ç—å —é–∑ 1000000')
        return
    
    amount_text = amount_match.group(1)
    
    amount = parse_amount(amount_text)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–≤—Å–µ"
    if amount == -1:
        amount = users[user_id_str]['balance']
    
    if amount <= 0:
            await message.answer('—É —Ç–µ–±—è –Ω–µ—Ç –¥–µ–Ω–µ–≥ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞')
            return
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—É–º–º–∞ –±–æ–ª—å—à–µ 0
    if amount <= 0:
        await message.answer('—Å—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0')
        return
    
    # –ò—â–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–ø–æ—Å–ª–µ "—é–∑" –∏–ª–∏ "@username"). –ò—Å–∫–ª—é—á–∞–µ–º —Å–ª–æ–≤–æ "–≤—Å–µ" –∫–∞–∫ –Ω–∏–∫
    user_match = re.search(r'(?:—é–∑\s+((?!–≤—Å–µ\b)[^\s]+)|@([^\s]+))', text_lower)
    
    if not user_match:
        await message.answer('—É–∫–∞–∂–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è. –Ω–∞–ø—Ä–∏–º–µ—Ä: –∫–∏–Ω—É—Ç—å —é–∑ username —Å—É–º–º–∞ –∏–ª–∏ –∫–∏–Ω—É—Ç—å @username —Å—É–º–º–∞')
        return
    
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π username (–∏–∑ –≥—Ä—É–ø–ø—ã 1 –∏–ª–∏ 2)
    target_username = user_match.group(1) if user_match.group(1) else user_match.group(2)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º username –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
    username = extract_username(target_username)
    
    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username –∏–ª–∏ –Ω–∏–∫—É
    target_user_id = None
    
    for uid, user_data in users.items():
        if (user_data.get('tg_username', '').lower() == username.lower() or 
            user_data.get('nick', '').lower() == target_username.lower()):
            target_user_id = uid
            break
    
    if not target_user_id:
        await message.answer('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
        return
    
    if target_user_id == user_id_str:
        await message.answer('–Ω–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Å–∞–º–æ–º—É —Å–µ–±–µ')
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —Ç–æ–ø-20 –∏–≥—Ä–æ–∫–æ–º
    is_top20 = is_top20_player(user_id_str)
    
    # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–º–∏—Å—Å–∏—é –¥–ª—è —Ç–æ–ø-20 –∏–≥—Ä–æ–∫–æ–≤
    commission_amount = 0
    
    amount_to_receiver = amount
    
    if is_top20:
        commission_amount = int(amount * TRANSFER_COMMISSION_TOP20 / 100)
    
    amount_to_receiver = amount - commission_amount
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å (–∫–æ–º–∏—Å—Å–∏—è –±–µ—Ä–µ—Ç—Å—è —Å —Å—É–º–º—ã –ø–µ—Ä–µ–≤–æ–¥–∞)
    if users[user_id_str]['balance'] < amount:
        await message.answer(f"—É —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥. –Ω–∞ —Å—á–µ—Ç—É: <b>${format_money(users[user_id_str]['balance'])}</b>", parse_mode='HTML')
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—å
    target_user_data = users[target_user_id]
    
    if target_user_data.get('banned', False):
        await message.answer('–Ω–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –∑–∞–±–∞–Ω–µ–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –ø–µ—Ä–µ–≤–æ–¥–∞
    transfer_confirmations = user_data.get('transfer_confirmations', True)
    
    if transfer_confirmations:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞
        sender_nick = users[user_id_str].get('nick', '–∏–≥—Ä–æ–∫')
        receiver_nick = users[target_user_id].get('nick', '–∏–≥—Ä–æ–∫')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        if is_top20:
            confirmation_message = (
                f"<a href='tg://user?id={user_id}'><b>{sender_nick}</b></a>, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏ –ø–µ—Ä–µ–≤–æ–¥ –∏–≥—Ä–æ–∫—É <b>{receiver_nick}</b> ${format_money(amount)}\n\n"
                f"–∫–æ–º–∏—Å—Å–∏—è —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç ${format_money(commission_amount)}"
            )
        else:
            confirmation_message = (
                f"<a href='tg://user?id={user_id}'><b>{sender_nick}</b></a>, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏ –ø–µ—Ä–µ–≤–æ–¥ –∏–≥—Ä–æ–∫—É <b>{receiver_nick}</b> ${format_money(amount)}"
            )
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='‚úÖ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥', callback_data=f'confirm_transfer_{user_id_str}_{target_user_id}_{amount}_{is_top20}')]
        ])
        
        await message.answer(confirmation_message, parse_mode='HTML', reply_markup=markup)
    else:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ —Å—Ä–∞–∑—É –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await execute_transfer(user_id_str, target_user_id, amount, is_top20, message)

async def execute_transfer(sender_user_id: str, target_user_id: str, amount: int, is_top20: bool, message: types.Message):
    """–≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–µ—Ä–µ–≤–æ–¥ –¥–µ–Ω–µ–≥"""
    # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–º–∏—Å—Å–∏—é –¥–ª—è —Ç–æ–ø-20 –∏–≥—Ä–æ–∫–æ–≤
    commission_amount = 0
    amount_to_receiver = amount
    
    if is_top20:
        commission_amount = int(amount * TRANSFER_COMMISSION_TOP20 / 100)
        amount_to_receiver = amount - commission_amount
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
    users[sender_user_id]['balance'] -= amount
    users[target_user_id]['balance'] += amount_to_receiver
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    save_users()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–µ—Ä–µ–≤–æ–¥–µ
    sender_nick = users[sender_user_id].get('nick', '–∏–≥—Ä–æ–∫')
    receiver_nick = users[target_user_id].get('nick', '–∏–≥—Ä–æ–∫')
    
    if is_top20:
        success_message = (
            f"‚úÖ <b>{sender_nick}</b>, —Ç—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–ª <b>${format_money(amount)}</b> –∏–≥—Ä–æ–∫—É <b>{receiver_nick}</b>\n\n"
            f"üí∏ <b>–∫–æ–º–∏—Å—Å–∏—è —Å–æ—Å—Ç–∞–≤–∏–ª–∞:</b> <b>${format_money(commission_amount)}</b>\n"
            f"üí≥ <b>—Ç–≤–æ–π –±–∞–ª–∞–Ω—Å:</b> <b>${format_money(users[sender_user_id]['balance'])}</b>"
        )
    else:
        success_message = (
            f"‚úÖ <b>{sender_nick}</b>, —Ç—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–ª <b>${format_money(amount)}</b> –∏–≥—Ä–æ–∫—É <b>{receiver_nick}</b>\n\n"
            f"üí≥ <b>—Ç–≤–æ–π –±–∞–ª–∞–Ω—Å:</b> <b>${format_money(users[sender_user_id]['balance'])}</b>"
        )
    
    await message.answer(success_message, parse_mode='HTML')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
@dp.callback_query(lambda c: c.data.startswith('confirm_transfer_'))
async def confirm_transfer_callback(callback: types.CallbackQuery):
    
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞"""
    user_id = callback.from_user.id
    
    user_id_str = str(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if user_id_str not in users:
        await callback.answer("—Ç—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ")
        return
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
    try:
        data_parts = callback.data.split('_')
        sender_user_id = data_parts[2]  # ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        target_user_id = data_parts[3]  # ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        amount = int(data_parts[4])
        is_top20 = data_parts[5] == 'True'
    except (IndexError, ValueError):
        await callback.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–∞")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–∂–∞–≤—à–∏–π –∫–Ω–æ–ø–∫—É - —ç—Ç–æ —Ç–æ—Ç, –∫—Ç–æ —Å–æ–∑–¥–∞–ª –ø–µ—Ä–µ–≤–æ–¥
    if user_id_str != sender_user_id:
        await callback.answer("üò° —Ç–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–≤–æ–¥ –µ—â–µ –∞–∫—Ç—É–∞–ª–µ–Ω
    if user_id_str not in users or target_user_id not in users:
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –µ—â–µ —Ä–∞–∑
    if users[user_id_str]['balance'] < amount:
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
        return
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ –∏—Å–ø–æ–ª—å–∑—É—è –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
    await execute_transfer(user_id_str, target_user_id, amount, is_top20, callback.message)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.edit_text("‚úÖ –ø–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!", parse_mode='HTML')
    
    await callback.answer("–ø–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
    try:
        sender_nick = users[user_id_str].get('nick', '–∏–≥—Ä–æ–∫')
        commission_amount = int(amount * TRANSFER_COMMISSION_TOP20 / 100) if is_top20 else 0
        amount_to_receiver = amount - commission_amount
        
        await bot.send_message(
            target_user_id,
            f"üí∞ —Ç–µ–±–µ –ø–µ—Ä–µ–≤–µ–ª–∏ <b>${format_money(amount_to_receiver)}</b> –æ—Ç <a href='tg://user?id={user_id}'><b>{sender_nick}</b></a>\n"
            f"üí≥ —Ç–µ–ø–µ—Ä—å —É —Ç–µ–±—è: <b>${format_money(users[target_user_id]['balance'])}</b>",
            parse_mode='HTML'
        )
    except Exception as e:
        print(f"–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—É—á–∞—Ç–µ–ª—é: {e}")

# –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —ç–∫—Ä–∞–Ω–∏—Ä—É—é—â–∏–π —Ö–µ–ª–ø–µ—Ä –¥–ª—è HTML
def html_escape(text: str) -> str:
    if text is None:
        return ''
    return (
        str(text)
        .replace('&', '&amp;')
        .replace('<', '&lt;')
        .replace('>', '&gt;')
        .replace('"', '&quot;')
        .replace("'", '&#39;')
    )

@dp.message(F.text.regexp(r'(?i)\b(–∫–∏–Ω—É—Ç—å|–ø–µ—Ä–µ–¥–∞—Ç—å|–ø–µ—Ä–µ–≤–µ—Å—Ç–∏|–¥–∞—Ç—å)\b'))
async def on_transfer(message: types.Message):
    user_id = message.from_user.id
    
    user_id_str = str(user_id)
    
    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if user_id_str not in users:
        await show_not_registered_message(message)
        return
    
    # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ –ø–æ –æ—Ç–≤–µ—Ç—É
    if message.reply_to_message:
        await handle_reply_transfer(message)
        return
    
    # –ò–Ω–∞—á–µ –æ–±—ã—á–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥
    await process_transfer(message, message.text, user_id)

async def handle_reply_transfer(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–≤–æ–¥ –ø–æ –æ—Ç–≤–µ—Ç—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    user_id = message.from_user.id
    
    user_id_str = str(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if user_id_str not in users:
        await show_not_registered_message(message)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user_data = users[user_id_str]
    
    if user_data.get('banned', False):
        ban_reason = user_data.get('ban_reason', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        ban_duration = user_data.get('ban_duration', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='üí¨ –æ–±–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞–∫–∞–∑–∞–Ω–∏–µ', url='https://t.me/daisicxTp_bot')]
        ])
        
        await message.answer(
            f"üö´ <b>—Ç–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
            f"‚ùå <b>–ø—Ä–∏—á–∏–Ω–∞:</b> {ban_reason}\n"
            f"‚è∞ <b>—Å—Ä–æ–∫:</b> {ban_duration}\n\n"
            f"üí¨ –æ–±–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞–∫–∞–∑–∞–Ω–∏–µ –º–æ–∂–Ω–æ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ\n"
            f"üîó <b>–ø–æ–¥–¥–µ—Ä–∂–∫–∞:</b> @daisicxTp_bot",
            parse_mode='HTML',
            reply_markup=markup
        )
        return
    
    text = message.text.lower()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É–º–º—É –∏–∑ —Ç–µ–∫—Å—Ç–∞ - –∏—â–µ–º –ª—é–±—ã–µ —á–∏—Å–ª–∞ (—Å —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è–º–∏ –∏–ª–∏ –±–µ–∑)
    # –ò—â–µ–º: —á–∏—Å–ª–æ + –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Ç–æ—á–∫–∞/–∑–∞–ø—è—Ç–∞—è + –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ "–∫"
    amount_match = re.search(r'(\d+(?:[.,]\d+)?(?:–∫+)?|–≤—Å–µ)', text)
    
    if not amount_match:
        await message.answer('—É–∫–∞–∂–∏ —Å—É–º–º—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞. –Ω–∞–ø—Ä–∏–º–µ—Ä: –∫–∏–Ω—É—Ç—å 1–∫ –∏–ª–∏ –∫–∏–Ω—É—Ç—å 1000000')
        return
    
    try:
        amount_text = amount_match.group(1)
        amount = parse_amount(amount_text)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–≤—Å–µ" –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        if amount == -1:
            amount = users[user_id_str]['balance']
        if amount <= 0:
            await message.answer('—É —Ç–µ–±—è –Ω–µ—Ç –¥–µ–Ω–µ–≥ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞')
            return
        
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—É–º–º–∞ –±–æ–ª—å—à–µ 0
        if amount <= 0:
            await message.answer('—Å—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0')
            return
        
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞ —á—å–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—á–∞–µ–º
        target_user_id = str(message.reply_to_message.from_user.id)
        if target_user_id not in users:
            await message.answer('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ')
            return
        
        if target_user_id == user_id_str:
            await message.answer('–Ω–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Å–∞–º–æ–º—É —Å–µ–±–µ')
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—å
        target_user_data = users[target_user_id]
        if target_user_data.get('banned', False):
            await message.answer('–Ω–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –∑–∞–±–∞–Ω–µ–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —Ç–æ–ø-20 –∏–≥—Ä–æ–∫–æ–º
        is_top20 = is_top20_player(user_id_str)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–º–∏—Å—Å–∏—é –¥–ª—è —Ç–æ–ø-20 –∏–≥—Ä–æ–∫–æ–≤
        commission_amount = 0
        amount_to_receiver = amount
        
        if is_top20:
            commission_amount = int(amount * TRANSFER_COMMISSION_TOP20 / 100)
            amount_to_receiver = amount - commission_amount
        
        if users[user_id_str]['balance'] < amount:
            await message.answer(f"—É —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥. –Ω–∞ —Å—á–µ—Ç—É: <b>${format_money(users[user_id_str]['balance'])}</b>", parse_mode='HTML')
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –ø–µ—Ä–µ–≤–æ–¥–∞
        transfer_confirmations = user_data.get('transfer_confirmations', True)
        
        if transfer_confirmations:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞
            sender_nick = users[user_id_str].get('nick', '–∏–≥—Ä–æ–∫')
            receiver_nick = users[target_user_id].get('nick', '–∏–≥—Ä–æ–∫')
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            if is_top20:
                confirmation_message = (
                    f"<a href='tg://user?id={user_id}'><b>{sender_nick}</b></a>, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏ –ø–µ—Ä–µ–≤–æ–¥ –∏–≥—Ä–æ–∫—É <b>{receiver_nick}</b> ${format_money(amount)}\n\n"
                    f"–∫–æ–º–∏—Å—Å–∏—è —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç ${format_money(commission_amount)}"
                )
            else:
                confirmation_message = (
                    f"<a href='tg://user?id={user_id}'><b>{sender_nick}</b></a>, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏ –ø–µ—Ä–µ–≤–æ–¥ –∏–≥—Ä–æ–∫—É <b>{receiver_nick}</b> ${format_money(amount)}"
                )
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='‚úÖ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥', callback_data=f'confirm_transfer_{user_id_str}_{target_user_id}_{amount}_{is_top20}')]
            ])
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
            await message.answer(confirmation_message, parse_mode='HTML', reply_markup=markup)
        else:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ —Å—Ä–∞–∑—É –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            await execute_transfer(user_id_str, target_user_id, amount, is_top20, message)
    
    except Exception as e:
        await message.answer(f'–æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: {str(e)}. –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: –∫–∏–Ω—É—Ç—å —Å—É–º–º–∞')



# –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã
@dp.message(Command('admin'))
async def admin_panel(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.chat.type != 'private':
        return
    
    user_id = message.from_user.id
    
    user_id_str = str(user_id)
    
    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS:
        await message.answer('—É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏')
        return
    
    markup = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
    
    [KeyboardButton(text='‚ö†Ô∏è –Ω–∞–∫–∞–∑–∞–Ω–∏—è'), KeyboardButton(text='üí∏ –≤–∞–ª—é—Ç–∞')],
        [KeyboardButton(text='üìã –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö'), KeyboardButton(text='üí∞ –Ω–∞–ª–æ–≥–∏')],
    
    [KeyboardButton(text='üè¶ –≤–∫–ª–∞–¥—ã'), KeyboardButton(text='üì£ —Ä–∞—Å—Å—ã–ª–∫–∞')],
        [KeyboardButton(text='‚öôÔ∏è —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏'), KeyboardButton(text='–¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω üëë')],
    
    [KeyboardButton(text='–Ω–∞–∑–∞–¥ ‚¨ÖÔ∏è')]
    ])
    
    await message.answer(
        'üîß <b>–∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>\n\n–≤—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:',
        parse_mode='HTML',
    
    reply_markup=markup
    )

@dp.message(F.text.lower() == '–∞–¥–º–∏–Ω')
async def admin_panel_text(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã '–∞–¥–º–∏–Ω'"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.chat.type != 'private':
        return
    
    user_id = message.from_user.id
    
    user_id_str = str(user_id)
    
    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS:
        await message.answer('—É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏')
        return
    
    markup = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
    
    [KeyboardButton(text='‚ö†Ô∏è –Ω–∞–∫–∞–∑–∞–Ω–∏—è'), KeyboardButton(text='üí∏ –≤–∞–ª—é—Ç–∞')],
        [KeyboardButton(text='üìã –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö'), KeyboardButton(text='üí∞ –Ω–∞–ª–æ–≥–∏')],
    
    [KeyboardButton(text='üè¶ –≤–∫–ª–∞–¥—ã'), KeyboardButton(text='üì£ —Ä–∞—Å—Å—ã–ª–∫–∞')],
        [KeyboardButton(text='‚öôÔ∏è —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏'), KeyboardButton(text='–¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω üëë')],
    
    [KeyboardButton(text='–Ω–∞–∑–∞–¥ ‚¨ÖÔ∏è')]
    ])
    
    await message.answer(
        'üîß <b>–∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>\n\n–≤—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:',
        parse_mode='HTML',
    
    reply_markup=markup
    )

@dp.message(F.text.lower() == '–∞–¥–º–∏–Ω')
async def admin_panel_text(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã '–∞–¥–º–∏–Ω'"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.chat.type != 'private':
        return
    
    user_id = message.from_user.id
    
    user_id_str = str(user_id)
    
    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS:
        await message.answer('—É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏')
        return
    
    markup = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
    
    [KeyboardButton(text='‚ö†Ô∏è –Ω–∞–∫–∞–∑–∞–Ω–∏—è'), KeyboardButton(text='üí∏ –≤–∞–ª—é—Ç–∞')],
        [KeyboardButton(text='üìã –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö'), KeyboardButton(text='üí∞ –Ω–∞–ª–æ–≥–∏')],
    
    [KeyboardButton(text='üè¶ –≤–∫–ª–∞–¥—ã'), KeyboardButton(text='üì£ —Ä–∞—Å—Å—ã–ª–∫–∞')],
        [KeyboardButton(text='‚öôÔ∏è —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏'), KeyboardButton(text='–¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω üëë')],
    
    [KeyboardButton(text='–Ω–∞–∑–∞–¥ ‚¨ÖÔ∏è')]
    ])
    
    await message.answer(
        'üîß <b>–∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>\n\n–≤—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:',
        parse_mode='HTML',
    
    reply_markup=markup
    )
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä—É—Å—Å–∫–æ–π –∫–æ–º–∞–Ω–¥—ã /–∞–¥–º–∏–Ω
@dp.message(lambda message: message.text and message.text.lower() in ['/–∞–¥–º–∏–Ω', '/admin'])
async def admin_panel_commands(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ '/–∞–¥–º–∏–Ω' –∏ '/admin'"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.chat.type != 'private':
        return
    
    user_id = message.from_user.id
    
    user_id_str = str(user_id)
    
    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS:
        await message.answer('—É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏')
        return
    
    markup = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
    
    [KeyboardButton(text='‚ö†Ô∏è –Ω–∞–∫–∞–∑–∞–Ω–∏—è'), KeyboardButton(text='üí∏ –≤–∞–ª—é—Ç–∞')],
        [KeyboardButton(text='üìã –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö'), KeyboardButton(text='üí∞ –Ω–∞–ª–æ–≥–∏')],
    
    [KeyboardButton(text='üè¶ –≤–∫–ª–∞–¥—ã'), KeyboardButton(text='üì£ —Ä–∞—Å—Å—ã–ª–∫–∞')],
        [KeyboardButton(text='‚öôÔ∏è —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏'), KeyboardButton(text='–¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω üëë')],
    
    [KeyboardButton(text='–Ω–∞–∑–∞–¥ ‚¨ÖÔ∏è')]
    ])
    
    await message.answer(
        'üîß <b>–∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>\n\n–≤—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:',
        parse_mode='HTML',
    
    reply_markup=markup
    )

@dp.message(F.text == '‚öôÔ∏è —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏')
async def admin_promo_management(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
    user_id = message.from_user.id
    
    user_id_str = str(user_id)
    
    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS:
        await message.answer('—É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏')
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏
    markup = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [KeyboardButton(text='‚ûï —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥'), KeyboardButton(text='üìã —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤')],
        [KeyboardButton(text='üóëÔ∏è —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥'), KeyboardButton(text='üìä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤')],
        [KeyboardButton(text='‚¨ÖÔ∏è –Ω–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å')]
    ])
    
    await message.answer(
        '‚öôÔ∏è <b>—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏</b>\n\n–≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:',
        parse_mode='HTML',
        reply_markup=markup
    )

@dp.message(F.text.lower().contains('–≤—ã–¥–∞—Ç—å') & F.text.lower().contains('–≤–∞—Ä–Ω'))
async def issue_warn_button(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.chat.type != 'private':
        return
    
    user_id = message.from_user.id
    
    user_id_str = str(user_id)
    
    collect_user_info(message, user_id_str)
    if user_id not in ADMIN_IDS:
        await message.answer('—É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ')
        return
    await state.update_data(current_action='warn')
    
    await message.answer('üò° –Ω–∞–ø–∏—à–∏ —é–∑ –∫–æ–º—É –Ω–∞–¥–æ –≤—Å—Ç–∞–≤–∏—Ç—å –≤–∞—Ä–Ω –≤ –ø–æ–ø–∞—á–∫—É))', reply_markup=ReplyKeyboardRemove())
    await state.set_state(AdminState.waiting_for_target)

@dp.message(AdminState.waiting_for_target)
async def admin_target_selected(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.chat.type != 'private':
        return
    
    user_id = message.from_user.id
    
    if user_id not in ADMIN_IDS:
        return
    target_text = message.text.strip()
    
    username = extract_username(target_text)
    target_user_id = None
    
    target_nick = None
    for uid, user_data in users.items():
        if (user_data.get('tg_username', '').lower() == username.lower() or 
            user_data.get('nick', '').lower() == target_text.lower()):
            target_user_id = uid
            target_nick = user_data.get('nick', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            break
    if not target_user_id:
        await message.answer('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω')
        await state.clear()
        await admin_panel(message)
        return
    data = await state.get_data()
    
    current_action = data.get('current_action')
    await state.update_data(target_user_id=target_user_id, target_nick=target_nick)
    
    if current_action == 'warn':
        await message.answer('üßæ –Ω–∞–ø–∏—à–∏ –ø—Ä–∏—á–∏–Ω—É –≤–∞—Ä–Ω–∞')
        await state.set_state(AdminState.waiting_for_warn_reason)
    elif current_action == 'ban':
        await message.answer('üßæ –Ω–∞–ø–∏—à–∏ –ø—Ä–∏—á–∏–Ω—É –±–∞–Ω–∞')
        await state.set_state(AdminState.waiting_for_ban_reason)
    elif current_action == 'unwarn':
        await message.answer('üßæ –Ω–∞–ø–∏—à–∏, —Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–Ω–æ–≤ —Å–Ω—è—Ç—å (—á–∏—Å–ª–æ –∏–ª–∏ "–≤—Å–µ")')
        await state.set_state(AdminState.waiting_for_unwarn_count)
    elif current_action == 'unban':
        await message.answer('üßæ –Ω–∞–ø–∏—à–∏ –ø—Ä–∏—á–∏–Ω—É —Ä–∞–∑–±–∞–Ω–∞')
        await state.set_state(AdminState.waiting_for_unban_reason)
    elif current_action == 'annul_balance':
        await message.answer('üßæ –Ω–∞–ø–∏—à–∏ –ø—Ä–∏—á–∏–Ω—É –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è')
        await state.set_state(AdminState.waiting_for_annul_reason)
    elif current_action == 'give_money':
        await message.answer('üíµ –Ω–∞–ø–∏—à–∏ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è')
        await state.set_state(AdminState.waiting_for_give_amount)

@dp.message(F.text.lower().contains('–≤—ã–¥–∞—Ç—å') & F.text.lower().contains('–±–∞–Ω'))
async def issue_ban_button(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.chat.type != 'private':
        return
    
    user_id = message.from_user.id
    
    user_id_str = str(user_id)
    
    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS:
        await message.answer('—É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ')
        return
    
    await state.update_data(current_action='ban')
    
    await message.answer('üò° –Ω–∞–ø–∏—à–∏ —é–∑ –∫–æ–º—É –Ω–∞–¥–æ –≤—Å—Ç–∞–≤–∏—Ç—å –±–∞–Ω –≤ –ø–æ–ø–∞—á–∫—É)', reply_markup=ReplyKeyboardRemove())
    await state.set_state(AdminState.waiting_for_target)

@dp.message(F.text.lower().contains('—Å–Ω—è—Ç—å') & F.text.lower().contains('–≤–∞—Ä–Ω'))
async def remove_warn_button(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.chat.type != 'private':
        return
    
    user_id = message.from_user.id
    
    user_id_str = str(user_id)
    
    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS:
        await message.answer('—É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ')
        return
    
    await state.update_data(current_action='unwarn')
    
    await message.answer('ü•∞ –Ω–∞–ø–∏—à–∏ —é–∑ –∫–æ–º—É –Ω–∞–¥–æ –≤—ã—Ç–∞—â–∏—Ç—å –≤–∞—Ä–Ω –∏–∑ –ø–æ–ø–∞—á–∫–∏)', reply_markup=ReplyKeyboardRemove())
    await state.set_state(AdminState.waiting_for_target)

@dp.message(F.text.lower().contains('—Å–Ω—è—Ç—å') & F.text.lower().contains('–±–∞–Ω'))
async def remove_ban_button(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.chat.type != 'private':
        return
    
    user_id = message.from_user.id
    
    user_id_str = str(user_id)
    
    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS:
        await message.answer('—É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ')
        return
    
    await state.update_data(current_action='unban')
    
    await message.answer('ü•∞ –Ω–∞–ø–∏—à–∏ —é–∑ –∫–æ–º—É –Ω–∞–¥–æ –≤—ã—Ç–∞—â–∏—Ç—å –±–∞–Ω –∏–∑ –ø–æ–ø–∞—á–∫–∏)', reply_markup=ReplyKeyboardRemove())
    await state.set_state(AdminState.waiting_for_target)

@dp.message(F.text.lower().contains('–∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞—Ç—å') & F.text.lower().contains('–±–∞–ª–∞–Ω—Å'))
async def reset_balance_button(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.chat.type != 'private':
        return
    
    user_id = message.from_user.id
    
    user_id_str = str(user_id)
    
    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS:
        await message.answer('—É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ')
        return
    
    await state.update_data(current_action='annul_balance')
    
    await message.answer('üò° –Ω–∞–ø–∏—à–∏ —é–∑ —Å –∫–æ–≥–æ –Ω–∞–¥–æ —Å–æ–±—Ä–∞—Ç—å –Ω–∞–ª–æ–≥ –Ω–∞ –∂–∏–∑–Ω—å)', reply_markup=ReplyKeyboardRemove())
    await state.set_state(AdminState.waiting_for_target)

@dp.message(F.text.lower().contains('–ø—Ä–æ—Å–º–æ—Ç—Ä') & F.text.lower().contains('–±–¥'))
async def view_database(message: types.Message):
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.chat.type != 'private':
        return
    
    user_id = message.from_user.id
    
    user_id_str = str(user_id)    # —Å–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS:
        return
    
    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    total_users = len(users)
    
    total_balance = sum(user.get('balance', 0) for user in users.values())
    total_referrals = sum(user.get('referrals', 0) for user in users.values())
    
    max_balance = max((user.get('balance', 0) for user in users.values()), default=0)
    max_k_count = get_max_k_count()
    
    # –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    active_users = sum(1 for user in users.values() if user.get('balance', 0) > 0)
    
    total_warns = sum(user.get('warns', 0) for user in users.values())
    banned_users = sum(1 for user in users.values() if user.get('banned', False))
    
    db_info = f'üìä <b>—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:</b>\n\n'
    db_info += f'üë• <b>–≤—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {total_users}\n'
    db_info += f'‚úÖ <b>–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {active_users}\n'
    db_info += f'üí∞ <b>–æ–±—â–∏–π –±–∞–ª–∞–Ω—Å:</b> ${format_money(total_balance)}\n'
    db_info += f'üë• <b>–≤—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b> {total_referrals}\n'
    db_info += f'üíé <b>–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å:</b> ${format_money(max_balance)}\n'
    db_info += f'‚ö†Ô∏è <b>–≤—Å–µ–≥–æ –≤–∞—Ä–Ω–æ–≤:</b> {total_warns}\n'
    db_info += f'üö´ <b>–∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö:</b> {banned_users}\n'
    db_info += f'üî¢ <b>–ª–∏–º–∏—Ç —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π:</b> {max_k_count} –±—É–∫–≤ "–∫"\n\n'
    
    if total_users == 0:
        db_info += 'üìù –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞'
    else:
        db_info += 'üí° <b>–ø–æ–¥—Å–∫–∞–∑–∫–∞:</b> –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–π "—ç–∫—Å–ø–æ—Ä—Ç –ë–î"'
    
    await message.answer(db_info, parse_mode='HTML')

@dp.message(F.text.lower().contains('–Ω–∞–∑–∞–¥'))
async def admin_back_button(message: types.Message):
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.chat.type != 'private':
        return
    
    user_id = message.from_user.id
    
    user_id_str = str(user_id)
    
    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS:
        await message.answer('—É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ')
        return
    
    await admin_panel(message)

@dp.message(F.text.lower().contains('–¥–æ–±–∞–≤–∏—Ç—å') & F.text.lower().contains('–∞–¥–º–∏–Ω'))
async def add_admin_button(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.chat.type != 'private':
        return
    
    user_id = message.from_user.id
    
    user_id_str = str(user_id)
    
    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS:
        await message.answer('—É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ')
        return
    
    await message.answer('üëë –Ω–∞–ø–∏—à–∏ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–æ–º (–±–µ–∑ @):', reply_markup=ReplyKeyboardRemove())
    
    await state.set_state(AdminState.waiting_for_add_admin_username)

@dp.message(F.text.lower() == 'üìà —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∫–ª–∞–¥–æ–≤')
async def admin_bank_stats_button(message: types.Message):
    """–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∫–ª–∞–¥–æ–≤ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.chat.type != 'private':
        return
    
    user_id = message.from_user.id
    
    user_id_str = str(user_id)    # —Å–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS:
        await message.answer('—É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ')
        return
    
    # —Å–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∫–ª–∞–¥–æ–≤
    total_deposits = 0
    
    users_with_deposits = 0
    max_deposit = 0
    
    deposits_list = []
    
    for user_id_key, user_data in users.items():
        deposit = user_data.get('bank_deposit', 0)
    if deposit > 0:
            total_deposits += deposit
            users_with_deposits += 1
            deposits_list.append(deposit)
            if deposit > max_deposit:
                max_deposit = deposit
    
    total_users = len(users)
    percentage_with_deposits = (users_with_deposits / total_users * 100) if total_users > 0 else 0
    
    average_deposit = (total_deposits / users_with_deposits) if users_with_deposits > 0 else 0
    
    stats_text = f'üí≥ <b>—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∫–ª–∞–¥–æ–≤:</b>\n\n'
    
    stats_text += f'üí∞ <b>–æ–±—â–∞—è —Å—É–º–º–∞ –≤–∫–ª–∞–¥–æ–≤:</b> <b>${format_money(total_deposits)}</b>\n'
    stats_text += f'üë• <b>–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª–∞–¥–∞–º–∏:</b> <b>{users_with_deposits}/{total_users}</b>\n'
    stats_text += f'üìä <b>–ø—Ä–æ—Ü–µ–Ω—Ç —Å –≤–∫–ª–∞–¥–∞–º–∏:</b> <b>{percentage_with_deposits:.1f}%</b>\n'
    stats_text += f'üíé <b>–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–∫–ª–∞–¥:</b> <b>${format_money(max_deposit)}</b>\n'
    stats_text += f'üìà <b>—Å—Ä–µ–¥–Ω–∏–π –≤–∫–ª–∞–¥:</b> <b>${format_money(int(average_deposit))}</b>\n\n'
    stats_text += f'üí° <b>–ø–æ–¥—Å–∫–∞–∑–∫–∞:</b> –∏—Å–ø–æ–ª—å–∑—É–π "üèÜ —Ç–æ–ø –≤–∫–ª–∞–¥–æ–≤" –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª—É—á—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤'
    
    await message.answer(stats_text, parse_mode='HTML')

@dp.message(F.text.lower() == 'üèÜ —Ç–æ–ø –≤–∫–ª–∞–¥–æ–≤')
async def admin_bank_top_button(message: types.Message):
    """–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ç–æ–ø –≤–∫–ª–∞–¥–æ–≤ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.chat.type != 'private':
        return
    
    user_id = message.from_user.id
    
    user_id_str = str(user_id)    # —Å–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS:
        await message.answer('—É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ')
        return
    
    # —Å–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤–∫–ª–∞–¥–∞—Ö
    deposits_data = []
    
    total_deposits = 0
    users_with_deposits = 0
    
    for user_id_key, user_data in users.items():
        deposit = user_data.get('bank_deposit', 0)
    if deposit > 0:
            deposits_data.append({
                'user_id': user_id_key,
                'nick': user_data.get('nick', '–∏–≥—Ä–æ–∫'),
                'tg_username': user_data.get('tg_username', ''),
                'deposit': deposit
            })
            total_deposits += deposit
            users_with_deposits += 1
    
    # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É –≤–∫–ª–∞–¥–∞ (—É–±—ã–≤–∞–Ω–∏–µ)
    deposits_data.sort(key=lambda x: x['deposit'], reverse=True)
    
    top_text = f'üèÜ <b>—Ç–æ–ø-10 –ø–æ –≤–∫–ª–∞–¥–∞–º:</b>\n\n'
    
    medals = ['ü•á', 'ü•à', 'ü•â']
    
    for i, data in enumerate(deposits_data[:10]):
        if i < 3:
            rank = medals[i]
        else:
            rank = f'{i+1}.'
        
        username = data['tg_username']
        if username:
            username = f'@{username}'
        else:
            username = data['nick']
        
        top_text += f'{rank} <b>{username}</b>\n'
        top_text += f'   üí∞ <b>${format_money(data["deposit"])}</b>\n\n'
    
    top_text += f'üìä <b>–æ–±—â–∞—è —Å—É–º–º–∞ –≤–∫–ª–∞–¥–æ–≤:</b> <b>${format_money(total_deposits)}</b>\n'
    top_text += f'üë• <b>–≤—Å–µ–≥–æ —Å –≤–∫–ª–∞–¥–∞–º–∏:</b> <b>{users_with_deposits}</b>'
    
    await message.answer(top_text, parse_mode='HTML')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∞–¥–º–∏–Ω–∫–∏

# === —Ä–∞—Å—Å—ã–ª–∫–∞ ===
@dp.message(F.text.lower() == '—Ä–∞—Å—Å—ã–ª–∫–∞ üì£')
async def start_broadcast(message: types.Message, state: FSMContext):
    # —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ –∏ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã
    if message.chat.type != 'private':
        return
    user_id = message.from_user.id
    
    if user_id not in ADMIN_IDS:
        return
    # —Å–Ω–∞—á–∞–ª–∞ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∫—É–¥–∞ —Å–ª–∞—Ç—å
    kb = InlineKeyboardMarkup(inline_keyboard=[
    
    [InlineKeyboardButton(text='–≤—Å–µ–º –≤ –ª—Å', callback_data='bc_target_dm')],
        [InlineKeyboardButton(text='–≤–æ –≤—Å–µ —á–∞—Ç—ã', callback_data='bc_target_chats')],
    
    [InlineKeyboardButton(text='–≤–æ –≤—Å–µ —á–∞—Ç—ã (–∫—Ä–æ–º–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ)', callback_data='bc_target_chats_ex_main')],
        [InlineKeyboardButton(text='–æ—Ç–º–µ–Ω–∞', callback_data='bc_cancel')]
    
    ])
    await message.answer('–∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º?', reply_markup=kb)
    
    await state.set_state(AdminState.waiting_for_broadcast_target)

@dp.message(AdminState.waiting_for_broadcast_text)
async def broadcast_text_received(message: types.Message, state: FSMContext):
    if message.chat.type != 'private':
        return
    user_id = message.from_user.id
    
    if user_id not in ADMIN_IDS:
        return
    # –æ—Ç–º–µ–Ω–∞
    if (message.text or '').strip().lower() == '–æ—Ç–º–µ–Ω–∞':
        await state.clear()
        await message.answer('—Ä–∞—Å—Å—ã–ª–∫—É –æ—Ç–º–µ–Ω–∏–ª')
        return
    # –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é, —É—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∏ —Å—ã—Ä—ã–µ HTML-—Ç–µ–≥–∏
    has_entities = bool(getattr(message, 'entities', None) or getattr(message, 'caption_entities', None))
    
    if has_entities:
        # –µ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç —Ç–µ–ª–µ–≥–∏ ‚Äî –±–µ—Ä—ë–º html-–≤–µ—Ä—Å–∏—é, –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ —Å–æ–±–µ—Ä—ë—Ç —Ç–µ–≥–∏
        text = (getattr(message, 'caption_html', None)
    
    or getattr(message, 'html_text', None)
                or (message.caption or message.text or ''))
    else:
        # –Ω–µ—Ç entities ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—ã—Ä–æ–π –≤–≤–æ–¥, —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞–ª–∏ –≤—Ä—É—á–Ω—É—é –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏ <b> –∏ —Ç.–¥.
        text = (message.caption or message.text or '')
    
    # –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ HTML-—Ç–µ–≥–∏
    text = text.replace('&amp;lt;', '<').replace('&amp;gt;', '>')
    
    text = text.replace('&lt;', '<').replace('&gt;', '>')
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ HTML-—Ç–µ–≥–∏
    html_tags = {
    
    '&amp;lt;b&amp;gt;': '<b>', '&amp;lt;/b&amp;gt;': '</b>',
        '&amp;lt;i&amp;gt;': '<i>', '&amp;lt;/i&amp;gt;': '</i>',
        '&amp;lt;u&amp;gt;': '<u>', '&amp;lt;/u&amp;gt;': '</u>',
        '&amp;lt;s&amp;gt;': ' ', '&amp;lt;/s&amp;gt;': ' ',
        '&amp;lt;code&amp;gt;': '<code>', '&amp;lt;/code&amp;gt;': '</code>',
        '&amp;lt;a href=&amp;quot;': '<a href="', '&amp;lt;/a&amp;gt;': '</a>',
    
    '&amp;lt;blockquote&amp;gt;': '<blockquote>', '&amp;lt;/blockquote&amp;gt;': '</blockquote>',
        '&amp;quot;': '"', '&amp;amp;': '&'
    }
    
    for escaped, original in html_tags.items():
        text = text.replace(escaped, original)
    
    photo_id = None
    if getattr(message, 'photo', None):
        try:
            photo_id = message.photo[-1].file_id
        except Exception:
            photo_id = None
    
    await state.update_data(broadcast_text=text, broadcast_photo_id=photo_id)
    kb = InlineKeyboardMarkup(inline_keyboard=[
    
    [InlineKeyboardButton(text='–¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É', callback_data='bc_add_button')],
        [InlineKeyboardButton(text='–±–µ–∑ –∫–Ω–æ–ø–∫–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º', callback_data='bc_no_button')],
    
    [InlineKeyboardButton(text='–æ—Ç–º–µ–Ω–∞', callback_data='bc_cancel')]
    ])
    await message.answer('–¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É?', reply_markup=kb)

@dp.callback_query(lambda c: c.data in ['bc_add_button','bc_no_button','bc_cancel'])
async def broadcast_button_choice(callback: types.CallbackQuery, state: FSMContext):
    
    user_id = callback.from_user.id
    if user_id not in ADMIN_IDS:
        await callback.answer('—É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏', show_alert=True)
        return
    if callback.data == 'bc_cancel':
        await state.clear()
        await callback.message.edit_text('—Ä–∞—Å—Å—ã–ª–∫—É –æ—Ç–º–µ–Ω–∏–ª')
        await callback.answer('—Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞', show_alert=True)
        return
    if callback.data == 'bc_no_button':
        await callback.answer('–∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞', show_alert=True)
        await start_broadcast_send(callback.message, state, add_button=False)
        return
    
    # add button
    await state.set_state(AdminState.waiting_for_broadcast_button_data)
    await callback.message.edit_text('–ø—Ä–∏—à–ª–∏ –∫–Ω–æ–ø–∫—É —Ç–∞–∫:\n—Ç–µ–∫—Å—Ç | —Å—Å—ã–ª–∫–∞\n–Ω–∞–ø—Ä–∏–º–µ—Ä:\n–ø–µ—Ä–µ–π—Ç–∏ | https://example.com')
    await callback.answer('–≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏', show_alert=True)

@dp.message(AdminState.waiting_for_broadcast_button_data)
async def broadcast_button_data_received(message: types.Message, state: FSMContext):
    if message.chat.type != 'private':
        return
    user_id = message.from_user.id
    
    if user_id not in ADMIN_IDS:
        return
    raw = (message.text or '').strip()
    
    if '|' not in raw:
        await message.answer('–Ω—É–∂–µ–Ω —Ñ–æ—Ä–º–∞—Ç: —Ç–µ–∫—Å—Ç | —Å—Å—ã–ª–∫–∞')
        return
    btn_text, btn_url = [p.strip() for p in raw.split('|', 1)]
    
    if not btn_text or not btn_url or not (btn_url.startswith('http://') or btn_url.startswith('https://')):
        await message.answer('—Å—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http(s)://')
        return
    await state.update_data(broadcast_button={'text': btn_text, 'url': btn_url})
    
    await start_broadcast_send(message, state, add_button=True)

async def start_broadcast_send(message_or_cb_msg, state: FSMContext, add_button: bool):
    data = await state.get_data()
    
    text = data.get('broadcast_text', '')
    
    # –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ HTML-—Ç–µ–≥–æ–≤
    if text:
        # –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ HTML-—Ç–µ–≥–∏
        text = text.replace('&amp;lt;', '<').replace('&amp;gt;', '>')
        text = text.replace('&lt;', '<').replace('&gt;', '>')
        
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ HTML-—Ç–µ–≥–∏
        html_tags = {
            '&amp;lt;b&amp;gt;': '<b>', '&amp;lt;/b&amp;gt;': '</b>',
            '&amp;lt;i&amp;gt;': '<i>', '&amp;lt;/i&amp;gt;': '</i>',
            '&amp;lt;u&amp;gt;': '<u>', '&amp;lt;/u&amp;gt;': '</u>',
            '&amp;lt;s&amp;gt;': ' ', '&amp;lt;/s&amp;gt;': ' ',
            '&amp;lt;code&amp;gt;': '<code>', '&amp;lt;/code&amp;gt;': '</code>',
            '&amp;lt;a href=&amp;quot;': '<a href="', '&amp;lt;/a&amp;gt;': '</a>',
            '&amp;lt;blockquote&amp;gt;': '<blockquote>', '&amp;lt;/blockquote&amp;gt;': '</blockquote>',
            '&amp;quot;': '"', '&amp;amp;': '&'
        }
        
        for escaped, original in html_tags.items():
            text = text.replace(escaped, original)
    
    button = data.get('broadcast_button') if add_button else None
    # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    kb = InlineKeyboardMarkup(inline_keyboard=[
    
    [InlineKeyboardButton(text='–¥–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º', callback_data='bc_confirm')],
        [InlineKeyboardButton(text='–æ—Ç–º–µ–Ω–∞', callback_data='bc_cancel')]
    
    ])
    preview_kb = None
    
    if button:
        preview_kb = InlineKeyboardMarkup(inline_keyboard=[
    
    [InlineKeyboardButton(text=button['text'], url=button['url'])]
        ])
    try:
        await message_or_cb_msg.answer('–≤–æ—Ç —Ç–∞–∫ —ç—Ç–æ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å. –æ–∫?', reply_markup=preview_kb if preview_kb else None, parse_mode='HTML', link_preview_options=types.LinkPreviewOptions(is_disabled=True))
        
        photo_id = data.get('broadcast_photo_id')
        if photo_id:
            await bot.send_photo(message_or_cb_msg.chat.id, photo_id, caption=text, parse_mode='HTML', reply_markup=preview_kb if preview_kb else None)
        else:
            await message_or_cb_msg.answer(text, reply_markup=preview_kb if preview_kb else None, parse_mode='HTML', link_preview_options=types.LinkPreviewOptions(is_disabled=True))
    
    except Exception:
        await message_or_cb_msg.answer('–ø—Ä–µ–≤—å—é –Ω–µ –æ—Ç–¥–∞–ª–æ—Å—å, –Ω–æ —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ.')
    await message_or_cb_msg.answer('–ø–æ–¥—Ç–≤–µ—Ä–¥–∏ –æ—Ç–ø—Ä–∞–≤–∫—É', reply_markup=kb)
    
    await state.update_data(broadcast_preview_has_button=bool(button))
@dp.callback_query(lambda c: c.data == 'bc_confirm')
async def broadcast_confirm(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    
    if user_id not in ADMIN_IDS:
        await callback.answer()
        return
    data = await state.get_data()
    
    text = data.get('broadcast_text', '')
    
    # –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ HTML-—Ç–µ–≥–æ–≤ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    if text:
        # –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ HTML-—Ç–µ–≥–∏
        text = text.replace('&amp;lt;', '<').replace('&amp;gt;', '>')
        text = text.replace('&lt;', '<').replace('&gt;', '>')
        
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ HTML-—Ç–µ–≥–∏
        html_tags = {
            '&amp;lt;b&amp;gt;': '<b>', '&amp;lt;/b&amp;gt;': '</b>',
            '&amp;lt;i&amp;gt;': '<i>', '&amp;lt;/i&amp;gt;': '</i>',
            '&amp;lt;u&amp;gt;': '<u>', '&amp;lt;/u&amp;gt;': '</u>',
            '&amp;lt;s&amp;gt;': ' ', '&amp;lt;/s&amp;gt;': ' ',
            '&amp;lt;code&amp;gt;': '<code>', '&amp;lt;/code&amp;gt;': '</code>',
            '&amp;lt;a href=&amp;quot;': '<a href="', '&amp;lt;/a&amp;gt;': '</a>',
            '&amp;lt;blockquote&amp;gt;': '<blockquote>', '&amp;lt;/blockquote&amp;gt;': '</blockquote>',
            '&amp;quot;': '"', '&amp;amp;': '&'
        }
        
        for escaped, original in html_tags.items():
            text = text.replace(escaped, original)
    
    has_button = data.get('broadcast_preview_has_button', False)
    button = data.get('broadcast_button') if has_button else None
    
    chosen_target = data.get('broadcast_target')
    target_mode = 'dm' if chosen_target == 'bc_target_dm' else 'chats'
    await callback.message.edit_text('–æ–∫, –æ—Ç–ø—Ä–∞–≤–ª—è—é –≤—Å–µ–º. —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.')
    await callback.answer()
    
    # —Å–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
    if target_mode == 'dm':
        recipients = [int(uid) for uid in users.keys()]
    
    else:
        recipients = list(bot_chats)
    
    # –∏—Å–∫–ª—é—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ "–∫—Ä–æ–º–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ"
        if chosen_target == 'bc_target_chats_ex_main':
            global MAIN_CHAT_ID
            try:
                if MAIN_CHAT_ID is None and MAIN_CHAT_USERNAME:
                    chat = await bot.get_chat(f"@{MAIN_CHAT_USERNAME}")
                    MAIN_CHAT_ID = int(chat.id)
            except Exception:
                pass
            if MAIN_CHAT_ID is not None:
                recipients = [cid for cid in recipients if int(cid) != int(MAIN_CHAT_ID)]
    total = len(recipients)
    
    sent = 0
    failed = 0
    
    kb = None
    if button:
        kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text=button['text'], url=button['url'])]])
    
    # —à–ª—ë–º –ø–∞—á–∫–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ —Å–ª–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç—ã
    for idx, uid in enumerate(recipients):
        try:
            photo_id = data.get('broadcast_photo_id')
            if photo_id:
                await bot.send_photo(int(uid), photo_id, caption=text, parse_mode='HTML', reply_markup=kb)
            else:
                await bot.send_message(int(uid), text, parse_mode='HTML', reply_markup=kb, link_preview_options=types.LinkPreviewOptions(is_disabled=True))
            sent += 1
        except Exception:
            failed += 1
        # –ª—ë–≥–∫–∞—è –ø–∞—É–∑–∞ –∫–∞–∂–¥—ã–µ 25 —Å–æ–æ–±—â–µ–Ω–∏–π
        if (idx + 1) % 25 == 0:
            try:
                await callback.message.edit_text(f'–æ—Ç–ø—Ä–∞–≤–ª—è—é... {sent}/{total}, –æ—à–∏–±–æ–∫: {failed}')
            except Exception:
                pass
            await asyncio.sleep(0.5)
    
    summary = f'–≥–æ—Ç–æ–≤–æ. –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}/{total}, –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed}'
    
    try:
        await callback.message.edit_text(summary)
    except Exception:
        await bot.send_message(user_id, summary)
    await state.clear()
@dp.message(AdminState.waiting_for_warn_reason)
async def warn_reason_entered(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.chat.type != 'private':
        return
    
    user_id = message.from_user.id
    
    if user_id not in ADMIN_IDS:
        return
    reason = message.text.strip()
    
    data = await state.get_data()
    target_user_id = data.get('target_user_id')
    
    await message.answer('–Ω–∞–ø–∏—à–∏ —Å—Ä–æ–∫ –≤–∞—Ä–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1 –¥–µ–Ω—å, 1 –Ω–µ–¥–µ–ª—è, –Ω–∞–≤—Å–µ–≥–¥–∞)')
    await state.update_data(warn_reason=reason)
    
    await state.set_state(AdminState.waiting_for_warn_duration)

@dp.message(AdminState.waiting_for_warn_duration)
async def warn_duration_entered(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.chat.type != 'private':
        return
    
    user_id = message.from_user.id
    
    user_id_str = str(user_id)
    
    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    if user_id not in ADMIN_IDS:
        return
    
    duration = message.text.strip()
    
    data = await state.get_data()
    target_user_id = data.get('target_user_id')
    
    reason = data.get('warn_reason')
    
    # –í—ã–¥–∞—ë–º –≤–∞—Ä–Ω
    success, message_text = await give_warn(target_user_id, reason, duration)
    
    await message.answer(message_text)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
    markup = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
    
    [KeyboardButton(text='–≤—ã–¥–∞—Ç—å –≤–∞—Ä–Ω ‚ö†Ô∏è'), KeyboardButton(text='–≤—ã–¥–∞—Ç—å –±–∞–Ω üö´')],
        [KeyboardButton(text='—Å–Ω—è—Ç—å –≤–∞—Ä–Ω ‚úÖ'), KeyboardButton(text='—Å–Ω—è—Ç—å –±–∞–Ω ‚úÖ')],
    
    [KeyboardButton(text='–∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞—Ç—å –±–∞–ª–∞–Ω—Å üí∞'), KeyboardButton(text='–≤—ã–¥–∞—Ç—å –¥–µ–Ω—å–≥–∏ üíµ')],
        [KeyboardButton(text='–ø—Ä–æ–±–∏—Ç—å —é–∑ üîç'), KeyboardButton(text='–ø—Ä–æ—Å–º–æ—Ç—Ä –ë–î üìä')],
    
    [KeyboardButton(text='—ç–∫—Å–ø–æ—Ä—Ç –ë–î üìã'), KeyboardButton(text='–æ—á–∏—Å—Ç–∏—Ç—å –ë–î üóëÔ∏è')],
        [KeyboardButton(text='–Ω–∞–∑–∞–¥ ‚¨ÖÔ∏è')]
    
    ])
    await message.answer('üîß –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', reply_markup=markup)
    
    await state.clear()

@dp.message(AdminState.waiting_for_ban_date)
async def ban_date_entered(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.chat.type != 'private':
        return
    
    user_id = message.from_user.id
    
    user_id_str = str(user_id)
    
    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    if user_id not in ADMIN_IDS:
        return
    
    ban_date = message.text.strip()
    
    data = await state.get_data()
    target_user_id = data.get('target_user_id')
    
    # –í—ã–¥–∞—ë–º –±–∞–Ω
    success, message_text = await give_ban_simple(target_user_id, ban_date)
    
    await message.answer(message_text)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
    markup = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
    
    [KeyboardButton(text='–≤—ã–¥–∞—Ç—å –≤–∞—Ä–Ω ‚ö†Ô∏è'), KeyboardButton(text='–≤—ã–¥–∞—Ç—å –±–∞–Ω üö´')],
        [KeyboardButton(text='—Å–Ω—è—Ç—å –≤–∞—Ä–Ω ‚úÖ'), KeyboardButton(text='—Å–Ω—è—Ç—å –±–∞–Ω ‚úÖ')],
    
    [KeyboardButton(text='–∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞—Ç—å –±–∞–ª–∞–Ω—Å üí∞'), KeyboardButton(text='–≤—ã–¥–∞—Ç—å –¥–µ–Ω—å–≥–∏ üíµ')],
        [KeyboardButton(text='–ø—Ä–æ–±–∏—Ç—å —é–∑ üîç'), KeyboardButton(text='–ø—Ä–æ—Å–º–æ—Ç—Ä –ë–î üìä')],
    
    [KeyboardButton(text='—ç–∫—Å–ø–æ—Ä—Ç –ë–î üìã'), KeyboardButton(text='–æ—á–∏—Å—Ç–∏—Ç—å –ë–î üóëÔ∏è')],
        [KeyboardButton(text='–Ω–∞–∑–∞–¥ ‚¨ÖÔ∏è')]
    
    ])
    await message.answer('üîß –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', reply_markup=markup)
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–±–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞"
@dp.callback_query(lambda c: c.data == 'ban_forever')
async def ban_forever_callback(callback_query: types.CallbackQuery, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if callback_query.message.chat.type != 'private':
        return
    
    user_id = callback_query.from_user.id
    
    if user_id not in ADMIN_IDS:
        return
    
    data = await state.get_data()
    
    target_user_id = data.get('target_user_id')
    
    # –í—ã–¥–∞—ë–º –±–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞
    success, message_text = await give_ban_simple(target_user_id, '–Ω–∞–≤—Å–µ–≥–¥–∞')
    
    await callback_query.message.answer(message_text)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
    markup = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
    
    [KeyboardButton(text='–≤—ã–¥–∞—Ç—å –≤–∞—Ä–Ω ‚ö†Ô∏è'), KeyboardButton(text='–≤—ã–¥–∞—Ç—å –±–∞–Ω üö´')],
        [KeyboardButton(text='—Å–Ω—è—Ç—å –≤–∞—Ä–Ω ‚úÖ'), KeyboardButton(text='—Å–Ω—è—Ç—å –±–∞–Ω ‚úÖ')],
    
    [KeyboardButton(text='–∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞—Ç—å –±–∞–ª–∞–Ω—Å üí∞'), KeyboardButton(text='–≤—ã–¥–∞—Ç—å –¥–µ–Ω—å–≥–∏ üíµ')],
        [KeyboardButton(text='–ø—Ä–æ–±–∏—Ç—å —é–∑ üîç'), KeyboardButton(text='–ø—Ä–æ—Å–º–æ—Ç—Ä –ë–î üìä')],
    
    [KeyboardButton(text='—ç–∫—Å–ø–æ—Ä—Ç –ë–î üìã'), KeyboardButton(text='–æ—á–∏—Å—Ç–∏—Ç—å –ë–î üóëÔ∏è')],
        [KeyboardButton(text='–Ω–∞–∑–∞–¥ ‚¨ÖÔ∏è')]
    
    ])
    await callback_query.message.answer('üîß –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', reply_markup=markup)
    
    await state.clear()
    await callback_query.answer()

@dp.message(AdminState.waiting_for_ban_reason)
async def ban_reason_entered(message: types.Message, state: FSMContext):
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.chat.type != 'private':
        return
    
    user_id = message.from_user.id
    
    user_id_str = str(user_id)
    
    # —Å–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    if user_id not in ADMIN_IDS:
        return
    
    reason = message.text.strip()
    
    data = await state.get_data()
    target_user_id = data.get('target_user_id')
    
    await message.answer('–Ω–∞–ø–∏—à–∏ —Å—Ä–æ–∫ –±–∞–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1 –¥–µ–Ω—å, 1 –Ω–µ–¥–µ–ª—è, –Ω–∞–≤—Å–µ–≥–¥–∞)', reply_markup=ReplyKeyboardRemove())
    await state.update_data(ban_reason=reason)
    
    await state.set_state(AdminState.waiting_for_ban_duration)

@dp.message(AdminState.waiting_for_ban_duration)
async def ban_duration_entered(message: types.Message, state: FSMContext):
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.chat.type != 'private':
        return
    
    user_id = message.from_user.id
    
    user_id_str = str(user_id)
    
    # —Å–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    if user_id not in ADMIN_IDS:
        return
    
    duration = message.text.strip()
    
    data = await state.get_data()
    target_user_id = data.get('target_user_id')
    
    reason = data.get('ban_reason')
    
    # –í—ã–¥–∞—ë–º –±–∞–Ω
    success, message_text = await give_ban(target_user_id, reason, duration)
    
    await message.answer(message_text)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
    markup = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
    
    [KeyboardButton(text='–≤—ã–¥–∞—Ç—å –≤–∞—Ä–Ω ‚ö†Ô∏è'), KeyboardButton(text='–≤—ã–¥–∞—Ç—å –±–∞–Ω üö´')],
        [KeyboardButton(text='—Å–Ω—è—Ç—å –≤–∞—Ä–Ω ‚úÖ'), KeyboardButton(text='—Å–Ω—è—Ç—å –±–∞–Ω ‚úÖ')],
    
    [KeyboardButton(text='–∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞—Ç—å –±–∞–ª–∞–Ω—Å üí∞'), KeyboardButton(text='–≤—ã–¥–∞—Ç—å –¥–µ–Ω—å–≥–∏ üíµ')],
        [KeyboardButton(text='–ø—Ä–æ–±–∏—Ç—å —é–∑ üîç'), KeyboardButton(text='–ø—Ä–æ—Å–º–æ—Ç—Ä –ë–î üìä')],
    
    [KeyboardButton(text='—ç–∫—Å–ø–æ—Ä—Ç –ë–î üìã'), KeyboardButton(text='–æ—á–∏—Å—Ç–∏—Ç—å –ë–î üóëÔ∏è')],
        [KeyboardButton(text='–Ω–∞–∑–∞–¥ ‚¨ÖÔ∏è')]
    
    ])
    await message.answer('üîß –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', reply_markup=markup)
    
    await state.clear()

@dp.message(AdminState.waiting_for_unwarn_count)
async def unwarn_count_entered(message: types.Message, state: FSMContext):
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.chat.type != 'private':
        return
    
    user_id = message.from_user.id
    
    user_id_str = str(user_id)
    
    # —Å–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    if user_id not in ADMIN_IDS:
        return
    
    count = message.text.strip()
    
    data = await state.get_data()
    target_user_id = data.get('target_user_id')
    
    # –°–Ω–∏–º–∞–µ–º –≤–∞—Ä–Ω(—ã)
    success, message_text = await remove_warn(target_user_id, count)
    
    await message.answer(message_text)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
    markup = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
    
    [KeyboardButton(text='–≤—ã–¥–∞—Ç—å –≤–∞—Ä–Ω ‚ö†Ô∏è'), KeyboardButton(text='–≤—ã–¥–∞—Ç—å –±–∞–Ω üö´')],
        [KeyboardButton(text='—Å–Ω—è—Ç—å –≤–∞—Ä–Ω ‚úÖ'), KeyboardButton(text='—Å–Ω—è—Ç—å –±–∞–Ω ‚úÖ')],
    
    [KeyboardButton(text='–∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞—Ç—å –±–∞–ª–∞–Ω—Å üí∞'), KeyboardButton(text='–≤—ã–¥–∞—Ç—å –¥–µ–Ω—å–≥–∏ üíµ')],
        [KeyboardButton(text='–ø—Ä–æ–±–∏—Ç—å —é–∑ üîç'), KeyboardButton(text='–ø—Ä–æ—Å–º–æ—Ç—Ä –ë–î üìä')],
    
    [KeyboardButton(text='—ç–∫—Å–ø–æ—Ä—Ç –ë–î üìã')],
        [KeyboardButton(text='–Ω–∞–∑–∞–¥ ‚¨ÖÔ∏è')]
    
    ])
    await message.answer('üîß –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', reply_markup=markup)
    
    await state.clear()

@dp.message(AdminState.waiting_for_balance_amount)
async def balance_amount_entered(message: types.Message, state: FSMContext):
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.chat.type != 'private':
        return
    
    user_id = message.from_user.id
    
    user_id_str = str(user_id)
    
    # —Å–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    if user_id not in ADMIN_IDS:
        return
    
    amount_text = message.text.strip()
    
    data = await state.get_data()
    target_user_id = data.get('target_user_id')
    
    # –ü–∞—Ä—Å–∏–º —Å—É–º–º—É
    if amount_text.lower() == '–≤—Å–µ':
        amount = -1
    
    else:
        try:
            amount = parse_amount(amount_text)
        except:
            await message.answer('–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã')
            await state.clear()
            return
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—É–º–º–∞ –±–æ–ª—å—à–µ 0 (–∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥—ã "–≤—Å–µ")
    if amount != -1 and amount <= 0:
        await message.answer('—Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0')
        await state.clear()
        return
    
    # –ê–Ω–Ω—É–ª–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å
    success, message_text = await annul_balance(target_user_id, amount)
    
    await message.answer(message_text)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
    markup = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
    
    [KeyboardButton(text='–≤—ã–¥–∞—Ç—å –≤–∞—Ä–Ω ‚ö†Ô∏è'), KeyboardButton(text='–≤—ã–¥–∞—Ç—å –±–∞–Ω üö´')],
        [KeyboardButton(text='—Å–Ω—è—Ç—å –≤–∞—Ä–Ω ‚úÖ'), KeyboardButton(text='—Å–Ω—è—Ç—å –±–∞–Ω ‚úÖ')],
    
    [KeyboardButton(text='–∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞—Ç—å –±–∞–ª–∞–Ω—Å üí∞'), KeyboardButton(text='–≤—ã–¥–∞—Ç—å –¥–µ–Ω—å–≥–∏ üíµ')],
        [KeyboardButton(text='–ø—Ä–æ–±–∏—Ç—å —é–∑ üîç'), KeyboardButton(text='–ø—Ä–æ—Å–º–æ—Ç—Ä –ë–î üìä')],
    
    [KeyboardButton(text='—ç–∫—Å–ø–æ—Ä—Ç –ë–î üìã'), KeyboardButton(text='–æ—á–∏—Å—Ç–∏—Ç—å –ë–î üóëÔ∏è')],
        [KeyboardButton(text='–Ω–∞–∑–∞–¥ ‚¨ÖÔ∏è')]
    
    ])
    await message.answer('üîß –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', reply_markup=markup)
    
    await state.clear()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–∞—Ä–Ω–∞–º–∏/–±–∞–Ω–∞–º–∏
async def give_warn(target_user_id: int, reason: str, duration: str):
    """–í—ã–¥–∞—ë—Ç –≤–∞—Ä–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    if target_user_id not in users:
        return False, "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    user_data = users[target_user_id]
    
    current_warns = user_data.get('warns', 0)
    user_data['warns'] = current_warns + 1
    user_data['warn_reason'] = reason
    user_data['warn_date'] = str(datetime.datetime.now())
    user_data['warn_duration'] = duration
    
    save_users()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        await bot.send_message(
            target_user_id,
            f"üö® <b>—Ç–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ!</b>\n\n"
            f"‚ö†Ô∏è <b>–ø—Ä–∏—á–∏–Ω–∞:</b> {reason}\n"
            f"‚è∞ <b>—Å—Ä–æ–∫:</b> {duration}\n"
            f"üìä <b>–≤—Å–µ–≥–æ –≤–∞—Ä–Ω–æ–≤:</b> {user_data['warns']}\n\n"
            f"üí¨ –æ–±–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞–∫–∞–∑–∞–Ω–∏–µ –º–æ–∂–Ω–æ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ\n"
            f"üîó <b>–ø–æ–¥–¥–µ—Ä–∂–∫–∞:</b> @daisicxTp_bot",
            parse_mode='HTML'
    
    )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞—Ä–Ω–µ: {e}")
    
    return True, f"–≤–∞—Ä–Ω –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_data['nick']}"

async def give_ban(target_user_id: int, reason: str, duration: str):
    """–í—ã–¥–∞—ë—Ç –±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    if target_user_id not in users:
        return False, "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    user_data = users[target_user_id]
    
    user_data['banned'] = True
    user_data['ban_reason'] = reason
    user_data['ban_date'] = str(datetime.datetime.now())
    user_data['ban_duration'] = duration
    
    save_users()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        await bot.send_message(
            target_user_id,
            f"ÔøΩÔøΩ <b>—Ç–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π!</b>\n\n"
            f"‚ùå <b>–ø—Ä–∏—á–∏–Ω–∞:</b> {reason}\n"
            f"‚è∞ <b>—Å—Ä–æ–∫:</b> {duration}\n"
            f"üìÖ <b>–¥–∞—Ç–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:</b> {datetime.datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
            f"üí¨ –æ–±–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞–∫–∞–∑–∞–Ω–∏–µ –º–æ–∂–Ω–æ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ\n"
            f"üîó <b>–ø–æ–¥–¥–µ—Ä–∂–∫–∞:</b> @daisicxTp_bot",
            parse_mode='HTML'
    
    )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–∞–Ω–µ: {e}")
    
    return True, f"–±–∞–Ω –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_data['nick']}"

async def remove_warn(target_user_id: int, count: str):
    """–°–Ω–∏–º–∞–µ—Ç –≤–∞—Ä–Ω(—ã) —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if target_user_id not in users:
        return False, "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    user_data = users[target_user_id]
    
    current_warns = user_data.get('warns', 0)
    
    if count == '–≤—Å–µ':
        removed_count = current_warns
        user_data['warns'] = 0
    else:
        try:
            removed_count = int(count)
            user_data['warns'] = max(0, current_warns - removed_count)
        except ValueError:
            return False, "–Ω–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–Ω–æ–≤"
    
    save_users()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        await bot.send_message(
            target_user_id,
            f"‚úÖ <b>—Å —Ç–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å–Ω—è—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ!</b>\n\n"
            f"üéâ <b>—Å–Ω—è—Ç–æ –≤–∞—Ä–Ω–æ–≤:</b> {count}\n"
            f"üìä <b>–æ—Å—Ç–∞–ª–æ—Å—å –≤–∞—Ä–Ω–æ–≤:</b> {user_data['warns']}\n"
            f"üìÖ <b>–¥–∞—Ç–∞ —Å–Ω—è—Ç–∏—è:</b> {datetime.datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
            f"üòä —Ç–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å —Å–ø–æ–∫–æ–π–Ω–æ –∏–≥—Ä–∞—Ç—å!\n"
            f"üôè –∏–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–æ",
            parse_mode='HTML'
    
    )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–Ω—è—Ç–∏–∏ –≤–∞—Ä–Ω–∞: {e}")
    
    return True, f"—Å–Ω—è—Ç–æ {removed_count} –≤–∞—Ä–Ω(–æ–≤) —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data['nick']}"

async def remove_ban(target_user_id: int):
    """–°–Ω–∏–º–∞–µ—Ç –±–∞–Ω —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if target_user_id not in users:
        return False, "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    user_data = users[target_user_id]
    
    if not user_data.get('banned', False):
        return False, "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–∞–Ω–µ–Ω"
    
    user_data['banned'] = False
    user_data.pop('ban_reason', None)
    user_data.pop('ban_date', None)
    user_data.pop('ban_duration', None)
    
    save_users()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        await bot.send_message(
            target_user_id,
            f"‚úÖ <b>—Å —Ç–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å–Ω—è—Ç–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞!</b>\n\n"
            f"üéâ <b>—Å—Ç–∞—Ç—É—Å:</b> —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\n"
            f"üìÖ <b>–¥–∞—Ç–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:</b> {datetime.datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
            f"üòä —Ç–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å —Å–ø–æ–∫–æ–π–Ω–æ –∏–≥—Ä–∞—Ç—å!\n"
            f"üôè –∏–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–æ",
            parse_mode='HTML'
    
    )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–Ω—è—Ç–∏–∏ –±–∞–Ω–∞: {e}")
    
    return True, f"–±–∞–Ω —Å–Ω—è—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data['nick']}"

async def annul_balance(target_user_id: int, amount: int):
    """–ê–Ω–Ω—É–ª–∏—Ä—É–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if target_user_id not in users:
        return False, "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    user_data = users[target_user_id]
    
    current_balance = user_data.get('balance', 0)
    
    if amount == -1:  # –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–µ—Å—å –±–∞–ª–∞–Ω—Å
        user_data['balance'] = 0
        annuled_amount = current_balance
    
    else:
        user_data['balance'] = max(0, current_balance - amount)
        annuled_amount = min(amount, current_balance)
    
    save_users()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        await bot.send_message(
            target_user_id,
            f"üí∞ <b>—Å —Ç–≤–æ–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å–Ω—è—Ç—ã —Å—Ä–µ–¥—Å—Ç–≤–∞!</b>\n\n"
            f"‚ùå <b>—Å–Ω—è—Ç–æ:</b> ${format_money(annuled_amount)}\n"
            f"üí≥ <b>–Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:</b> ${format_money(user_data['balance'])}\n"
            f"üìÖ <b>–¥–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏:</b> {datetime.datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
            f"üí¨ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É\n"
            f"üîó <b>–ø–æ–¥–¥–µ—Ä–∂–∫–∞:</b> @daisicxTp_bot",
            parse_mode='HTML'
    
    )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
    
    return True, f"–∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–æ ${format_money(annuled_amount)} —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data['nick']}"
# –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
async def give_warn_simple(target_user_id: int):
    """–í—ã–¥–∞—ë—Ç –≤–∞—Ä–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–ø—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è)"""
    if target_user_id not in users:
        return False, "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    user_data = users[target_user_id]
    
    current_warns = user_data.get('warns', 0)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –≤–∞—Ä–Ω–æ–≤
    if current_warns >= 3:
        # –ï—Å–ª–∏ 3 –≤–∞—Ä–Ω–∞ - –±–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞
        user_data['banned'] = True
        user_data['ban_reason'] = '–ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –≤–∞—Ä–Ω–æ–≤ (3/3)'
        user_data['ban_date'] = str(datetime.datetime.now())
        user_data['ban_duration'] = '–Ω–∞–≤—Å–µ–≥–¥–∞'
        
        save_users()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –±–∞–Ω–µ
        try:
            markup = InlineKeyboardMarkup(inline_keyboard=[
    
    [InlineKeyboardButton(text='üí¨ –æ–±–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞–∫–∞–∑–∞–Ω–∏–µ', url='https://t.me/daisicxTp_bot')]
            ])
            await bot.send_message(
                target_user_id,
                f"üö´ <b>—Ç–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞!</b>\n\n"
                f"‚ùå <b>–ø—Ä–∏—á–∏–Ω–∞:</b> –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –≤–∞—Ä–Ω–æ–≤ (3/3)\n"
                f"üìÖ <b>–¥–∞—Ç–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:</b> {datetime.datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
                f"üí¨ –æ–±–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞–∫–∞–∑–∞–Ω–∏–µ –º–æ–∂–Ω–æ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ\n"
                f"üîó <b>–ø–æ–¥–¥–µ—Ä–∂–∫–∞:</b> @daisicxTp_bot",
                parse_mode='HTML',
    
    reply_markup=markup
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–∞–Ω–µ: {e}")
        
        return True, f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data['nick']} –∑–∞–±–∞–Ω–µ–Ω –Ω–∞–≤—Å–µ–≥–¥–∞ –∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –≤–∞—Ä–Ω–æ–≤"
    
    # –í—ã–¥–∞—ë–º –≤–∞—Ä–Ω
    user_data['warns'] = current_warns + 1
    user_data['warn_date'] = str(datetime.datetime.now())
    
    save_users()
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        markup = InlineKeyboardMarkup(inline_keyboard=[
    
    [InlineKeyboardButton(text='üí¨ –æ–±–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞–∫–∞–∑–∞–Ω–∏–µ', url='https://t.me/daisicxTp_bot')]
        ])
        await bot.send_message(
            target_user_id,
            f"‚ö†Ô∏è <b>—Ç–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ!</b>\n\n"
            f"üìä <b>–≤—Å–µ–≥–æ –≤–∞—Ä–Ω–æ–≤:</b> {user_data['warns']}/3\n"
            f"üìÖ <b>–¥–∞—Ç–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:</b> {datetime.datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
            f"‚ö†Ô∏è <b>–≤–Ω–∏–º–∞–Ω–∏–µ:</b> –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ 3-–≥–æ –≤–∞—Ä–Ω–∞ –∞–∫–∫–∞—É–Ω—Ç –±—É–¥–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞!\n\n"
            f"üí¨ –æ–±–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞–∫–∞–∑–∞–Ω–∏–µ –º–æ–∂–Ω–æ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ\n"
            f"üîó <b>–ø–æ–¥–¥–µ—Ä–∂–∫–∞:</b> @daisicxTp_bot",
            parse_mode='HTML',
    
    reply_markup=markup
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞—Ä–Ω–µ: {e}")
    
    return True, f"–≤–∞—Ä–Ω –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_data['nick']} ({user_data['warns']}/3)"

async def give_ban_simple(target_user_id: int, ban_date: str):
    """–í—ã–¥–∞—ë—Ç –±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–ø—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è)"""
    if target_user_id not in users:
        return False, "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    user_data = users[target_user_id]
    
    user_data['banned'] = True
    user_data['ban_reason'] = '–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π'
    user_data['ban_date'] = str(datetime.datetime.now())
    user_data['ban_duration'] = ban_date
    
    save_users()
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        markup = InlineKeyboardMarkup(inline_keyboard=[
    
    [InlineKeyboardButton(text='üí¨ –æ–±–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞–∫–∞–∑–∞–Ω–∏–µ', url='https://t.me/daisicxTp_bot')]
        ])
        await bot.send_message(
            target_user_id,
            f"üö´ <b>—Ç–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π!</b>\n\n"
            f"‚è∞ <b>—Å—Ä–æ–∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:</b> {ban_date}\n"
            f"üìÖ <b>–¥–∞—Ç–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:</b> {datetime.datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
            f"üí¨ –æ–±–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞–∫–∞–∑–∞–Ω–∏–µ –º–æ–∂–Ω–æ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ\n"
            f"üîó <b>–ø–æ–¥–¥–µ—Ä–∂–∫–∞:</b> @daisicxTp_bot",
            parse_mode='HTML',
    
    reply_markup=markup
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–∞–Ω–µ: {e}")
    
    return True, f"–±–∞–Ω –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_data['nick']} –¥–æ {ban_date}"

async def remove_warn_simple(target_user_id: int):
    """–°–Ω–∏–º–∞–µ—Ç –≤–∞—Ä–Ω —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è)"""
    if target_user_id not in users:
        return False, "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    user_data = users[target_user_id]
    
    current_warns = user_data.get('warns', 0)
    
    if current_warns <= 0:
        return False, "—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤–∞—Ä–Ω–æ–≤"
    
    user_data['warns'] = current_warns - 1
    save_users()
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await bot.send_message(
            target_user_id,
            f"‚úÖ <b>—Å —Ç–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å–Ω—è—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ!</b>\n\n"
            f"üìä <b>–æ—Å—Ç–∞–ª–æ—Å—å –≤–∞—Ä–Ω–æ–≤:</b> {user_data['warns']}/3\n"
            f"üìÖ <b>–¥–∞—Ç–∞ —Å–Ω—è—Ç–∏—è:</b> {datetime.datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
            f"üòä —Ç–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å —Å–ø–æ–∫–æ–π–Ω–æ –∏–≥—Ä–∞—Ç—å!\n"
            f"üôè –∏–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–æ",
            parse_mode='HTML'
    
    )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–Ω—è—Ç–∏–∏ –≤–∞—Ä–Ω–∞: {e}")
    
    return True, f"—Å–Ω—è—Ç 1 –≤–∞—Ä–Ω —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data['nick']} ({user_data['warns']}/3)"

async def remove_ban_simple(target_user_id: int):
    """–°–Ω–∏–º–∞–µ—Ç –±–∞–Ω —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è)"""
    if target_user_id not in users:
        return False, "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    user_data = users[target_user_id]
    
    if not user_data.get('banned', False):
        return False, "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–∞–Ω–µ–Ω"
    
    user_data['banned'] = False
    user_data.pop('ban_reason', None)
    user_data.pop('ban_date', None)
    user_data.pop('ban_duration', None)
    
    save_users()
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await bot.send_message(
            target_user_id,
            f"‚úÖ <b>—Å —Ç–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å–Ω—è—Ç–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞!</b>\n\n"
            f"üéâ <b>—Å—Ç–∞—Ç—É—Å:</b> —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\n"
            f"üìÖ <b>–¥–∞—Ç–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:</b> {datetime.datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
            f"üòä —Ç–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å —Å–ø–æ–∫–æ–π–Ω–æ –∏–≥—Ä–∞—Ç—å!\n"
            f"üôè –∏–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–æ",
            parse_mode='HTML'
    
    )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–Ω—è—Ç–∏–∏ –±–∞–Ω–∞: {e}")
    
    return True, f"–±–∞–Ω —Å–Ω—è—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data['nick']}"

async def annul_balance_simple(target_user_id: int):
    """–ê–Ω–Ω—É–ª–∏—Ä—É–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è)"""
    if target_user_id not in users:
        return False, "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    user_data = users[target_user_id]
    
    current_balance = user_data.get('balance', 0)
    
    user_data['balance'] = 0
    save_users()
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        markup = InlineKeyboardMarkup(inline_keyboard=[
    
    [InlineKeyboardButton(text='üí¨ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É', url='https://t.me/daisicxTp_bot')]
        ])
        await bot.send_message(
            target_user_id,
            f"üí∞ <b>—Å —Ç–≤–æ–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å–Ω—è—Ç—ã –≤—Å–µ —Å—Ä–µ–¥—Å—Ç–≤–∞!</b>\n\n"
            f"‚ùå <b>—Å–Ω—è—Ç–æ:</b> ${format_money(current_balance)}\n"
            f"üí≥ <b>–Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:</b> $0\n"
            f"üìÖ <b>–¥–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏:</b> {datetime.datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
            f"üí¨ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É\n"
            f"üîó <b>–ø–æ–¥–¥–µ—Ä–∂–∫–∞:</b> @daisicxTp_bot",
            parse_mode='HTML',
    
    reply_markup=markup
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
    
    return True, f"–∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data['nick']} (${format_money(current_balance)})"

# === —Ç–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ä—É–ª–µ—Ç–∫–∏ ===
@dp.message(Command('test_roulette'))
async def test_roulette_images(message: types.Message):
    """—Ç–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ä—É–ª–µ—Ç–∫–∏"""
    user_id = message.from_user.id
    
    user_id_str = str(user_id)    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS:
        await message.answer('—É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ')
        return
    
    await message.answer('üß™ –¢–µ—Å—Ç–∏—Ä—É—é —Å–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ä—É–ª–µ—Ç–∫–∏...')
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫—Ä–∞—Å–Ω–æ–≥–æ —á–∏—Å–ª–∞
        red_image = create_roulette_result_image(7, 'red', '–∫—Ä–∞—Å–Ω–æ–µ', 1000, True, 2, 2000)
        
        if red_image and os.path.exists(red_image):
            await bot.send_photo(
                message.chat.id,
                types.FSInputFile(red_image),
                caption="‚úÖ –¢–µ—Å—Ç –∫—Ä–∞—Å–Ω–æ–≥–æ —á–∏—Å–ª–∞ (7)"
            )
            os.remove(red_image)
        else:
            await message.answer('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫—Ä–∞—Å–Ω–æ–≥–æ —á–∏—Å–ª–∞')
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —á–µ—Ä–Ω–æ–≥–æ —á–∏—Å–ª–∞
        black_image = create_roulette_result_image(8, 'black', '—á–µ—Ä–Ω–æ–µ', 1000, True, 2, 2000)
        
        if black_image and os.path.exists(black_image):
            await bot.send_photo(
                message.chat.id,
                types.FSInputFile(black_image),
                caption="‚úÖ –¢–µ—Å—Ç —á–µ—Ä–Ω–æ–≥–æ —á–∏—Å–ª–∞ (8)"
            )
            os.remove(black_image)
        else:
            await message.answer('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —á–µ—Ä–Ω–æ–≥–æ —á–∏—Å–ª–∞')
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∑–µ—Ä–æ
        zero_image = create_roulette_result_image(0, 'green', '–∑–µ—Ä–æ', 1000, True, 36, 36000)
        
        if zero_image and os.path.exists(zero_image):
            await bot.send_photo(
                message.chat.id,
                types.FSInputFile(zero_image),
                caption="‚úÖ –¢–µ—Å—Ç –∑–µ—Ä–æ (0)"
            )
            os.remove(zero_image)
        else:
            await message.answer('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∑–µ—Ä–æ')
        
        await message.answer('üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!')
        
    except Exception as e:
        await message.answer(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}')

# === callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞–ª–æ–≥–∞ –∏ –∫–æ–º–∏—Å—Å–∏–π ===
@dp.callback_query(lambda c: c.data == 'wealth_tax_info')
async def wealth_tax_info_callback(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–ª–æ–≥–µ –Ω–∞ –±–æ–≥–∞—Ç—Å—Ç–≤–æ"""
    user_id = callback.from_user.id
    
    if user_id not in ADMIN_IDS:
        await callback.answer('—É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏', show_alert=True)
        return
    
    await callback.message.edit_text(
        f'üìä <b>–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–ª–æ–≥–µ –Ω–∞ –±–æ–≥–∞—Ç—Å—Ç–≤–æ</b>\n\n'
        f'üí∞ <b>—Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç:</b> {WEALTH_TAX_PERCENT}%\n'
        f'‚è∞ <b>–ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å:</b> –∫–∞–∂–¥—ã–π —á–∞—Å\n'
        f'üë• <b>–ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫:</b> —Ç–æ–ø-15 –∏–≥—Ä–æ–∫–∞–º\n'
        f'üí∏ <b>–Ω–∞–ª–æ–≥ –±–µ—Ä–µ—Ç—Å—è —Å:</b> —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞\n\n'
        f'üí° <b>–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>\n'
        f'‚Ä¢ –∫–∞–∂–¥—ã–π —á–∞—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞–ª–æ–≥\n'
        f'‚Ä¢ –Ω–∞–ª–æ–≥ = {WEALTH_TAX_PERCENT}% –æ—Ç –±–∞–ª–∞–Ω—Å–∞\n'
    
    f'‚Ä¢ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –∏–≥—Ä–æ–∫–∞–º\n'
        f'‚Ä¢ –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º',
        parse_mode='HTML',
    
    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='‚¨ÖÔ∏è –Ω–∞–∑–∞–¥', callback_data='wealth_tax_back')]
    
    ])
    )

@dp.callback_query(lambda c: c.data == 'wealth_tax_write')
async def wealth_tax_write_callback(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–∞–ª–æ–≥–∞"""
    user_id = callback.from_user.id
    
    if user_id not in ADMIN_IDS:
        await callback.answer('—É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏', show_alert=True)
        return
    
    await callback.message.edit_text(
        'üìù <b>–∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –Ω–∞–ª–æ–≥–∞</b>\n\n'
        f'üí∞ <b>—Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç:</b> {WEALTH_TAX_PERCENT}%\n\n'
        '–Ω–∞–ø–∏—à–∏ –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç (–æ—Ç 1 –¥–æ 50):',
        parse_mode='HTML',
    
    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='‚ùå –æ—Ç–º–µ–Ω–∞', callback_data='wealth_tax_cancel')]
    
    ])
    )
    
    await state.set_state(AdminState.waiting_for_tax_percent)
    await callback.answer('–≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–∞–ª–æ–≥–∞', show_alert=True)

@dp.callback_query(lambda c: c.data == 'wealth_tax_cancel')
async def wealth_tax_cancel_callback(callback: types.CallbackQuery):
    """–û—Ç–º–µ–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –Ω–∞–ª–æ–≥–∞"""
    user_id = callback.from_user.id
    
    if user_id not in ADMIN_IDS:
        await callback.answer('—É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏', show_alert=True)
        return
    
    await callback.message.edit_text(
        '‚ùå <b>–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ª–æ–≥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n'
        f'üí∞ <b>—Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç:</b> {WEALTH_TAX_PERCENT}%',
        parse_mode='HTML'
    )
    await callback.answer('–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ª–æ–≥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞', show_alert=True)

@dp.callback_query(lambda c: c.data == 'transfer_commission_info')
async def transfer_commission_info_callback(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∏—Å—Å–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤"""
    user_id = callback.from_user.id
    
    if user_id not in ADMIN_IDS:
        await callback.answer('—É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏', show_alert=True)
        return
    
    await callback.message.edit_text(
        f'üìä <b>–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∏—Å—Å–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤</b>\n\n'
        f'üí∞ <b>—Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç:</b> {TRANSFER_COMMISSION_TOP20}%\n'
        f'üë• <b>–ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫:</b> —Ç–æ–ø-20 –∏–≥—Ä–æ–∫–∞–º\n'
        f'üí∏ <b>–∫–æ–º–∏—Å—Å–∏—è –±–µ—Ä–µ—Ç—Å—è —Å:</b> —Å—É–º–º—ã –ø–µ—Ä–µ–≤–æ–¥–∞\n\n'
        f'üí° <b>–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>\n'
        f'‚Ä¢ —Ç–æ–ª—å–∫–æ —Ç–æ–ø-20 –∏–≥—Ä–æ–∫–∏ –ø–ª–∞—Ç—è—Ç –∫–æ–º–∏—Å—Å–∏—é\n'
        f'‚Ä¢ –∫–æ–º–∏—Å—Å–∏—è = {TRANSFER_COMMISSION_TOP20}% –æ—Ç —Å—É–º–º—ã –ø–µ—Ä–µ–≤–æ–¥–∞\n'
    
    f'‚Ä¢ –ø–æ–ª—É—á–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç —Å—É–º–º—É –º–∏–Ω—É—Å –∫–æ–º–∏—Å—Å–∏—è\n'
        f'‚Ä¢ –æ–±—ã—á–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ –ø–µ—Ä–µ–≤–æ–¥—è—Ç –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏',
        parse_mode='HTML',
    
    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='‚¨ÖÔ∏è –Ω–∞–∑–∞–¥', callback_data='transfer_commission_back')]
    
    ])
    )

@dp.callback_query(lambda c: c.data == 'transfer_commission_write')
async def transfer_commission_write_callback(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –∫–æ–º–∏—Å—Å–∏–∏"""
    user_id = callback.from_user.id
    
    if user_id not in ADMIN_IDS:
        await callback.answer('—É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏', show_alert=True)
        return
    
    await callback.message.edit_text(
        'üìù <b>–∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∫–æ–º–∏—Å—Å–∏–∏</b>\n\n'
        f'üí∞ <b>—Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç:</b> {TRANSFER_COMMISSION_TOP20}%\n\n'
        '–Ω–∞–ø–∏—à–∏ –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç (–æ—Ç 1 –¥–æ 50):',
        parse_mode='HTML',
    
    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='‚ùå –æ—Ç–º–µ–Ω–∞', callback_data='transfer_commission_cancel')]
    
    ])
    )
    
    await state.set_state(AdminState.waiting_for_commission_percent)
    await callback.answer('–≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –∫–æ–º–∏—Å—Å–∏–∏', show_alert=True)

@dp.callback_query(lambda c: c.data == 'transfer_commission_cancel')
async def transfer_commission_cancel_callback(callback: types.CallbackQuery):
    """–û—Ç–º–µ–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∫–æ–º–∏—Å—Å–∏–∏"""
    user_id = callback.from_user.id
    
    if user_id not in ADMIN_IDS:
        await callback.answer('—É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏', show_alert=True)
        return
    
    await callback.message.edit_text(
        '‚ùå <b>–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∏—Å—Å–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n'
        f'üí∞ <b>—Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç:</b> {TRANSFER_COMMISSION_TOP20}%',
        parse_mode='HTML'
    )
    await callback.answer('–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∏—Å—Å–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞', show_alert=True)

@dp.callback_query(lambda c: c.data == 'wealth_tax_back')
async def wealth_tax_back_callback(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –Ω–∞–ª–æ–≥–∞"""
    user_id = callback.from_user.id
    
    if user_id not in ADMIN_IDS:
        await callback.answer('—É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏', show_alert=True)
        return
    
    markup = InlineKeyboardMarkup(inline_keyboard=[
    
    [InlineKeyboardButton(text=f'üìä —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç: {WEALTH_TAX_PERCENT}%', callback_data='wealth_tax_info')],
        [InlineKeyboardButton(text='üìù –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç', callback_data='wealth_tax_write')],
    
    [InlineKeyboardButton(text='‚ùå –æ—Ç–º–µ–Ω–∞', callback_data='wealth_tax_cancel')]
    ])
    
    await callback.message.edit_text(
        f'‚öôÔ∏è <b>–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ª–æ–≥–∞ –Ω–∞ –±–æ–≥–∞—Ç—Å—Ç–≤–æ</b>\n\n'
        f'üí∞ <b>—Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç:</b> {WEALTH_TAX_PERCENT}%\n'
        f'‚è∞ <b>–ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å:</b> –∫–∞–∂–¥—ã–π —á–∞—Å\n'
        f'üë• <b>–ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫:</b> —Ç–æ–ø-15 –∏–≥—Ä–æ–∫–∞–º\n\n'
        f'–≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:',
        parse_mode='HTML',
    
    reply_markup=markup
    )

@dp.callback_query(lambda c: c.data == 'transfer_commission_back')
async def transfer_commission_back_callback(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –∫–æ–º–∏—Å—Å–∏–∏"""
    user_id = callback.from_user.id
    
    if user_id not in ADMIN_IDS:
        await callback.answer('—É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏', show_alert=True)
        return
    
    markup = InlineKeyboardMarkup(inline_keyboard=[
    
    [InlineKeyboardButton(text=f'üìä —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç: {TRANSFER_COMMISSION_TOP20}%', callback_data='transfer_commission_info')],
        [InlineKeyboardButton(text='üìù –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç', callback_data='transfer_commission_write')],
    
    [InlineKeyboardButton(text='‚ùå –æ—Ç–º–µ–Ω–∞', callback_data='transfer_commission_cancel')]
    ])
    
    await callback.message.edit_text(
        f'‚öôÔ∏è <b>–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∏—Å—Å–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤</b>\n\n'
        f'üí∞ <b>—Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç:</b> {TRANSFER_COMMISSION_TOP20}%\n'
        f'üë• <b>–ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫:</b> —Ç–æ–ø-20 –∏–≥—Ä–æ–∫–∞–º\n'
        f'üí∏ <b>–∫–æ–º–∏—Å—Å–∏—è –±–µ—Ä–µ—Ç—Å—è —Å:</b> —Å—É–º–º—ã –ø–µ—Ä–µ–≤–æ–¥–∞\n\n'
        f'–≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:',
        parse_mode='HTML',
    
    reply_markup=markup
    )

# === –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∫–Ω–æ–ø–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ ===
@dp.callback_query(lambda c: c.data == 'settings_change_nick')
async def settings_change_nick_callback(callback: types.CallbackQuery, state: FSMContext):
    """–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∏–∫–∞"""
    user_id = callback.from_user.id
    user_id_str = str(user_id)
    
    if user_id_str not in users:
        await callback.answer("—Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è", show_alert=True)
        return
    
    await callback.message.edit_text(
        "‚úèÔ∏è <b>–∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∏–∫–∞</b>\n\n"
        "üí° –Ω–∞–ø–∏—à–∏ –Ω–æ–≤—ã–π –Ω–∏–∫ (–æ—Ç 3 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤):",
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='‚ùå –æ—Ç–º–µ–Ω–∞', callback_data='settings_cancel_nick')]
        ])
    )
    
    await state.set_state(SettingsState.waiting_for_new_nick)
    await callback.answer()

@dp.callback_query(lambda c: c.data == 'settings_cancel_nick')
async def settings_cancel_nick_callback(callback: types.CallbackQuery, state: FSMContext):
    """–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∏–∫–∞"""
    user_id = callback.from_user.id
    user_id_str = str(user_id)
    
    if user_id_str not in users:
        await callback.answer("—Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è", show_alert=True)
        return
    
    # –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.clear()
    
    # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∏–∫–∞
    await callback.message.delete()
    
    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
    await show_settings_menu(callback.message, user_id_str)
    await callback.answer()

@dp.callback_query(lambda c: c.data == 'settings_toggle_top')
async def settings_toggle_top_callback(callback: types.CallbackQuery):
    """–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –≤ —Ç–æ–ø–µ"""
    user_id = callback.from_user.id
    user_id_str = str(user_id)
    
    if user_id_str not in users:
        await callback.answer("—Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è", show_alert=True)
        return
    
    user_data = users[user_id_str]
    current_hide = user_data.get('hide_from_top', False)
    
    # –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
    user_data['hide_from_top'] = not current_hide
    save_users()
    
    new_status = '—Å–∫—Ä—ã—Ç–∞' if not current_hide else '–≤–∏–¥–Ω–∞'
    await callback.answer(f"üèÜ —Å—Å—ã–ª–∫–∞ –≤ —Ç–æ–ø–µ –∏–∑–º–µ–Ω–µ–Ω–∞: {new_status}", show_alert=True)
    
    # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
    await show_settings_menu(callback.message, user_id_str)

@dp.callback_query(lambda c: c.data == 'settings_toggle_confirmations')
async def settings_toggle_confirmations_callback(callback: types.CallbackQuery):
    """–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –ø–µ—Ä–µ–≤–æ–¥–∞"""
    user_id = callback.from_user.id
    user_id_str = str(user_id)
    
    if user_id_str not in users:
        await callback.answer("—Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è", show_alert=True)
        return
    
    user_data = users[user_id_str]
    current_confirmations = user_data.get('transfer_confirmations', True)
    
    # –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
    user_data['transfer_confirmations'] = not current_confirmations
    save_users()
    
    if not current_confirmations:
        # –≤–∫–ª—é—á–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await callback.answer("‚úÖ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≤–∫–ª—é—á–µ–Ω—ã", show_alert=True)
    else:
        # –≤—ã–∫–ª—é—á–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await callback.answer("‚ö†Ô∏è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≤—ã–∫–ª—é—á–µ–Ω—ã! —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–µ–≤–æ–¥—ã –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è —Å—Ä–∞–∑—É –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", show_alert=True)
    
    # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
    await show_settings_menu(callback.message, user_id_str)

@dp.callback_query(lambda c: c.data == 'settings_back')
async def settings_back_callback(callback: types.CallbackQuery, state: FSMContext):
    """–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    user_id = callback.from_user.id
    user_id_str = str(user_id)
    
    if user_id_str not in users:
        await callback.answer("—Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è", show_alert=True)
        return
    
    # –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM (–≤–∞–∂–Ω–æ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–≥–∞)
    await state.clear()
    
    # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await show_menu(callback.message, user_id)
    await callback.answer()

async def show_settings_menu(message: types.Message, user_id_str: str):
    """–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    user_data = users[user_id_str]
    nick = user_data.get('nick', '–∏–≥—Ä–æ–∫')
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    hide_from_top = user_data.get('hide_from_top', False)
    transfer_confirmations = user_data.get('transfer_confirmations', True)
    
    settings_text = f"‚öôÔ∏è <b>–Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
    settings_text += f"üë§ <b>—Ç–µ–∫—É—â–∏–π –Ω–∏–∫:</b> {nick}\n"
    settings_text += f"üèÜ <b>—Å—Å—ã–ª–∫–∞ –≤ —Ç–æ–ø–µ:</b> {'—Å–∫—Ä—ã—Ç–∞' if hide_from_top else '–≤–∏–¥–Ω–∞'}\n"
    settings_text += f"‚úÖ <b>–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞:</b> {'–≤—ã–∫–ª—é—á–µ–Ω—ã' if not transfer_confirmations else '–≤–∫–ª—é—á–µ–Ω—ã'}\n\n"
    settings_text += "üí° –≤—ã–±–µ—Ä–∏ —á—Ç–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å:\n\n"
    settings_text += "‚ö†Ô∏è <b>–≤–Ω–∏–º–∞–Ω–∏–µ:</b> –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –ø–µ—Ä–µ–≤–æ–¥—ã –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è —Å—Ä–∞–∑—É –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"
    
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='‚úèÔ∏è –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫', callback_data='settings_change_nick')],
        [InlineKeyboardButton(text='üèÜ —Å–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É' if not hide_from_top else 'üèÜ –ø–æ–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É', callback_data='settings_toggle_top')],
        [InlineKeyboardButton(text='‚úÖ –≤—ã–∫–ª—é—á–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è' if transfer_confirmations else '‚úÖ –≤–∫–ª—é—á–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è', callback_data='settings_toggle_confirmations')],
        [InlineKeyboardButton(text='‚¨ÖÔ∏è –Ω–∞–∑–∞–¥', callback_data='settings_back')]
    ])
    
    await message.edit_text(settings_text, parse_mode='HTML', reply_markup=markup)

async def main():
    # –£–¥–∞–ª—è–µ–º webhook –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º polling
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        print("‚úÖ Webhook —É–¥–∞–ª–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º polling...")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook: {e}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ª–æ–≥–∞
    load_tax_settings()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥—ã
    load_promo_codes()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∏–Ω–≥ –≤ —Ñ–æ–Ω–µ
    ping_task = asyncio.create_task(start_ping())
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ª–æ–≥–∞ –≤ —Ñ–æ–Ω–µ
    tax_task = asyncio.create_task(start_wealth_tax_scheduler())
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–æ–Ω–µ
    backup_task = asyncio.create_task(start_backup_scheduler())
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot)

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –ë–î
@dp.message(Command('reload_db'))
async def reload_database(message: types.Message):
    user_id = message.from_user.id
    
    user_id_str = str(user_id)
    
    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS:
        await message.answer('—É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ')
        return
    
    users = load_users()
    
    await message.answer(f'–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞! –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
@dp.message(Command('collect_tax'))
async def collect_tax_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Å–±–æ—Ä–∞ –Ω–∞–ª–æ–≥–∞ –Ω–∞ –±–æ–≥–∞—Ç—Å—Ç–≤–æ"""
    user_id = message.from_user.id
    
    user_id_str = str(user_id)
    
    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if user_id not in ADMIN_IDS:
        await message.answer('—É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ')
        return
    
    await message.answer('üí∞ –∑–∞–ø—É—Å–∫–∞—é —Ä—É—á–Ω–æ–π —Å–±–æ—Ä –Ω–∞–ª–æ–≥–∞ –Ω–∞ –±–æ–≥–∞—Ç—Å—Ç–≤–æ...')
    
    try:
        await collect_wealth_tax()
        await message.answer('‚úÖ –Ω–∞–ª–æ–≥ –Ω–∞ –±–æ–≥–∞—Ç—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω!')
    except Exception as e:
        await message.answer(f'‚ùå –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –Ω–∞–ª–æ–≥–∞: {e}')

@dp.message(Command('backup'))
async def create_backup_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    user_id = message.from_user.id
    
    user_id_str = str(user_id)
    
    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if user_id not in ADMIN_IDS:
        await message.answer('—É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ')
        return
    
    await message.answer('üíæ —Å–æ–∑–¥–∞—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...')
    
    try:
        success = create_backup()
        if success:
            await message.answer('‚úÖ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!')
        else:
            await message.answer('‚ùå –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏')
    except Exception as e:
        await message.answer(f'‚ùå –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}')

@dp.message(Command('roulette_status'))
async def roulette_status_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ä—É–ª–µ—Ç–∫–∏"""
    user_id = message.from_user.id
    
    user_id_str = str(user_id)
    
    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if user_id not in ADMIN_IDS:
        await message.answer('—É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ')
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ä—É–ª–µ—Ç–∫–∏
    status_text = (
    
    f"üé∞ <b>–°—Ç–∞—Ç—É—Å —Ä—É–ª–µ—Ç–∫–∏</b>\n\n"
        f"üîí <b>–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</b>\n"
        f"‚Ä¢ –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: ‚ùå (–æ—Ç–∫–ª—é—á–µ–Ω)\n"
        f"‚Ä¢ –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–ª—É—á–∞–π–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: ‚úÖ\n"
        f"‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ—Ç–∏–≤ –±–æ–≥–∞—Ç—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: ‚úÖ\n\n"
        f"üìä <b>–ë–∞–∑–æ–≤—ã–µ —à–∞–Ω—Å—ã –ø—Ä–æ–∏–≥—Ä—ã—à–∞ –ø–æ –±–∞–ª–∞–Ω—Å—É:</b>\n"
        f"‚Ä¢ –î–æ 1–∫–∫: 50%\n"
        f"‚Ä¢ –î–æ 10–∫–∫: 55%\n"
        f"‚Ä¢ –î–æ 100–∫–∫: 60%\n"
        f"‚Ä¢ –î–æ 1–∫–∫–∫: 65%\n"
        f"‚Ä¢ –î–æ 10–∫–∫–∫: 70%\n"
        f"‚Ä¢ –î–æ 100–∫–∫–∫: 75%\n"
        f"‚Ä¢ –î–æ 1–∫–∫–∫–∫: 80%\n"
        f"‚Ä¢ –ë–æ–ª—å—à–µ 1–∫–∫–∫–∫: 85%\n\n"
        f"üìà <b>–ë–æ–Ω—É—Å –∑–∞ –±–æ–ª—å—à–∏–µ —Å—Ç–∞–≤–∫–∏:</b>\n"
        f"‚Ä¢ –î–æ 5% –æ—Ç –±–∞–ª–∞–Ω—Å–∞: +0%\n"
        f"‚Ä¢ –î–æ 15% –æ—Ç –±–∞–ª–∞–Ω—Å–∞: +5%\n"
        f"‚Ä¢ –î–æ 30% –æ—Ç –±–∞–ª–∞–Ω—Å–∞: +10%\n"
        f"‚Ä¢ –î–æ 50% –æ—Ç –±–∞–ª–∞–Ω—Å–∞: +15%\n"
        f"‚Ä¢ –î–æ 80% –æ—Ç –±–∞–ª–∞–Ω—Å–∞: +20%\n"
        f"‚Ä¢ –ë–æ–ª—å—à–µ 80% –æ—Ç –±–∞–ª–∞–Ω—Å–∞: +25%\n\n"
        f"‚úÖ <b>–ë–∞–≥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω - –±–æ–≥–∞—Ç—ã–µ –∏–≥—Ä–æ–∫–∏ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞—é—Ç —á–∞—â–µ!</b>"
    )
    
    await message.answer(status_text, parse_mode='HTML')

@dp.message(F.text.lower() == '–º–æ–π id')
async def my_id_command(message: types.Message):
    """–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    
    username = message.from_user.username or '–±–µ–∑ username'
    
    await message.answer(
        f'üÜî <b>—Ç–≤–æ—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n\n'
        f'üì± <b>ID:</b> <code>{user_id}</code>\n'
        f'üë§ <b>Username:</b> @{username}\n'
        f'üëë <b>–ê–¥–º–∏–Ω:</b> {"–¥–∞" if user_id in ADMIN_IDS else "–Ω–µ—Ç"}\n\n'
        f'üí° <b>ADMIN_IDS –≤ –∫–æ–¥–µ:</b>\n<code>{ADMIN_IDS}</code>',
        parse_mode='HTML'
    
    )

@dp.message(F.text.lower() == 'menu')
async def on_menu_en_button(message: types.Message):
    user_id = message.from_user.id
    
    user_id_str = str(user_id)
    
    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    if user_id_str not in users:
        await show_not_registered_message(message)
        return
    
    if 'nick' not in users[user_id_str]:
        await show_not_registered_message(message)
        return
    
    await show_menu(message, user_id)

@dp.message(F.text.lower() == 'top')
async def on_top_command(message: types.Message):
    """–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã top"""
    user_id = message.from_user.id
    
    user_id_str = str(user_id)    # —Å–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    if user_id_str not in users:
        await message.answer('—Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π /start')
        return
    
    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–ø–∞
    top_text, markup = await show_top_page(message, 0)
    
    await message.answer(top_text, parse_mode='HTML', reply_markup=markup)

@dp.message(F.text == 'üèÜ')
async def on_trophy_button(message: types.Message):
    """–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ üèÜ"""
    user_id = message.from_user.id
    
    user_id_str = str(user_id)    # —Å–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    if user_id_str not in users:
        await message.answer('—Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π /start')
        return
    
    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–ø–∞
    top_text, markup = await show_top_page(message, 0)
    
    await message.answer(top_text, parse_mode='HTML', reply_markup=markup)

@dp.message(F.text == '‚öôÔ∏è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏')
async def on_settings_button(message: types.Message):
    """–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    user_id = message.from_user.id
    
    user_id_str = str(user_id)
    collect_user_info(message, user_id_str)
    
    if user_id_str not in users:
        await message.answer('—Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π /start')
        return
    
    user_data = users[user_id_str]
    nick = user_data.get('nick', '–∏–≥—Ä–æ–∫')
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    hide_from_top = user_data.get('hide_from_top', False)
    transfer_confirmations = user_data.get('transfer_confirmations', True)
    
    settings_text = f"‚öôÔ∏è <b>–Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
    settings_text += f"üë§ <b>—Ç–µ–∫—É—â–∏–π –Ω–∏–∫:</b> {nick}\n"
    settings_text += f"üèÜ <b>—Å—Å—ã–ª–∫–∞ –≤ —Ç–æ–ø–µ:</b> {'—Å–∫—Ä—ã—Ç–∞' if hide_from_top else '–≤–∏–¥–Ω–∞'}\n"
    settings_text += f"‚úÖ <b>–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞:</b> {'–≤—ã–∫–ª—é—á–µ–Ω—ã' if not transfer_confirmations else '–≤–∫–ª—é—á–µ–Ω—ã'}\n\n"
    settings_text += "üí° –≤—ã–±–µ—Ä–∏ —á—Ç–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å:\n\n"
    settings_text += "‚ö†Ô∏è <b>–≤–Ω–∏–º–∞–Ω–∏–µ:</b> –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –ø–µ—Ä–µ–≤–æ–¥—ã –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è —Å—Ä–∞–∑—É –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"
    
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='‚úèÔ∏è –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫', callback_data='settings_change_nick')],
        [InlineKeyboardButton(text='üèÜ —Å–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É' if not hide_from_top else 'üèÜ –ø–æ–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É', callback_data='settings_toggle_top')],
        [InlineKeyboardButton(text='‚úÖ –≤—ã–∫–ª—é—á–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è' if transfer_confirmations else '‚úÖ –≤–∫–ª—é—á–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è', callback_data='settings_toggle_confirmations')],
        [InlineKeyboardButton(text='‚¨ÖÔ∏è –Ω–∞–∑–∞–¥', callback_data='settings_back')]
    ])
    
    await message.answer(settings_text, parse_mode='HTML', reply_markup=markup)

@dp.message(F.text.lower() == '–º')
async def on_m_letter(message: types.Message):
    """–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—É–∫–≤—ã –º"""
    user_id = message.from_user.id
    
    user_id_str = str(user_id)    # —Å–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    if user_id_str not in users:
        await show_not_registered_message(message)
        return
    
    if 'nick' not in users[user_id_str]:
        await show_not_registered_message(message)
        return
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user_data = users[user_id_str]
    
    if user_data.get('banned', False):
        ban_reason = user_data.get('ban_reason', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        ban_duration = user_data.get('ban_duration', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='üí¨ –æ–±–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞–∫–∞–∑–∞–Ω–∏–µ', url='https://t.me/daisicxTp_bot')]
        ])
        
        await message.answer(
            f"üö´ <b>—Ç–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
            f"‚ùå <b>–ø—Ä–∏—á–∏–Ω–∞:</b> {ban_reason}\n"
            f"‚è∞ <b>—Å—Ä–æ–∫:</b> {ban_duration}\n\n"
            f"üí¨ –æ–±–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞–∫–∞–∑–∞–Ω–∏–µ –º–æ–∂–Ω–æ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ\n"
            f"üîó <b>–ø–æ–¥–¥–µ—Ä–∂–∫–∞:</b> @daisicxTp_bot",
            parse_mode='HTML',
            reply_markup=markup
        )
        return
    
    await show_menu(message, user_id)

@dp.message(F.text == '–≤—ã–±—Ä–∞—Ç—å —Ü–µ–ª—å üéØ')
async def select_target_button(message: types.Message):
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.chat.type != 'private':
        return
    
    user_id = message.from_user.id
    
    user_id_str = str(user_id)    # —Å–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS:
        await message.answer('—É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ')
        return

@dp.message(AdminState.waiting_for_warn_date)
async def warn_date_entered(message: types.Message, state: FSMContext):
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.chat.type != 'private':
        return
    
    user_id = message.from_user.id
    
    user_id_str = str(user_id)
    
    # —Å–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    if user_id not in ADMIN_IDS:
        return
    
    date_text = message.text.strip()
    
    # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
    try:
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç—ã
        date_formats = ['%d.%m.%Y', '%d.%m.%y', '%d/%m/%Y', '%d/%m/%y']
        parsed_date = None
        
        for fmt in date_formats:
            try:
                parsed_date = datetime.datetime.strptime(date_text, fmt)
                break
            except ValueError:
                continue
        
        if not parsed_date:
            await message.answer('–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç –¥–¥.–º–º.–≥–≥–≥–≥')
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(warn_date=date_text)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–∏—á–∏–Ω—É –≤–∞—Ä–Ω–∞
        await message.answer('–Ω–∞–ø–∏—à–∏ –ø—Ä–∏—á–∏–Ω—É –≤–∞—Ä–Ω–∞')
        await state.set_state(AdminState.waiting_for_warn_reason)
        
    except Exception as e:
        await message.answer(f'–æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞—Ç—ã: {e}')
        await state.clear()
        await admin_panel(message)

@dp.message(Command('user_info'))
async def show_user_info(message: types.Message):
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.chat.type != 'private':
        return
    
    user_id = message.from_user.id
    
    user_id_str = str(user_id)    # —Å–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS:
        await message.answer('—É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ')
        return
    
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split()
    
    if len(args) < 2:
        await message.answer('–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /user_info <username –∏–ª–∏ nick>')
        return
    
    target_text = args[1].strip()
    
    username = extract_username(target_text)
    
    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    target_user_id = None
    target_user_data = None
    
    for uid, user_data in users.items():
        if (user_data.get('tg_username', '').lower() == username.lower() or 
            user_data.get('nick', '').lower() == target_text.lower()):
            target_user_id = uid
            target_user_data = user_data
            break
    
    if not target_user_data:
        await message.answer('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    info_text = f"üîç <b>–¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>\n\n"
    
    info_text += f"üÜî <b>ID:</b> {target_user_id}\n"
    info_text += f"üë§ <b>–Ω–∏–∫:</b> {target_user_data.get('nick', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
    info_text += f"üì± <b>username:</b> @{target_user_data.get('tg_username', '–±–µ–∑_—é–∑')}\n"
    info_text += f"üí∞ <b>–±–∞–ª–∞–Ω—Å:</b> ${format_money(target_user_data.get('balance', 0))}\n"
    info_text += f"‚ö†Ô∏è <b>–≤–∞—Ä–Ω—ã:</b> {target_user_data.get('warns', 0)}\n"
    info_text += f"üö´ <b>–∑–∞–±–∞–Ω–µ–Ω:</b> {'–¥–∞' if target_user_data.get('banned', False) else '–Ω–µ—Ç'}\n"
    info_text += f"üìÖ <b>–¥–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {target_user_data.get('registration_date', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
    info_text += f"üïê <b>–ø–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b> {target_user_data.get('last_activity', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
    info_text += f"üí¨ <b>–≤—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π:</b> {target_user_data.get('total_messages', 0)}\n"
    info_text += f"üåç <b>—è–∑—ã–∫:</b> {target_user_data.get('language', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
    info_text += f"üîó <b>–∏—Å—Ç–æ—á–Ω–∏–∫:</b> {target_user_data.get('referral_source', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
    info_text += f"üìä <b>—Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞:</b> {target_user_data.get('account_type', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
    info_text += f"‚úÖ <b>—Å—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:</b> {target_user_data.get('verification_status', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
    info_text += f"üîí <b>—É—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:</b> {target_user_data.get('security_level', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
    info_text += f"üíé <b>–ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–∏:</b> {'–¥–∞' if target_user_data.get('premium_features', False) else '–Ω–µ—Ç'}\n"
    info_text += f"üî¢ <b>–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ö–æ–¥–æ–≤:</b> {target_user_data.get('login_count', 0)}\n"
    info_text += f"üì± <b>–ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥:</b> {target_user_data.get('last_login', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
    info_text += f"üë• <b>—Ä–µ—Ñ–µ—Ä–∞–ª—ã:</b> {target_user_data.get('referrals', 0)}\n"
    info_text += f"üí∏ <b>–∑–∞—Ä–∞–±–æ—Ç–æ–∫ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b> ${format_money(target_user_data.get('referral_earnings', 0))}\n"
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if target_user_data.get('phone_number'):
        info_text += f"üìû <b>—Ç–µ–ª–µ—Ñ–æ–Ω:</b> {target_user_data.get('phone_number')}\n"
    if target_user_data.get('email'):
        info_text += f"üìß <b>email:</b> {target_user_data.get('email')}\n"
    if target_user_data.get('age'):
        info_text += f"üéÇ <b>–≤–æ–∑—Ä–∞—Å—Ç:</b> {target_user_data.get('age')}\n"
    if target_user_data.get('city'):
        info_text += f"üèôÔ∏è <b>–≥–æ—Ä–æ–¥:</b> {target_user_data.get('city')}\n"
    if target_user_data.get('country'):
        info_text += f"üåç <b>—Å—Ç—Ä–∞–Ω–∞:</b> {target_user_data.get('country')}\n"
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    preferences = target_user_data.get('preferences', {})
    
    info_text += f"\n‚öôÔ∏è <b>–Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
    info_text += f"‚Ä¢ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'–≤–∫–ª' if preferences.get('notifications', True) else '–≤—ã–∫–ª'}\n"
    info_text += f"‚Ä¢ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —Ä–µ–∂–∏–º: {'–≤–∫–ª' if preferences.get('privacy_mode', False) else '–≤—ã–∫–ª'}\n"
    info_text += f"‚Ä¢ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: {'–≤–∫–ª' if preferences.get('auto_save', True) else '–≤—ã–∫–ª'}\n"
    
    await message.answer(info_text, parse_mode='HTML')

@dp.message(Command('export_db'))
async def export_database(message: types.Message):
    
    user_id = message.from_user.id
    user_id_str = str(user_id)
    
    # —Å–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS:
        await message.answer('—É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ')
        return
    
    # —Å–æ–∑–¥–∞—ë–º —ç–∫—Å–ø–æ—Ä—Ç
    export_text = f"üìä <b>—ç–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</b>\n"
    
    export_text += f"üìÖ <b>–¥–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:</b> {datetime.datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n"
    export_text += f"üë• <b>–≤—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {len(users)}\n\n"
    
    for user_id, user_data in users.items():
        export_text += f"üÜî <b>ID:</b> {user_id}\n"
        export_text += f"üë§ <b>–Ω–∏–∫:</b> {user_data.get('nick', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        export_text += f"üì± <b>username:</b> @{user_data.get('tg_username', '–±–µ–∑_—é–∑')}\n"
        export_text += f"üí∞ <b>–±–∞–ª–∞–Ω—Å:</b> ${format_money(user_data.get('balance', 0))}\n"
        export_text += f"‚ö†Ô∏è <b>–≤–∞—Ä–Ω—ã:</b> {user_data.get('warns', 0)}\n"
        export_text += f"üö´ <b>–∑–∞–±–∞–Ω–µ–Ω:</b> {'–¥–∞' if user_data.get('banned', False) else '–Ω–µ—Ç'}\n"
        export_text += f"üìÖ <b>—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</b> {user_data.get('registration_date', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        export_text += f"üïê <b>–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b> {user_data.get('last_activity', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        export_text += f"üí¨ <b>—Å–æ–æ–±—â–µ–Ω–∏—è:</b> {user_data.get('total_messages', 0)}\n"
        export_text += f"üåç <b>—è–∑—ã–∫:</b> {user_data.get('language', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        export_text += f"üîó <b>–∏—Å—Ç–æ—á–Ω–∏–∫:</b> {user_data.get('referral_source', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        export_text += f"üî¢ <b>–≤—Ö–æ–¥—ã:</b> {user_data.get('login_count', 0)}\n"
        export_text += f"üë• <b>—Ä–µ—Ñ–µ—Ä–∞–ª—ã:</b> {user_data.get('referrals', 0)}\n"
        export_text += f"üí∏ <b>–∑–∞—Ä–∞–±–æ—Ç–æ–∫:</b> ${format_money(user_data.get('referral_earnings', 0))}\n"
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if user_data.get('phone_number'):
            export_text += f"üìû <b>—Ç–µ–ª–µ—Ñ–æ–Ω:</b> {user_data.get('phone_number')}\n"
        if user_data.get('email'):
            export_text += f"üìß <b>email:</b> {user_data.get('email')}\n"
        if user_data.get('age'):
            export_text += f"üéÇ <b>–≤–æ–∑—Ä–∞—Å—Ç:</b> {user_data.get('age')}\n"
        if user_data.get('city'):
            export_text += f"üèôÔ∏è <b>–≥–æ—Ä–æ–¥:</b> {user_data.get('city')}\n"
        if user_data.get('country'):
            export_text += f"üåç <b>—Å—Ç—Ä–∞–Ω–∞:</b> {user_data.get('country')}\n"
        
        export_text += "‚îÄ" * 30 + "\n\n"
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
    if len(export_text) > 4000:
        parts = [export_text[i:i+4000] for i in range(0, len(export_text), 4000)]
    
    for i, part in enumerate(parts):
            await message.answer(f"{part}\n\n<i>—á–∞—Å—Ç—å {i+1} –∏–∑ {len(parts)}</i>", parse_mode='HTML')
    
    else:
        await message.answer(export_text, parse_mode='HTML')
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    await admin_panel(message)

@dp.message(Command('extend_limit'))
async def extend_k_limit_command(message: types.Message):
    """–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π"""
    user_id = message.from_user.id
    
    user_id_str = str(user_id)    # —Å–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS:
        await message.answer('—É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ')
        return
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç
    current_max = get_max_k_count()
    
    max_balance = max((user.get('balance', 0) for user in users.values()), default=0)
    
    info_text = f"üî¢ <b>–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏–º–∏—Ç–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π:</b>\n\n"
    
    info_text += f"üìä —Ç–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç: {current_max} –±—É–∫–≤ \"–∫\"\n"
    info_text += f"üíé –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${format_money(max_balance)}\n"
    info_text += f"‚ö° –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ: {'–≤–∫–ª—é—á–µ–Ω–æ' if auto_extend_k_limit() else '–≤—ã–∫–ª—é—á–µ–Ω–æ'}\n\n"
    
    if auto_extend_k_limit():
        info_text += "‚úÖ –ª–∏–º–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –∏–≥—Ä–æ–∫–æ–≤"
    else:
        info_text += "‚ÑπÔ∏è –ª–∏–º–∏—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω, –∫–æ–≥–¥–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø—Ä–µ–≤—ã—Å–∏—Ç 1–∫–∫–∫–∫"
    
    await message.answer(info_text, parse_mode='HTML')

@dp.message(F.text.lower() == '–º–æ–π id')
async def my_id_command(message: types.Message):
    """–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    
    username = message.from_user.username or '–±–µ–∑ username'
    
    await message.answer(
        f'üÜî <b>—Ç–≤–æ—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n\n'
        f'üì± <b>ID:</b> <code>{user_id}</code>\n'
        f'üë§ <b>Username:</b> @{username}\n'
        f'üëë <b>–ê–¥–º–∏–Ω:</b> {"–¥–∞" if user_id in ADMIN_IDS else "–Ω–µ—Ç"}\n\n'
        f'üí° <b>ADMIN_IDS –≤ –∫–æ–¥–µ:</b>\n<code>{ADMIN_IDS}</code>',
        parse_mode='HTML'
    
    )

@dp.message(F.text.lower().contains('–æ—á–∏—Å—Ç–∏—Ç—å') & F.text.lower().contains('–±–¥'))
async def clear_db_button(message: types.Message):
    user_id = message.from_user.id
    
    user_id_str = str(user_id)    # —Å–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS:
        await message.answer('—É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ')
        return
    
    # —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    markup = InlineKeyboardMarkup(inline_keyboard=[
    
    [InlineKeyboardButton(text='‚úÖ –¥–∞, –æ—á–∏—Å—Ç–∏—Ç—å', callback_data='confirm_clear_db')],
        [InlineKeyboardButton(text='‚ùå –æ—Ç–º–µ–Ω–∞', callback_data='cancel_clear_db')]
    
    ])
    
    await message.answer(
        f'üóëÔ∏è <b>–æ—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</b>\n\n'
        f'‚ö†Ô∏è <b>–≤–Ω–∏–º–∞–Ω–∏–µ!</b> —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!\n\n'
        f'üìä <b>—Ç–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n'
        f'‚Ä¢ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{len(users)}</b>\n'
        f'‚Ä¢ –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å: <b>${format_money(sum(user.get("balance", 0) for user in users.values()))}</b>\n\n'
        f'üî¥ <b>–ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏:</b>\n'
        f'‚Ä¢ –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã\n'
        f'‚Ä¢ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã\n'
        f'‚Ä¢ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞–Ω–µ—Ç –ø—É—Å—Ç–æ–π\n\n'
        f'—Ç—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å –æ—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö?',
        parse_mode='HTML',
    
    reply_markup=markup
    )

@dp.message(F.text.lower().contains('—ç–∫—Å–ø–æ—Ä—Ç') & F.text.lower().contains('–±–¥'))
async def export_db_button(message: types.Message):
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.chat.type != 'private':
        return
    
    user_id = message.from_user.id
    
    user_id_str = str(user_id)    # —Å–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS:
        await message.answer('—É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ')
        return
    
    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
    markup = InlineKeyboardMarkup(inline_keyboard=[
    
    [InlineKeyboardButton(text='üì± –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ Telegram', callback_data='export_view_telegram')],
        [InlineKeyboardButton(text='üìÅ —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª', callback_data='export_download_file')],
    
    [InlineKeyboardButton(text='‚ùå –æ—Ç–º–µ–Ω–∞', callback_data='export_cancel')]
    ])
    
    await message.answer(
        f'üìä <b>—ç–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</b>\n\n'
        f'üë• <b>–≤—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {len(users)}\n'
        f'üìÖ <b>–¥–∞—Ç–∞:</b> {datetime.datetime.now().strftime("%d.%m.%Y %H:%M:%S")}\n\n'
        f'–≤—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± —ç–∫—Å–ø–æ—Ä—Ç–∞:',
        parse_mode='HTML',
    
    reply_markup=markup
    )

# === –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ë–î ===
@dp.callback_query(lambda c: c.data == 'export_view_telegram')
async def export_view_telegram_callback(callback: types.CallbackQuery):
    """–ø—Ä–æ—Å–º–æ—Ç—Ä —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Telegram —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    user_id = callback.from_user.id
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS:
        await callback.answer('—É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏', show_alert=True)
    
    return
    await callback.answer('—Å–æ–∑–¥–∞—é —ç–∫—Å–ø–æ—Ä—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞...', show_alert=False)
    
    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await show_users_page(callback.message, 0, user_id)
async def show_users_page(message: types.Message, page: int, user_id: int = None):
    
    """–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    if user_id is None:
        user_id = message.from_user.id
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS:
        return
    
    # –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    users_per_page = 5  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    
    total_users = len(users)
    total_pages = (total_users + users_per_page - 1) // users_per_page
    
    if page >= total_pages:
        page = total_pages - 1
    
    if page < 0:
        page = 0
    
    # —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    header = f"üìä <b>—ç–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</b>\n"
    
    header += f"üìÖ <b>–¥–∞—Ç–∞:</b> {datetime.datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n"
    header += f"üë• <b>–≤—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {total_users}\n"
    header += f"üìÑ <b>—Å—Ç—Ä–∞–Ω–∏—Ü–∞:</b> {page + 1} –∏–∑ {total_pages}\n\n"
    
    # –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    user_items = list(users.items())
    
    start_idx = page * users_per_page
    end_idx = min(start_idx + users_per_page, total_users)
    
    page_content = header
    
    for i in range(start_idx, end_idx):
        user_id, user_data = user_items[i]
        
        page_content += f"üÜî <b>ID:</b> {user_id}\n"
        page_content += f"üë§ <b>–Ω–∏–∫:</b> {user_data.get('nick', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        page_content += f"üì± <b>username:</b> @{user_data.get('tg_username', '–±–µ–∑_—é–∑')}\n"
        page_content += f"üí∞ <b>–±–∞–ª–∞–Ω—Å:</b> ${format_money(user_data.get('balance', 0))}\n"
        page_content += f"‚ö†Ô∏è <b>–≤–∞—Ä–Ω—ã:</b> {user_data.get('warns', 0)}\n"
        page_content += f"üö´ <b>–∑–∞–±–∞–Ω–µ–Ω:</b> {'–¥–∞' if user_data.get('banned', False) else '–Ω–µ—Ç'}\n"
        page_content += f"üìÖ <b>—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</b> {user_data.get('registration_date', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        page_content += f"üïê <b>–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b> {user_data.get('last_activity', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        page_content += f"üí¨ <b>—Å–æ–æ–±—â–µ–Ω–∏—è:</b> {user_data.get('total_messages', 0)}\n"
        page_content += f"üåç <b>—è–∑—ã–∫:</b> {user_data.get('language', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        page_content += f"üîó <b>–∏—Å—Ç–æ—á–Ω–∏–∫:</b> {user_data.get('referral_source', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        page_content += f"üî¢ <b>–≤—Ö–æ–¥—ã:</b> {user_data.get('login_count', 0)}\n"
        page_content += f"üë• <b>—Ä–µ—Ñ–µ—Ä–∞–ª—ã:</b> {user_data.get('referrals', 0)}\n"
        page_content += f"üí∏ <b>–∑–∞—Ä–∞–±–æ—Ç–æ–∫:</b> ${format_money(user_data.get('referral_earnings', 0))}\n"
        
        # –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if user_data.get('phone_number'):
            page_content += f"üìû <b>—Ç–µ–ª–µ—Ñ–æ–Ω:</b> {user_data.get('phone_number')}\n"
        if user_data.get('email'):
            page_content += f"üìß <b>email:</b> {user_data.get('email')}\n"
        if user_data.get('age'):
            page_content += f"üéÇ <b>–≤–æ–∑—Ä–∞—Å—Ç:</b> {user_data.get('age')}\n"
        if user_data.get('city'):
            page_content += f"üèôÔ∏è <b>–≥–æ—Ä–æ–¥:</b> {user_data.get('city')}\n"
        if user_data.get('country'):
            page_content += f"üåç <b>—Å—Ç—Ä–∞–Ω–∞:</b> {user_data.get('country')}\n"
        
        page_content += "‚îÄ" * 30 + "\n\n"
    
    # —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    markup = InlineKeyboardMarkup(inline_keyboard=[])
    
    # –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text='‚¨ÖÔ∏è', callback_data=f'users_page_{page-1}'))
    
    nav_buttons.append(InlineKeyboardButton(text=f'{page+1}/{total_pages}', callback_data='no_action'))
    
    if page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton(text='‚û°Ô∏è', callback_data=f'users_page_{page+1}'))
    
    if nav_buttons:
        markup.inline_keyboard.append(nav_buttons)
    
    # –∫–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    markup.inline_keyboard.append([InlineKeyboardButton(text='üîô –Ω–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', callback_data='back_to_admin')])
    
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await message.edit_text(page_content, parse_mode='HTML', reply_markup=markup)
    
    except:
        await message.answer(page_content, parse_mode='HTML', reply_markup=markup)

@dp.callback_query(lambda c: c.data == 'export_download_file')
async def export_download_file_callback(callback: types.CallbackQuery):
    """—Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–∞"""
    user_id = callback.from_user.id
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS:
        await callback.answer('—É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏', show_alert=True)
    
    return
    
    await callback.answer('—Å–æ–∑–¥–∞—é —Ñ–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è...', show_alert=False)
    
    # —Å–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
    file_content = f"–≠–ö–°–ü–û–†–¢ –ë–ê–ó–´ –î–ê–ù–ù–´–•\n"
    
    file_content += f"–î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {datetime.datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n"
    file_content += f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n\n"
    
    for user_id, user_data in users.items():
        file_content += f"ID: {user_id}\n"
        file_content += f"–ù–∏–∫: {user_data.get('nick', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        file_content += f"Username: @{user_data.get('tg_username', '–±–µ–∑_—é–∑')}\n"
        file_content += f"–ë–∞–ª–∞–Ω—Å: ${format_money(user_data.get('balance', 0))}\n"
        file_content += f"–í–∞—Ä–Ω—ã: {user_data.get('warns', 0)}\n"
        file_content += f"–ó–∞–±–∞–Ω–µ–Ω: {'–¥–∞' if user_data.get('banned', False) else '–Ω–µ—Ç'}\n"
        file_content += f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user_data.get('registration_date', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        file_content += f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user_data.get('last_activity', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        file_content += f"–°–æ–æ–±—â–µ–Ω–∏—è: {user_data.get('total_messages', 0)}\n"
        file_content += f"–Ø–∑—ã–∫: {user_data.get('language', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        file_content += f"–ò—Å—Ç–æ—á–Ω–∏–∫: {user_data.get('referral_source', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        file_content += f"–í—Ö–æ–¥—ã: {user_data.get('login_count', 0)}\n"
        file_content += f"–†–µ—Ñ–µ—Ä–∞–ª—ã: {user_data.get('referrals', 0)}\n"
        file_content += f"–ó–∞—Ä–∞–±–æ—Ç–æ–∫: ${format_money(user_data.get('referral_earnings', 0))}\n"
        
        # –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if user_data.get('phone_number'):
            file_content += f"–¢–µ–ª–µ—Ñ–æ–Ω: {user_data.get('phone_number')}\n"
        if user_data.get('email'):
            file_content += f"Email: {user_data.get('email')}\n"
        if user_data.get('age'):
            file_content += f"–í–æ–∑—Ä–∞—Å—Ç: {user_data.get('age')}\n"
        if user_data.get('city'):
            file_content += f"–ì–æ—Ä–æ–¥: {user_data.get('city')}\n"
        if user_data.get('country'):
            file_content += f"–°—Ç—Ä–∞–Ω–∞: {user_data.get('country')}\n"
        
        file_content += "‚îÄ" * 30 + "\n\n"
    
    # —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    filename = f"db_export_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
    
    file_path = f"temp/{filename}"
    
    # —Å–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É temp –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs("temp", exist_ok=True)
    
    try:
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(file_content)
        
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        with open(file_path, 'rb') as f:
            await callback.message.answer_document(
                document=types.BufferedInputFile(f.read(), filename=filename),
                caption=f'üìÅ <b>—ç–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</b>\n\nüìÖ <b>–¥–∞—Ç–∞:</b> {datetime.datetime.now().strftime("%d.%m.%Y %H:%M:%S")}\nüë• <b>–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {len(users)}',
                parse_mode='HTML'
            )
        
        # —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(file_path)
        
    except Exception as e:
        await callback.message.answer(f'‚ùå –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}')
    
    # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    await admin_panel(callback.message)

@dp.callback_query(lambda c: c.data == 'export_cancel')
async def export_cancel_callback(callback: types.CallbackQuery):
    """–æ—Ç–º–µ–Ω–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    user_id = callback.from_user.id
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS:
        await callback.answer('—É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏', show_alert=True)
    
    return
    
    await callback.answer('—ç–∫—Å–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω–µ–Ω', show_alert=False)
    
    # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    await admin_panel(callback.message)

# === –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===
@dp.callback_query(lambda c: c.data.startswith('users_page_'))
async def users_page_callback(callback: types.CallbackQuery):
    """–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    user_id = callback.from_user.id
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS:
        await callback.answer('—É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏', show_alert=True)
    
    return
    
    # –∏–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    page = int(callback.data.split('_')[2])
    
    await callback.answer(f'—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}', show_alert=False)
    
    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await show_users_page(callback.message, page, user_id)

@dp.callback_query(lambda c: c.data == 'back_to_admin')
async def back_to_admin_callback(callback: types.CallbackQuery):
    """–≤–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    user_id = callback.from_user.id
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS:
        await callback.answer('—É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏', show_alert=True)
    
    return
    
    await callback.answer('–≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å...', show_alert=False)
    
    # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    await admin_panel(callback.message)

@dp.callback_query(lambda c: c.data == 'no_action')
async def no_action_callback(callback: types.CallbackQuery):
    """–ø—É—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –±–µ–∑ –¥–µ–π—Å—Ç–≤–∏—è"""
    try:
        await callback.answer()
    except:
        pass

# === –∫–æ–Ω–µ—Ü –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ ===

# === –∫–æ–Ω–µ—Ü –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ë–î ===

@dp.message(F.text.lower().contains('–ø—Ä–æ–±–∏—Ç—å') | F.text.lower().contains('–ø—Ä–æ–±–∏–≤'))
async def probe_user_button(message: types.Message, state: FSMContext):
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.chat.type != 'private':
        return
    
    user_id = message.from_user.id
    
    user_id_str = str(user_id)    # —Å–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS:
        await message.answer('—É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ')
        return
    
    await message.answer('üîç –Ω–∞–ø–∏—à–∏ —é–∑ –∫–æ–≥–æ —Ö–æ—á–µ—à—å –ø—Ä–æ–±–∏—Ç—å))', reply_markup=ReplyKeyboardRemove())
    
    await state.set_state(AdminState.waiting_for_probe_target)

@dp.message(AdminState.waiting_for_probe_target)
async def probe_target_selected(message: types.Message, state: FSMContext):
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.chat.type != 'private':
        return
    
    user_id = message.from_user.id
    
    user_id_str = str(user_id)    # —Å–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS:
        return
    
    target_text = message.text.strip()
    
    username = extract_username(target_text)
    
    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    target_user_id = None
    
    target_user_data = None
    
    for uid, user_data in users.items():
        if (user_data.get('tg_username', '').lower() == username.lower() or 
            user_data.get('nick', '').lower() == target_text.lower()):
            target_user_id = uid
            target_user_data = user_data
            break
    
    if not target_user_data:
        await message.answer('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
        await state.clear()
        await admin_panel(message)
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ç–æ–º –∂–µ —Å—Ç–∏–ª–µ
    info_text = f"üîç <b>–ø—Ä–æ–±–∏–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
    
    info_text += f"üÜî <b>ID:</b> {target_user_id}\n"
    info_text += f"üë§ <b>–Ω–∏–∫:</b> {target_user_data.get('nick', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
    info_text += f"üì± <b>username:</b> @{target_user_data.get('tg_username', '–±–µ–∑_—é–∑')}\n"
    info_text += f"üí∞ <b>–±–∞–ª–∞–Ω—Å:</b> ${format_money(target_user_data.get('balance', 0))}\n"
    info_text += f"‚ö†Ô∏è <b>–≤–∞—Ä–Ω—ã:</b> {target_user_data.get('warns', 0)}\n"
    info_text += f"üö´ <b>–∑–∞–±–∞–Ω–µ–Ω:</b> {'–¥–∞' if target_user_data.get('banned', False) else '–Ω–µ—Ç'}\n"
    info_text += f"üìÖ <b>–¥–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {target_user_data.get('registration_date', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
    info_text += f"üïê <b>–ø–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b> {target_user_data.get('last_activity', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
    info_text += f"üí¨ <b>–≤—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π:</b> {target_user_data.get('total_messages', 0)}\n"
    info_text += f"üåç <b>—è–∑—ã–∫:</b> {target_user_data.get('language', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
    info_text += f"üîó <b>–∏—Å—Ç–æ—á–Ω–∏–∫:</b> {target_user_data.get('referral_source', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
    info_text += f"üìä <b>—Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞:</b> {target_user_data.get('account_type', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
    info_text += f"‚úÖ <b>—Å—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:</b> {target_user_data.get('verification_status', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
    info_text += f"üîí <b>—É—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:</b> {target_user_data.get('security_level', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
    info_text += f"üíé <b>–ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–∏:</b> {'–¥–∞' if target_user_data.get('premium_features', False) else '–Ω–µ—Ç'}\n"
    info_text += f"üî¢ <b>–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ö–æ–¥–æ–≤:</b> {target_user_data.get('login_count', 0)}\n"
    info_text += f"üì± <b>–ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥:</b> {target_user_data.get('last_login', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
    info_text += f"üë• <b>—Ä–µ—Ñ–µ—Ä–∞–ª—ã:</b> {target_user_data.get('referrals', 0)}\n"
    info_text += f"üí∏ <b>–∑–∞—Ä–∞–±–æ—Ç–æ–∫ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b> ${format_money(target_user_data.get('referral_earnings', 0))}\n"
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if target_user_data.get('phone_number'):
        info_text += f"üìû <b>—Ç–µ–ª–µ—Ñ–æ–Ω:</b> {target_user_data.get('phone_number')}\n"
    if target_user_data.get('email'):
        info_text += f"üìß <b>email:</b> {target_user_data.get('email')}\n"
    if target_user_data.get('age'):
        info_text += f"üéÇ <b>–≤–æ–∑—Ä–∞—Å—Ç:</b> {target_user_data.get('age')}\n"
    if target_user_data.get('city'):
        info_text += f"üèôÔ∏è <b>–≥–æ—Ä–æ–¥:</b> {target_user_data.get('city')}\n"
    if target_user_data.get('country'):
        info_text += f"üåç <b>—Å—Ç—Ä–∞–Ω–∞:</b> {target_user_data.get('country')}\n"
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    preferences = target_user_data.get('preferences', {})
    
    info_text += f"\n‚öôÔ∏è <b>–Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
    info_text += f"‚Ä¢ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'–≤–∫–ª' if preferences.get('notifications', True) else '–≤—ã–∫–ª'}\n"
    info_text += f"‚Ä¢ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —Ä–µ–∂–∏–º: {'–≤–∫–ª' if preferences.get('privacy_mode', False) else '–≤—ã–∫–ª'}\n"
    info_text += f"‚Ä¢ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: {'–≤–∫–ª' if preferences.get('auto_save', True) else '–≤—ã–∫–ª'}\n"
    
    await message.answer(info_text, parse_mode='HTML')
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    await state.clear()
    await admin_panel(message)

 

@dp.message(F.text.lower().contains('–≤—ã–¥–∞—Ç—å') & (F.text.lower().contains('–¥–µ–Ω—å–≥–∏') | F.text.lower().contains('–±–∞–ª–∞–Ω—Å')))
async def give_money_button(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.chat.type != 'private':
        return
    
    user_id = message.from_user.id
    
    if user_id not in ADMIN_IDS:
        await message.answer('—É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ')
        return
    await message.answer('üßæ –Ω–∞–ø–∏—à–∏ —é–∑ –∫–æ–º—É –≤—ã–¥–∞—Ç—å –¥–µ–Ω—å–≥–∏', reply_markup=ReplyKeyboardRemove())
    
    await state.update_data(current_action='give_money')
    await state.set_state(AdminState.waiting_for_target)

@dp.message(AdminState.waiting_for_give_amount)
async def give_amount_entered(message: types.Message, state: FSMContext):
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.chat.type != 'private':
        return
    
    user_id = message.from_user.id
    
    if user_id not in ADMIN_IDS:
        return
    amount_text = message.text.strip()
    
    try:
        amount = parse_amount(amount_text)
    
    except:
        await message.answer('–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã')
        await state.clear()
        return
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—É–º–º–∞ –±–æ–ª—å—à–µ 0
    if amount <= 0:
        await message.answer('—Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0')
        await state.clear()
        return
    
    await state.update_data(give_amount=amount)
    
    await message.answer('üßæ –Ω–∞–ø–∏—à–∏ –ø—Ä–∏—á–∏–Ω—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è')
    await state.set_state(AdminState.waiting_for_give_reason)

@dp.message(AdminState.waiting_for_give_reason)
async def give_reason_entered(message: types.Message, state: FSMContext):
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.chat.type != 'private':
        return
    
    user_id = message.from_user.id
    
    if user_id not in ADMIN_IDS:
        return
    reason = message.text.strip()
    
    data = await state.get_data()
    target_user_id = data.get('target_user_id')
    
    amount = data.get('give_amount')
    if not target_user_id or amount is None:
        await message.answer('–æ—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –Ω–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ')
        await state.clear()
        return
    # –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ
    if target_user_id in users:
        users[target_user_id]['balance'] = users[target_user_id].get('balance', 0) + int(amount)
        save_users()
        try:
            await bot.send_message(
                int(target_user_id),
                f"üíµ <b>—Ç–≤–æ–π –±–∞–ª–∞–Ω—Å –±—ã–ª –ø–æ–ø–æ–ª–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</b>\n\n"
                f"‚ûï <b>—Å—É–º–º–∞:</b> ${format_money(amount)}\n"
                f"üí≥ <b>–Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:</b> ${format_money(users[target_user_id]['balance'])}\n"
                f"üßæ <b>–ø—Ä–∏—á–∏–Ω–∞:</b> {reason}",
                parse_mode='HTML'
    
    )
        except Exception as e:
            print(f'–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏: {e}')
        await message.answer(f"–ø–æ–ø–æ–ª–Ω–µ–Ω –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {users[target_user_id].get('nick','?')} –Ω–∞ ${format_money(amount)}")
    else:
        await message.answer('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
    await state.clear()
    await admin_panel(message)

@dp.message(AdminState.waiting_for_tax_percent)
async def tax_percent_entered(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –Ω–∞–ª–æ–≥–∞"""
    user_id = message.from_user.id
    
    if user_id not in ADMIN_IDS:
        return
    
    try:
        new_percent = int(message.text.strip())
        
        if new_percent < 1 or new_percent > 50:
            await message.answer('‚ùå –ø—Ä–æ—Ü–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 50. –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:')
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        global WEALTH_TAX_PERCENT
        WEALTH_TAX_PERCENT = new_percent
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        save_tax_settings()
        
        await message.answer(
            f'‚úÖ <b>–ø—Ä–æ—Ü–µ–Ω—Ç –Ω–∞–ª–æ–≥–∞ –∏–∑–º–µ–Ω–µ–Ω!</b>\n\n'
            f'üí∞ <b>–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç:</b> {WEALTH_TAX_PERCENT}%\n'
            f'‚è∞ <b>–∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø—è—Ç –≤ —Å–∏–ª—É:</b> –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º —Å–±–æ—Ä–µ –Ω–∞–ª–æ–≥–∞',
            parse_mode='HTML'
        )
        
        print(f"‚úÖ –ê–¥–º–∏–Ω {user_id} –∏–∑–º–µ–Ω–∏–ª –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–∞–ª–æ–≥–∞ –Ω–∞ {WEALTH_TAX_PERCENT}%")
        
    except ValueError:
        await message.answer('‚ùå –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 50:')
        return
    
    await state.clear()
    await admin_panel(message)

@dp.message(AdminState.waiting_for_commission_percent)
async def commission_percent_entered(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∫–æ–º–∏—Å—Å–∏–∏"""
    user_id = message.from_user.id
    
    if user_id not in ADMIN_IDS:
        return
    
    try:
        new_percent = int(message.text.strip())
        
        if new_percent < 1 or new_percent > 50:
            await message.answer('‚ùå –ø—Ä–æ—Ü–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 50. –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:')
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        global TRANSFER_COMMISSION_TOP20
        TRANSFER_COMMISSION_TOP20 = new_percent
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        save_tax_settings()
        
        await message.answer(
            f'‚úÖ <b>–ø—Ä–æ—Ü–µ–Ω—Ç –∫–æ–º–∏—Å—Å–∏–∏ –∏–∑–º–µ–Ω–µ–Ω!</b>\n\n'
            f'üí∞ <b>–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç:</b> {TRANSFER_COMMISSION_TOP20}%\n'
            f'‚è∞ <b>–∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø—è—Ç –≤ —Å–∏–ª—É:</b> –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –ø–µ—Ä–µ–≤–æ–¥–µ',
            parse_mode='HTML'
        )
        
        print(f"‚úÖ –ê–¥–º–∏–Ω {user_id} –∏–∑–º–µ–Ω–∏–ª –ø—Ä–æ—Ü–µ–Ω—Ç –∫–æ–º–∏—Å—Å–∏–∏ –Ω–∞ {TRANSFER_COMMISSION_TOP20}%")
        
    except ValueError:
        await message.answer('‚ùå –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 50:')
        return
    
    await state.clear()
    await admin_panel(message)

@dp.message(AdminState.waiting_for_unban_reason)
async def unban_reason_entered(message: types.Message, state: FSMContext):
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.chat.type != 'private':
        return
    
    user_id = message.from_user.id
    
    if user_id not in ADMIN_IDS:
        return
    reason = message.text.strip()
    
    data = await state.get_data()
    target_user_id = data.get('target_user_id')
    
    success, message_text = await remove_ban(target_user_id)
    await message.answer(message_text + f"\nüßæ –ø—Ä–∏—á–∏–Ω–∞: {reason}")
    await state.clear()
    await admin_panel(message)

@dp.message(AdminState.waiting_for_annul_reason)
async def annul_reason_entered(message: types.Message, state: FSMContext):
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.chat.type != 'private':
        return
    
    user_id = message.from_user.id
    
    if user_id not in ADMIN_IDS:
        return
    reason = message.text.strip()
    
    data = await state.get_data()
    target_user_id = data.get('target_user_id')
    
    await message.answer('–Ω–∞–ø–∏—à–∏ —Å—É–º–º—É –¥–ª—è –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è (—á–∏—Å–ª–æ –∏–ª–∏ "–≤—Å–µ")')
    await state.update_data(annul_reason=reason)
    
    await state.set_state(AdminState.waiting_for_balance_amount)

@dp.message(F.text.lower().contains('–æ–±–Ω—É–ª–∏—Ç—å') & F.text.lower().contains('–±–∞–ª–∞–Ω—Å') & F.text.lower().contains('–≤—Å–µ–º'))
async def reset_all_balance_button(message: types.Message, state: FSMContext):
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.chat.type != 'private':
        return
    
    user_id = message.from_user.id
    
    user_id_str = str(user_id)
    collect_user_info(message, user_id_str)
    if user_id not in ADMIN_IDS:
        await message.answer('—É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ')
        return
    
    await message.answer(
        '‚ö†Ô∏è <b>–≤–Ω–∏–º–∞–Ω–∏–µ!</b>\n\n'
        '—Ç—ã —Å–æ–±–∏—Ä–∞–µ—à—å—Å—è –æ–±–Ω—É–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å <b>–í–°–ï–ú</b> –∏–≥—Ä–æ–∫–∞–º!\n\n'
        '—ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!\n\n'
        '–Ω–∞–ø–∏—à–∏ "–¥–∞" –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ "–Ω–µ—Ç" –¥–ª—è –æ—Ç–º–µ–Ω—ã:',
        parse_mode='HTML',
    
    reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(AdminState.waiting_for_reset_all_balance_confirm)

@dp.message(AdminState.waiting_for_reset_all_balance_confirm)
async def reset_all_balance_confirm(message: types.Message, state: FSMContext):
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.chat.type != 'private':
        return
    
    user_id = message.from_user.id
    
    if user_id not in ADMIN_IDS:
        return
    
    confirm_text = message.text.strip().lower()
    
    if confirm_text == '–¥–∞':
        # –æ–±–Ω—É–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
        reset_count = 0
        
        for user_id_str, user_data in users.items():
            if 'balance' in user_data:
                user_data['balance'] = 0
                reset_count += 1
        
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        save_users()
        
        await message.answer(
            f'‚úÖ <b>–±–∞–ª–∞–Ω—Å –æ–±–Ω—É–ª–µ–Ω –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º!</b>\n\n'
            f'üìä <b>–æ–±–Ω—É–ª–µ–Ω–æ –∏–≥—Ä–æ–∫–æ–≤:</b> {reset_count}\n'
            f'üí∞ <b>–≤—Å–µ –±–∞–ª–∞–Ω—Å—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤:</b> $0',
            parse_mode='HTML'
        )
        
        safe_print(f"–∞–¥–º–∏–Ω {user_id} –æ–±–Ω—É–ª–∏–ª –±–∞–ª–∞–Ω—Å –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º ({reset_count} –∏–≥—Ä–æ–∫–æ–≤)")
        
    elif confirm_text == '–Ω–µ—Ç':
        await message.answer('‚ùå –æ–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞')
    else:
        await message.answer('–Ω–∞–ø–∏—à–∏ "–¥–∞" –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ "–Ω–µ—Ç" –¥–ª—è –æ—Ç–º–µ–Ω—ã')
        return
    
    await state.clear()
    await admin_panel(message)
@dp.message(AdminState.waiting_for_add_admin_username)
async def add_admin_username_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ username –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞"""
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.chat.type != 'private':
        return
    
    user_id = message.from_user.id
    
    if user_id not in ADMIN_IDS:
        return
    
    username = message.text.strip().lower()
    
    # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ–≥–æ –Ω–∞–ø–∏—Å–∞–ª
    if username.startswith('@'):
        username = username[1:]
    
    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    target_user_id = None
    
    target_nick = None
    
    for uid, user_data in users.items():
        if user_data.get('tg_username', '').lower() == username:
            target_user_id = uid
            target_nick = user_data.get('nick', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            break
    
    if not target_user_id:
        await message.answer(f'‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')
        await state.clear()
        await admin_panel(message)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω–æ–º
    if int(target_user_id) in ADMIN_IDS:
        await message.answer(f'‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º')
        await state.clear()
        await admin_panel(message)
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞–¥–º–∏–Ω—ã
    ADMIN_IDS.add(int(target_user_id))
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    # –ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ADMIN_IDS –≤ —Ñ–∞–π–ª
    
    await message.answer(
        f'‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} ({target_nick}) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã!</b>\n\n'
        f'üëë <b>ID:</b> {target_user_id}\n'
        f'üìù <b>Nick:</b> {target_nick}\n'
        f'üîê <b>Username:</b> @{username}',
        parse_mode='HTML'
    
    )
    
    safe_print(f"–∞–¥–º–∏–Ω {user_id} –¥–æ–±–∞–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} (@{username}) –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã")
    
    await state.clear()
    await admin_panel(message)

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–°–¢–û–Ø–ù–ò–ô –î–õ–Ø –ü–†–û–ú–û–ö–û–î–û–í ===

@dp.message(AdminState.waiting_for_promo_code)
async def promo_code_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    user_id = message.from_user.id
    
    if user_id not in ADMIN_IDS:
        return
    
    promo_code = message.text.strip().upper()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–º–æ–∫–æ–¥ —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤ –∏ —Ü–∏—Ñ—Ä
    if not promo_code.isalnum():
        await message.answer('‚ùå –ø—Ä–æ–º–æ–∫–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤ –∏ —Ü–∏—Ñ—Ä')
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π
    if len(promo_code) < 3:
        await message.answer('‚ùå –ø—Ä–æ–º–æ–∫–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞')
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
    if len(promo_code) > 20:
        await message.answer('‚ùå –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 20 —Å–∏–º–≤–æ–ª–æ–≤')
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if promo_code in promo_codes:
        await message.answer('‚ùå —Ç–∞–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(promo_code=promo_code)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã
    await state.set_state(AdminState.waiting_for_promo_reward)
    
    markup = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [KeyboardButton(text='‚¨ÖÔ∏è –æ—Ç–º–µ–Ω–∞')]
    ])
    
    await message.answer(
        f'‚úÖ <b>–ø—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–Ω—è—Ç!</b>\n\n'
        f'üé´ <b>–ø—Ä–æ–º–æ–∫–æ–¥:</b> {promo_code}\n\n'
        f'üí∞ <b>—Ç–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ –Ω–∞–≥—Ä–∞–¥—É:</b>\n'
        f'üìù –Ω–∞–ø–∏—à–∏ —Å—É–º–º—É –≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1000000000)',
        parse_mode='HTML',
        reply_markup=markup
    )

@dp.message(AdminState.waiting_for_promo_reward)
async def promo_reward_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–≥—Ä–∞–¥—ã –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    user_id = message.from_user.id
    
    if user_id not in ADMIN_IDS:
        return
    
    reward_text = message.text.strip()
    
    # –ü–∞—Ä—Å–∏–º —Å—É–º–º—É
    try:
        reward = parse_amount(reward_text)
        if reward <= 0:
            await message.answer('‚ùå –Ω–∞–≥—Ä–∞–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0')
            return
    except:
        await message.answer('‚ùå –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –Ω–∞–ø–∏—à–∏ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1000000000)')
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    promo_code = data.get('promo_code')
    
    if not promo_code:
        await message.answer('‚ùå –æ—à–∏–±–∫–∞: –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏')
        await state.clear()
        await promo_codes_section(message)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–≥—Ä–∞–¥—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(reward=reward)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–π
    await state.set_state(AdminState.waiting_for_promo_activations)
    
    markup = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [KeyboardButton(text='‚¨ÖÔ∏è –æ—Ç–º–µ–Ω–∞')]
    ])
    
    await message.answer(
        f'üí∞ <b>–Ω–∞–≥—Ä–∞–¥–∞ –ø—Ä–∏–Ω—è—Ç–∞!</b>\n\n'
        f'üé´ <b>–ø—Ä–æ–º–æ–∫–æ–¥:</b> {promo_code}\n'
        f'üí∞ <b>–Ω–∞–≥—Ä–∞–¥–∞:</b> ${format_money(reward)}\n\n'
        f'üìä <b>—Ç–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–π:</b>\n'
        f'üìù –Ω–∞–ø–∏—à–∏ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10) –∏–ª–∏ "–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ"',
        parse_mode='HTML',
        reply_markup=markup
    )

@dp.message(AdminState.waiting_for_promo_activations)
async def promo_activations_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ª–∏–º–∏—Ç–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    user_id = message.from_user.id
    
    if user_id not in ADMIN_IDS:
        return
    
    activations_text = message.text.strip().lower()
    
    # –ü–∞—Ä—Å–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π
    if activations_text == '–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ':
        activations = -1  # -1 –æ–∑–Ω–∞—á–∞–µ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
    else:
        try:
            activations = int(activations_text)
            if activations <= 0:
                await message.answer('‚ùå –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0')
                return
        except:
            await message.answer('‚ùå –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –Ω–∞–ø–∏—à–∏ —á–∏—Å–ª–æ –∏–ª–∏ "–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ"')
            return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    promo_code = data.get('promo_code')
    reward = data.get('reward')
    
    if not promo_code or not reward:
        await message.answer('‚ùå –æ—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏')
        await state.clear()
        await promo_codes_section(message)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(activations=activations)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞—Ç—ã –∏—Å—Ç–µ—á–µ–Ω–∏—è
    await state.set_state(AdminState.waiting_for_promo_expiry_date)
    
    markup = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [KeyboardButton(text='‚è∞ —É–∫–∞–∑–∞—Ç—å —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è'), KeyboardButton(text='‚ôæÔ∏è –±–µ—Å—Å—Ä–æ—á–Ω–æ')],
        [KeyboardButton(text='‚¨ÖÔ∏è –æ—Ç–º–µ–Ω–∞')]
    ])
    
    expiry_text = "–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ" if activations == -1 else f"{activations} —Ä–∞–∑"
    
    await message.answer(
        f'üìä <b>–ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–π –ø—Ä–∏–Ω—è—Ç!</b>\n\n'
        f'üé´ <b>–ø—Ä–æ–º–æ–∫–æ–¥:</b> {promo_code}\n'
        f'üí∞ <b>–Ω–∞–≥—Ä–∞–¥–∞:</b> ${format_money(reward)}\n'
        f'üìä <b>–∞–∫—Ç–∏–≤–∞—Ü–∏–∏:</b> {expiry_text}\n\n'
        f'‚è∞ <b>—Ç–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:</b>\n'
        f'üìÖ –≤—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é –Ω–∏–∂–µ',
        parse_mode='HTML',
        reply_markup=markup
    )

@dp.message(AdminState.waiting_for_promo_expiry_date)
async def promo_expiry_date_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    user_id = message.from_user.id
    
    if user_id not in ADMIN_IDS:
        return
    
    choice = message.text.strip()
    
    if choice == '‚ôæÔ∏è –±–µ—Å—Å—Ä–æ—á–Ω–æ':
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –±–µ–∑ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
        await create_promo_final(message, state, expiry=None)
        return
    elif choice == '‚è∞ —É–∫–∞–∑–∞—Ç—å —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è':
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞—Ç—ã
        await state.set_state(AdminState.waiting_for_promo_expiry_time)
        
        markup = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
            [KeyboardButton(text='‚¨ÖÔ∏è –æ—Ç–º–µ–Ω–∞')]
        ])
        
        await message.answer(
            'üìÖ <b>—É–∫–∞–∑–∞–Ω–∏–µ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è</b>\n\n'
            'üìù –Ω–∞–ø–∏—à–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n'
            'üí° –Ω–∞–ø—Ä–∏–º–µ—Ä: 01.09.2025 15:00\n'
            '‚ùå –¥–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏ "–æ—Ç–º–µ–Ω–∞"',
            parse_mode='HTML',
            reply_markup=markup
        )
        return
    else:
        await message.answer('‚ùå –≤—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π')
        return

@dp.message(AdminState.waiting_for_promo_expiry_time)
async def promo_expiry_time_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    user_id = message.from_user.id
    
    if user_id not in ADMIN_IDS:
        return
    
    expiry_text = message.text.strip()
    
    # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
    try:
        expiry_date = datetime.datetime.strptime(expiry_text, '%d.%m.%Y %H:%M')
        expiry_timestamp = expiry_date.timestamp()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º
        if expiry_timestamp <= datetime.datetime.now().timestamp():
            await message.answer('‚ùå –¥–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º')
            return
    except:
        await message.answer('‚ùå –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú')
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Å—Ä–æ–∫–æ–º –¥–µ–π—Å—Ç–≤–∏—è
    await create_promo_final(message, state, expiry=expiry_timestamp)

async def create_promo_final(message: types.Message, state: FSMContext, expiry=None):
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    user_id = message.from_user.id
    user_id_str = str(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    promo_code = data.get('promo_code')
    reward = data.get('reward')
    activations = data.get('activations')
    
    if not all([promo_code, reward, activations is not None]):
        await message.answer('‚ùå –æ—à–∏–±–∫–∞: –Ω–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–∞–π–¥–µ–Ω—ã')
        await state.clear()
        await promo_codes_section(message)
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
    promo_codes[promo_code] = {
        'reward': reward,
        'activations': activations,
        'current_activations': 0,
        'expiry': expiry,
        'created_by': user_id_str,
        'created_at': datetime.datetime.now().timestamp(),
        'used_by': []
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥—ã
    save_promo_codes()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
    expiry_text = "–±–µ—Å—Å—Ä–æ—á–Ω–æ" if expiry is None else datetime.datetime.fromtimestamp(expiry).strftime('%d.%m.%Y %H:%M')
    activations_text = "–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ" if activations == -1 else f"{activations} —Ä–∞–∑"
    
    # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ–º–æ–∫–æ–¥
    bot_username = (await bot.me()).username
    promo_link = f"https://t.me/{bot_username}?start=promo_{promo_code}"
    
    success_text = f"‚úÖ <b>–ø—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>\n\n"
    success_text += f"üé´ <b>–ø—Ä–æ–º–æ–∫–æ–¥:</b> {promo_code}\n"
    success_text += f"üí∞ <b>–Ω–∞–≥—Ä–∞–¥–∞:</b> ${format_money(reward)}\n"
    success_text += f"üìä <b>–∞–∫—Ç–∏–≤–∞—Ü–∏–∏:</b> {activations_text}\n"
    success_text += f"‚è∞ <b>—Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:</b> {expiry_text}\n"
    success_text += f"üëë <b>—Å–æ–∑–¥–∞–ª:</b> {user_id_str}\n\n"
    success_text += "üîó <b>—Å—Å—ã–ª–∫–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:</b>\n"
    success_text += f"<code>{promo_link}</code>\n\n"
    success_text += "üí° <b>–∏–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç –ø–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥!</b>\n\n"
    success_text += "üéâ <b>–ø—Ä–æ–º–æ–∫–æ–¥ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!</b>"
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Ä–∞–∑–¥–µ–ª –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
    await promo_codes_section(message)

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö –û–¢–ú–ï–ù–´ –ò –ö–û–õ–ë–≠–ö–û–í ===

@dp.message(F.text == '‚¨ÖÔ∏è –æ—Ç–º–µ–Ω–∞')
async def cancel_promo_creation(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    user_id = message.from_user.id
    
    if user_id not in ADMIN_IDS:
        return
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Ä–∞–∑–¥–µ–ª –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
    await promo_codes_section(message)

@dp.callback_query(lambda c: c.data.startswith('delete_promo_'))
async def delete_promo_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    user_id = callback.from_user.id
    
    if user_id not in ADMIN_IDS:
        await callback.answer('—É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏', show_alert=True)
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏–∑ callback_data
    promo_code = callback.data.replace('delete_promo_', '')
    
    if promo_code not in promo_codes:
        await callback.answer('–ø—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω', show_alert=True)
        return
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
    del promo_codes[promo_code]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥—ã
    save_promo_codes()
    
    await callback.answer(f'‚úÖ –ø—Ä–æ–º–æ–∫–æ–¥ {promo_code} —É–¥–∞–ª–µ–Ω!', show_alert=True)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.edit_text(
        f'üóëÔ∏è <b>–ø—Ä–æ–º–æ–∫–æ–¥ —É–¥–∞–ª–µ–Ω!</b>\n\n'
        f'üé´ <b>–ø—Ä–æ–º–æ–∫–æ–¥:</b> {promo_code}\n'
        f'‚úÖ <b>—Å—Ç–∞—Ç—É—Å:</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω\n\n'
        f'üîÑ <b>–æ–±–Ω–æ–≤–ª—è—é —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤...</b>',
        parse_mode='HTML'
    )
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Ä–∞–∑–¥–µ–ª –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
    await callback.message.answer('üîÑ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω')
    await promo_codes_section(callback.message)

@dp.callback_query(lambda c: c.data == 'cancel_delete_promo')
async def cancel_delete_promo_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–∞ –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    user_id = callback.from_user.id
    
    if user_id not in ADMIN_IDS:
        await callback.answer('—É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏', show_alert=True)
        return
    
    await callback.answer('‚ùå —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', show_alert=True)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Ä–∞–∑–¥–µ–ª –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
    await promo_codes_section(callback.message)

@dp.message(SettingsState.waiting_for_new_nick)
async def new_nick_handler(message: types.Message, state: FSMContext):
    """–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –Ω–∏–∫–∞"""
    user_id = message.from_user.id
    user_id_str = str(user_id)
    
    if user_id_str not in users:
        await message.answer('—Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π /start')
        await state.clear()
        return
    
    user_data = users[user_id_str]
    new_nick = message.text.strip()
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –Ω–∏–∫–∞
    if len(new_nick) < 3:
        await message.answer('‚ùå –Ω–∏–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞')
        return
    
    if len(new_nick) > 20:
        await message.answer('‚ùå –Ω–∏–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 20 —Å–∏–º–≤–æ–ª–æ–≤')
        return
    
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π –Ω–∏–∫ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
    old_nick = user_data.get('nick', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    
    # –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–∏–∫
    user_data['nick'] = new_nick
    save_users()
    
    await message.answer(
        f'‚úÖ <b>–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!</b>\n\n'
        f'üë§ <b>—Å—Ç–∞—Ä—ã–π –Ω–∏–∫:</b> {old_nick}\n'
        f'üë§ <b>–Ω–æ–≤—ã–π –Ω–∏–∫:</b> {new_nick}',
        parse_mode='HTML'
    )
    
    await state.clear()
    
    # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
    await show_settings_menu(message, user_id_str)

@dp.message(F.text == '‚ö†Ô∏è –Ω–∞–∫–∞–∑–∞–Ω–∏—è')
async def punishments_section(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–¥–µ–ª–∞ –Ω–∞–∫–∞–∑–∞–Ω–∏–π"""
    user_id = message.from_user.id
    
    user_id_str = str(user_id)
    
    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS:
        await message.answer('—É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏')
        return
    
    markup = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
    
    [KeyboardButton(text='–≤—ã–¥–∞—Ç—å –≤–∞—Ä–Ω ‚ö†Ô∏è'), KeyboardButton(text='–≤—ã–¥–∞—Ç—å –±–∞–Ω üö´')],
        [KeyboardButton(text='—Å–Ω—è—Ç—å –≤–∞—Ä–Ω ‚úÖ'), KeyboardButton(text='—Å–Ω—è—Ç—å –±–∞–Ω ‚úÖ')],
    
    [KeyboardButton(text='‚¨ÖÔ∏è –Ω–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å')]
    ])
    
    await message.answer(
        '‚ö†Ô∏è <b>—Ä–∞–∑–¥–µ–ª –Ω–∞–∫–∞–∑–∞–Ω–∏–π</b>\n\n–≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:',
        parse_mode='HTML',
    
    reply_markup=markup
    )

@dp.message(F.text == 'üí∏ –≤–∞–ª—é—Ç–∞')
async def currency_section(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–¥–µ–ª–∞ –≤–∞–ª—é—Ç—ã"""
    user_id = message.from_user.id
    
    user_id_str = str(user_id)
    
    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS:
        await message.answer('—É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏')
        return
    
    markup = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
    
    [KeyboardButton(text='–∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞—Ç—å –±–∞–ª–∞–Ω—Å üí∞'), KeyboardButton(text='–≤—ã–¥–∞—Ç—å –¥–µ–Ω—å–≥–∏ üíµ')],
        [KeyboardButton(text='–æ–±–Ω—É–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å –≤—Å–µ–º üí∏')],
    
    [KeyboardButton(text='‚¨ÖÔ∏è –Ω–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å')]
    ])
    
    await message.answer(
        'üí∏ <b>—Ä–∞–∑–¥–µ–ª –≤–∞–ª—é—Ç—ã</b>\n\n–≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:',
        parse_mode='HTML',
    
    reply_markup=markup
    )

@dp.message(F.text == 'üìã –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö')
async def database_section(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–¥–µ–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    user_id = message.from_user.id
    
    user_id_str = str(user_id)
    
    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS:
        await message.answer('—É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏')
        return
    
    markup = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
    
    [KeyboardButton(text='–ø—Ä–æ–±–∏—Ç—å —é–∑ üîç'), KeyboardButton(text='–ø—Ä–æ—Å–º–æ—Ç—Ä –ë–î üìä')],
        [KeyboardButton(text='—ç–∫—Å–ø–æ—Ä—Ç –ë–î üìã')],
    
    [KeyboardButton(text='‚¨ÖÔ∏è –Ω–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å')]
    ])
    
    await message.answer(
        'üìã <b>—Ä–∞–∑–¥–µ–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</b>\n\n–≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:',
        parse_mode='HTML',
    
    reply_markup=markup
    )

@dp.message(F.text == 'üí∞ –Ω–∞–ª–æ–≥–∏')
async def taxes_section(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–¥–µ–ª–∞ –Ω–∞–ª–æ–≥–æ–≤"""
    user_id = message.from_user.id
    
    user_id_str = str(user_id)
    
    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS:
        await message.answer('—É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏')
        return
    
    markup = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
    
    [KeyboardButton(text='—Å–æ–±—Ä–∞—Ç—å –Ω–∞–ª–æ–≥ üí∞'), KeyboardButton(text='–Ω–∞–ª–æ–≥ –Ω–∞ –±–æ–≥–∞—Ç—Å—Ç–≤–æ ‚öôÔ∏è')],
        [KeyboardButton(text='–∫–æ–º–∏—Å—Å–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ ‚öôÔ∏è')],
    
    [KeyboardButton(text='‚¨ÖÔ∏è –Ω–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å')]
    ])
    
    await message.answer(
        'üí∞ <b>—Ä–∞–∑–¥–µ–ª –Ω–∞–ª–æ–≥–æ–≤</b>\n\n–≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:',
        parse_mode='HTML',
    
    reply_markup=markup
    )

async def promo_codes_section(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–¥–µ–ª–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤"""
    user_id = message.from_user.id
    
    user_id_str = str(user_id)
    
    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS:
        await message.answer('—É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏')
        return
    
    markup = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [KeyboardButton(text='‚ûï —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥'), KeyboardButton(text='üìã —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤')],
        [KeyboardButton(text='üóëÔ∏è —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥'), KeyboardButton(text='üìä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤')],
        [KeyboardButton(text='‚¨ÖÔ∏è –Ω–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å')]
    ])
    
    await message.answer(
        'üé´ <b>—Ä–∞–∑–¥–µ–ª –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤</b>\n\n–≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:',
        parse_mode='HTML',
        reply_markup=markup
    )

@dp.message(F.text == '‚ûï —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥')
async def create_promo_button(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    user_id = message.from_user.id
    
    user_id_str = str(user_id)
    
    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS:
        await message.answer('—É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏')
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
    markup = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [KeyboardButton(text='‚úèÔ∏è –Ω–∞–ø–∏—Å–∞—Ç—å —Å–∞–º–æ–º—É'), KeyboardButton(text='üé≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π')],
        [KeyboardButton(text='‚¨ÖÔ∏è –Ω–∞–∑–∞–¥ –≤ –ø—Ä–æ–º–æ–∫–æ–¥—ã')]
    ])
    
    await message.answer(
        '‚ûï <b>—Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞</b>\n\n'
        '–≤—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞:',
        parse_mode='HTML',
        reply_markup=markup
    )
@dp.message(F.text == '‚úèÔ∏è –Ω–∞–ø–∏—Å–∞—Ç—å —Å–∞–º–æ–º—É')
async def write_promo_manually(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –≤—Ä—É—á–Ω—É—é"""
    user_id = message.from_user.id
    
    user_id_str = str(user_id)
    
    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS:
        await message.answer('—É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏')
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
    await state.set_state(AdminState.waiting_for_promo_code)
    
    markup = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [KeyboardButton(text='‚¨ÖÔ∏è –æ—Ç–º–µ–Ω–∞')]
    ])
    
    await message.answer(
        '‚úèÔ∏è <b>–Ω–∞–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞</b>\n\n'
        'üìù –Ω–∞–ø–∏—à–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –≤ —á–∞—Ç\n'
        'üí° –ø—Ä–æ–º–æ–∫–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –±—É–∫–≤ –∏ —Ü–∏—Ñ—Ä\n'
        '‚ùå –¥–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏ "–æ—Ç–º–µ–Ω–∞"',
        parse_mode='HTML',
        reply_markup=markup
    )

@dp.message(F.text == 'üé≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π')
async def generate_promo_random(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    user_id = message.from_user.id
    
    user_id_str = str(user_id)
    
    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS:
        await message.answer('—É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏')
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥
    promo_code = generate_random_promo()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(promo_code=promo_code)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã
    await state.set_state(AdminState.waiting_for_promo_reward)
    
    markup = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [KeyboardButton(text='‚¨ÖÔ∏è –æ—Ç–º–µ–Ω–∞')]
    ])
    
    await message.answer(
        f'üé≤ <b>–ø—Ä–æ–º–æ–∫–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!</b>\n\n'
        f'üé´ <b>–ø—Ä–æ–º–æ–∫–æ–¥:</b> {promo_code}\n\n'
        f'üí∞ <b>—Ç–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ –Ω–∞–≥—Ä–∞–¥—É:</b>\n'
        f'üìù –Ω–∞–ø–∏—à–∏ —Å—É–º–º—É –≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1000000000)',
        parse_mode='HTML',
        reply_markup=markup
    )

@dp.message(F.text == 'üìã —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤')
async def list_promo_codes(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤"""
    user_id = message.from_user.id
    
    user_id_str = str(user_id)
    
    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS:
        await message.answer('—É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏')
        return
    
    if not promo_codes:
        await message.answer('üìã <b>—Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤</b>\n\n‚ùå –ø—Ä–æ–º–æ–∫–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', parse_mode='HTML')
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
    promo_list = "üìã <b>—Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:</b>\n\n"
    
    for code, data in promo_codes.items():
        expiry_date = "–±–µ—Å—Å—Ä–æ—á–Ω–æ"
        if data.get('expiry'):
            expiry_date = datetime.datetime.fromtimestamp(data['expiry']).strftime('%d.%m.%Y %H:%M')
        
        # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ–º–æ–∫–æ–¥
        bot_username = (await bot.me()).username
        promo_link = f"https://t.me/{bot_username}?start=promo_{code}"
        
        promo_list += f"üé´ <b>{code}</b>\n"
        promo_list += f"üí∞ –Ω–∞–≥—Ä–∞–¥–∞: ${format_money(data['reward'])}\n"
        promo_list += f"üìä –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {data['current_activations']}/{data['activations']}\n"
        promo_list += f"‚è∞ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {expiry_date}\n"
        promo_list += f"üëë —Å–æ–∑–¥–∞–ª: {data['created_by']}\n"
        promo_list += f"üîó <code>{promo_link}</code>\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    markup = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [KeyboardButton(text='‚¨ÖÔ∏è –Ω–∞–∑–∞–¥ –≤ –ø—Ä–æ–º–æ–∫–æ–¥—ã')]
    ])
    
    await message.answer(promo_list, parse_mode='HTML', reply_markup=markup)

@dp.message(F.text == 'üóëÔ∏è —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥')
async def delete_promo_button(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    user_id = message.from_user.id
    
    user_id_str = str(user_id)
    
    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS:
        await message.answer('—É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏')
        return
    
    if not promo_codes:
        await message.answer('üóëÔ∏è <b>—É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞</b>\n\n‚ùå –ø—Ä–æ–º–æ–∫–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', parse_mode='HTML')
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    promo_list = "üóëÔ∏è <b>–≤—ã–±–µ—Ä–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:</b>\n\n"
    
    markup = InlineKeyboardMarkup(inline_keyboard=[])
    
    for code in promo_codes.keys():
        markup.inline_keyboard.append([InlineKeyboardButton(text=code, callback_data=f'delete_promo_{code}')])
    
    markup.inline_keyboard.append([InlineKeyboardButton(text='‚¨ÖÔ∏è –æ—Ç–º–µ–Ω–∞', callback_data='cancel_delete_promo')])
    
    await message.answer(promo_list, parse_mode='HTML', reply_markup=markup)

@dp.message(F.text == 'üìä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤')
async def promo_statistics(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤"""
    user_id = message.from_user.id
    
    user_id_str = str(user_id)
    
    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS:
        await message.answer('—É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏')
        return
    
    if not promo_codes:
        await message.answer('üìä <b>—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤</b>\n\n‚ùå –ø—Ä–æ–º–æ–∫–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', parse_mode='HTML')
        return
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_promos = len(promo_codes)
    total_activations = sum(data['current_activations'] for data in promo_codes.values())
    total_rewards = sum(data['reward'] * data['current_activations'] for data in promo_codes.values())
    
    active_promos = sum(1 for code in promo_codes.keys() if is_promo_valid(code))
    expired_promos = total_promos - active_promos
    
    stats_text = f"üìä <b>—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤</b>\n\n"
    stats_text += f"üé´ <b>–≤—Å–µ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:</b> {total_promos}\n"
    stats_text += f"‚úÖ <b>–∞–∫—Ç–∏–≤–Ω—ã—Ö:</b> {active_promos}\n"
    stats_text += f"‚ùå <b>–∏—Å—Ç–µ–∫—à–∏—Ö:</b> {expired_promos}\n"
    stats_text += f"üî¢ <b>–≤—Å–µ–≥–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π:</b> {total_activations}\n"
    stats_text += f"üí∞ <b>–≤—ã–¥–∞–Ω–æ –Ω–∞–≥—Ä–∞–¥:</b> ${format_money(total_rewards)}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ —Å —Å—Å—ã–ª–∫–∞–º–∏
    if active_promos > 0:
        stats_text += "üîó <b>–∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã:</b>\n\n"
        
        for code, data in promo_codes.items():
            if is_promo_valid(code):
                # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ–º–æ–∫–æ–¥
                bot_username = (await bot.me()).username
                promo_link = f"https://t.me/{bot_username}?start=promo_{code}"
                
                stats_text += f"üé´ <b>{code}</b>\n"
                stats_text += f"üí∞ ${format_money(data['reward'])}\n"
                stats_text += f"üîó <code>{promo_link}</code>\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    markup = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [KeyboardButton(text='‚¨ÖÔ∏è –Ω–∞–∑–∞–¥ –≤ –ø—Ä–æ–º–æ–∫–æ–¥—ã')]
    ])
    
    await message.answer(stats_text, parse_mode='HTML', reply_markup=markup)

@dp.message(F.text == '‚¨ÖÔ∏è –Ω–∞–∑–∞–¥ –≤ –ø—Ä–æ–º–æ–∫–æ–¥—ã')
async def back_to_promo_section(message: types.Message):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ —Ä–∞–∑–¥–µ–ª –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤"""
    user_id = message.from_user.id
    
    user_id_str = str(user_id)
    
    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS:
        await message.answer('—É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏')
        return
    
    await promo_codes_section(message)

@dp.message(F.text == 'üè¶ –≤–∫–ª–∞–¥—ã')
async def deposits_section(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–¥–µ–ª–∞ –≤–∫–ª–∞–¥–æ–≤"""
    user_id = message.from_user.id
    
    user_id_str = str(user_id)
    
    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS:
        await message.answer('—É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏')
        return
    
    markup = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
    
    [KeyboardButton(text='üìà —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∫–ª–∞–¥–æ–≤'), KeyboardButton(text='üèÜ —Ç–æ–ø –≤–∫–ª–∞–¥–æ–≤')],
        [KeyboardButton(text='üßπ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–∫–ª–∞–¥ –∏–≥—Ä–æ–∫—É')],
    [KeyboardButton(text='üóëÔ∏è –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–∫–ª–∞–¥—ã –≤—Å–µ–º')],
        [KeyboardButton(text='‚¨ÖÔ∏è –Ω–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å')]
    
    ])
    
    await message.answer(
        'üè¶ <b>—Ä–∞–∑–¥–µ–ª –≤–∫–ª–∞–¥–æ–≤</b>\n\n–≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:',
        parse_mode='HTML',
    
    reply_markup=markup
    )

@dp.message(F.text == 'üßπ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–∫–ª–∞–¥ –∏–≥—Ä–æ–∫—É')
async def annul_deposit_user_prompt(message: types.Message, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –∞–¥–º–∏–Ω–∞ @username –∏–ª–∏ ID –∏–≥—Ä–æ–∫–∞ –¥–ª—è –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∫–ª–∞–¥–∞"""
    if message.chat.type != 'private':
        return
    if message.from_user.id not in ADMIN_IDS:
        await message.answer('—É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏')
        return
    await state.set_state(AdminState.waiting_for_annul_deposit_target)
    await message.answer('–ø—Ä–∏—à–ª–∏ @username –∏–ª–∏ ID –∏–≥—Ä–æ–∫–∞ –¥–ª—è –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∫–ª–∞–¥–∞')

@dp.message(AdminState.waiting_for_annul_deposit_target)
async def annul_deposit_user_execute(message: types.Message, state: FSMContext):
    if message.chat.type != 'private':
        return
    if message.from_user.id not in ADMIN_IDS:
        await message.answer('—É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏')
        return
    raw = (message.text or '').strip()
    target_id = None
    # –ø–æ–¥–¥–µ—Ä–∂–∫–∞ ID
    if raw.isdigit():
        target_id = raw
    else:
        # –ø–æ–¥–¥–µ—Ä–∂–∫–∞ @username
        uname = raw.lstrip('@').lower()
        for uid, data in users.items():
            if str(data.get('tg_username', '')).lower() == uname:
                target_id = uid
                break
    if not target_id or target_id not in users:
        await message.answer('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
        await state.clear()
        return
    if users[target_id].get('bank_deposit', 0) <= 0:
        await message.answer('—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–∫–ª–∞–¥–∞')
        await state.clear()
        return
    amount = users[target_id].get('bank_deposit', 0)
    users[target_id]['bank_deposit'] = 0
    users[target_id]['bank_deposit_time'] = 0
    save_users()
    await state.clear()
    await message.answer(f'‚úÖ –≤–∫–ª–∞–¥ –∏–≥—Ä–æ–∫–∞ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω –Ω–∞ —Å—É–º–º—É ${format_money(amount)}')
    # –í–æ–∑–≤—Ä–∞—Ç –≤ —Ä–∞–∑–¥–µ–ª –≤–∫–ª–∞–¥–æ–≤
    await deposits_section(message)

@dp.message(F.text == 'üóëÔ∏è –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–∫–ª–∞–¥—ã –≤—Å–µ–º')
async def annul_all_deposits(message: types.Message):
    """–∞–Ω–Ω—É–ª–∏—Ä—É–µ—Ç –≤–∫–ª–∞–¥—ã –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤"""
    user_id = message.from_user.id
    
    user_id_str = str(user_id)
    
    # —Å–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS:
        await message.answer('—É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏')
        return
    
    # –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_deposits = 0
    affected_users = 0
    
    for user_data in users.values():
        if user_data.get('bank_deposit', 0) > 0:
            total_deposits += user_data['bank_deposit']
            affected_users += 1
    
    if affected_users == 0:
        await message.answer('üìä —É –∏–≥—Ä–æ–∫–æ–≤ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∫–ª–∞–¥–æ–≤ –¥–ª—è –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è')
        return
    
    # —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='‚úÖ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data='confirm_annul_deposits')],
        [InlineKeyboardButton(text='‚ùå –æ—Ç–º–µ–Ω–∞', callback_data='cancel_annul_deposits')]
    ])
    
    await message.answer(
        f'üóëÔ∏è <b>–∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–≤</b>\n\n'
        f'üìä <b>—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n'
        f'‚Ä¢ –∑–∞—Ç—Ä–æ–Ω—É—Ç–æ –∏–≥—Ä–æ–∫–æ–≤: <b>{affected_users}</b>\n'
        f'‚Ä¢ –æ–±—â–∞—è —Å—É–º–º–∞ –≤–∫–ª–∞–¥–æ–≤: <b>${format_money(total_deposits)}</b>\n\n'
        f'‚ö†Ô∏è <b>–≤–Ω–∏–º–∞–Ω–∏–µ:</b> —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!\n'
        f'–≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –≤–∫–ª–∞–¥—ã –±—É–¥—É—Ç –æ–±–Ω—É–ª–µ–Ω—ã.',
        parse_mode='HTML',
        reply_markup=markup
    )

@dp.callback_query(lambda c: c.data == 'confirm_annul_deposits')
async def confirm_annul_deposits_callback(callback: types.CallbackQuery):
    """–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∫–ª–∞–¥–æ–≤"""
    user_id = callback.from_user.id
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS:
        await callback.answer('—É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏', show_alert=True)
        return
    
    # –∞–Ω–Ω—É–ª–∏—Ä—É–µ–º –≤–∫–ª–∞–¥—ã
    total_deposits = 0
    affected_users = 0
    
    for user_data in users.values():
        if user_data.get('bank_deposit', 0) > 0:
            total_deposits += user_data['bank_deposit']
            user_data['bank_deposit'] = 0
            user_data['bank_deposit_time'] = 0
            affected_users += 1
    
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    save_users()
    
    await callback.answer('‚úÖ –≤–∫–ª–∞–¥—ã –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω—ã!', show_alert=True)
    await callback.message.edit_text(
        f'‚úÖ <b>–≤–∫–ª–∞–¥—ã –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω—ã!</b>\n\n'
        f'üìä <b>—Ä–µ–∑—É–ª—å—Ç–∞—Ç:</b>\n'
        f'‚Ä¢ –∑–∞—Ç—Ä–æ–Ω—É—Ç–æ –∏–≥—Ä–æ–∫–æ–≤: <b>{affected_users}</b>\n'
        f'‚Ä¢ –æ–±–Ω—É–ª–µ–Ω–æ –≤–∫–ª–∞–¥–æ–≤: <b>${format_money(total_deposits)}</b>\n\n'
        f'üìÖ <b>–¥–∞—Ç–∞:</b> {datetime.datetime.now().strftime("%d.%m.%Y %H:%M:%S")}',
        parse_mode='HTML'
    )

@dp.callback_query(lambda c: c.data == 'cancel_annul_deposits')
async def cancel_annul_deposits_callback(callback: types.CallbackQuery):
    """–æ—Ç–º–µ–Ω–∞ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∫–ª–∞–¥–æ–≤"""
    user_id = callback.from_user.id
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS:
        await callback.answer('—É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏', show_alert=True)
        return
    
    await callback.answer('‚ùå –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', show_alert=True)
    await callback.message.edit_text(
        '‚ùå <b>–∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>\n\n'
        '–≤–∫–ª–∞–¥—ã –æ—Å—Ç–∞–ª–∏—Å—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π',
        parse_mode='HTML'
    )

@dp.message(F.text == 'üì£ —Ä–∞—Å—Å—ã–ª–∫–∞')
async def broadcast_section(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–¥–µ–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    user_id = message.from_user.id
    
    user_id_str = str(user_id)
    
    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS:
        await message.answer('—É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏')
        return
    
    markup = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
    
    [KeyboardButton(text='—Ä–∞—Å—Å—ã–ª–∫–∞ üì£')],
        [KeyboardButton(text='‚¨ÖÔ∏è –Ω–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å')]
    
    ])
    
    await message.answer(
        'üì£ <b>—Ä–∞–∑–¥–µ–ª —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n–≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:',
        parse_mode='HTML',
    
    reply_markup=markup
    )

@dp.message(F.text == '‚¨ÖÔ∏è –Ω–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å')
async def back_to_admin_panel(message: types.Message):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω—É—é –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    user_id = message.from_user.id
    
    user_id_str = str(user_id)
    
    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS:
        await message.answer('—É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏')
        return
    
    await admin_panel(message)

@dp.message(F.text.lower() == '—Å–æ–±—Ä–∞—Ç—å –Ω–∞–ª–æ–≥ üí∞')
async def collect_tax_button(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å–±–æ—Ä–∞ –Ω–∞–ª–æ–≥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    user_id = message.from_user.id
    
    user_id_str = str(user_id)
    
    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS:
        await message.answer('—É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ')
        return
    
    await message.answer('üí∞ –∑–∞–ø—É—Å–∫–∞—é —Å–±–æ—Ä –Ω–∞–ª–æ–≥–∞ –Ω–∞ –±–æ–≥–∞—Ç—Å—Ç–≤–æ...')
    
    try:
        await collect_wealth_tax()
        await message.answer('‚úÖ –Ω–∞–ª–æ–≥ –Ω–∞ –±–æ–≥–∞—Ç—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω!')
    except Exception as e:
        await message.answer(f'‚ùå –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –Ω–∞–ª–æ–≥–∞: {e}')

@dp.message(F.text == '–Ω–∞–ª–æ–≥ –Ω–∞ –±–æ–≥–∞—Ç—Å—Ç–≤–æ ‚öôÔ∏è')
async def wealth_tax_settings_button(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ª–æ–≥–∞ –Ω–∞ –±–æ–≥–∞—Ç—Å—Ç–≤–æ"""
    user_id = message.from_user.id
    
    user_id_str = str(user_id)
    
    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS:
        await message.answer('—É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ')
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
    markup = InlineKeyboardMarkup(inline_keyboard=[
    
    [InlineKeyboardButton(text=f'üìä —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç: {WEALTH_TAX_PERCENT}%', callback_data='wealth_tax_info')],
        [InlineKeyboardButton(text='üìù –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç', callback_data='wealth_tax_write')],
    
    [InlineKeyboardButton(text='‚ùå –æ—Ç–º–µ–Ω–∞', callback_data='wealth_tax_cancel')]
    ])
    
    await message.answer(
        f'‚öôÔ∏è <b>–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ª–æ–≥–∞ –Ω–∞ –±–æ–≥–∞—Ç—Å—Ç–≤–æ</b>\n\n'
        f'üí∞ <b>—Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç:</b> {WEALTH_TAX_PERCENT}%\n'
        f'‚è∞ <b>–ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å:</b> –∫–∞–∂–¥—ã–π —á–∞—Å\n'
        f'üë• <b>–ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫:</b> —Ç–æ–ø-15 –∏–≥—Ä–æ–∫–∞–º\n\n'
        f'–≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:',
        parse_mode='HTML',
    
    reply_markup=markup
    )

@dp.message(F.text == '–∫–æ–º–∏—Å—Å–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ ‚öôÔ∏è')
async def transfer_commission_settings_button(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∏—Å—Å–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤"""
    user_id = message.from_user.id
    
    user_id_str = str(user_id)
    
    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    collect_user_info(message, user_id_str)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS:
        await message.answer('—É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ')
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
    markup = InlineKeyboardMarkup(inline_keyboard=[
    
    [InlineKeyboardButton(text=f'üìä —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç: {TRANSFER_COMMISSION_TOP20}%', callback_data='transfer_commission_info')],
        [InlineKeyboardButton(text='üìù –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç', callback_data='transfer_commission_write')],
    
    [InlineKeyboardButton(text='‚ùå –æ—Ç–º–µ–Ω–∞', callback_data='transfer_commission_cancel')]
    ])
    
    await message.answer(
        f'‚öôÔ∏è <b>–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∏—Å—Å–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤</b>\n\n'
        f'üí∞ <b>—Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç:</b> {TRANSFER_COMMISSION_TOP20}%\n'
        f'üë• <b>–ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫:</b> —Ç–æ–ø-20 –∏–≥—Ä–æ–∫–∞–º\n'
        f'üí∏ <b>–∫–æ–º–∏—Å—Å–∏—è –±–µ—Ä–µ—Ç—Å—è —Å:</b> —Å—É–º–º—ã –ø–µ—Ä–µ–≤–æ–¥–∞\n\n'
        f'–≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:',
        parse_mode='HTML',
    
    reply_markup=markup
    )

# === –º–∏–Ω–∏-–∏–≥—Ä–∞ –±–∞—Å–∫–µ—Ç–±–æ–ª ===
# –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã –ø–æ —á–∞—Ç–∞–º
basket_games = {}

BASKET_IMAGE_PATH = 'img/basket.jpg'

@dp.message(F.text.lower().contains('–±–∞—Å–∫–µ—Ç') | F.text.lower().contains('–±—Å–∫'))
async def basket_create(message: types.Message):
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.chat.type == 'private':
        markup = InlineKeyboardMarkup(inline_keyboard=[
    
    [InlineKeyboardButton(text='‚ûï –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ —á–∞—Ç', url='https://t.me/Dodeperplaybot?startgroup')]
        ])
        await message.answer(
            'üèÄ –∏–≥—Ä–∞ –≤ –±–∞—Å–∫–µ—Ç–±–æ–ª –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–∞—Ö —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏\n\n'
            '–¥–æ–±–∞–≤—å –±–æ—Ç–∞ –≤ —á–∞—Ç, —á—Ç–æ–±—ã –∏–≥—Ä–∞—Ç—å!',
            reply_markup=markup
    
    )
        return
    
    user_id = message.from_user.id
    
    chat_id = message.chat.id
    user_id = message.from_user.id
    
    user_id_str = str(user_id)
    
    if user_id_str not in users or 'nick' not in users[user_id_str]:
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="—Å–æ–∑–¥–∞—Ç—å —á–µ–ª–æ–≤–µ—á–∫–∞", callback_data="create_human")
        await message.answer("—Ç—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ", reply_markup=keyboard.as_markup())
        return
    # –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∏–≥—Ä–∞, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ
    had_old = chat_id in basket_games
    if had_old:
        old_game = basket_games.get(chat_id) or {}
        try:
            old_msg_id = old_game.get('message_id')
            if old_msg_id:
                await bot.delete_message(chat_id, old_msg_id)
        except:
            pass
        basket_games.pop(chat_id, None)
        try:
            await message.answer('üîÑ —Å—Ç–∞—Ä–∞—è –∏–≥—Ä–∞ –≤ –±–∞—Å–∫–µ—Ç–±–æ–ª –æ—Ç–º–µ–Ω–µ–Ω–∞, —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤–∞—è')
        except Exception:
            pass
    
    text_lower = (message.text or '').lower()
    
    amount_match = re.search(r'(?:–±–∞—Å–∫–µ—Ç|–±—Å–∫)\s+(.+)$', text_lower)
    if not amount_match:
        await message.answer('—É–∫–∞–∂–∏ —Å—É–º–º—É –ø–æ—Å–ª–µ —Å–ª–æ–≤–∞ –±–∞—Å–∫–µ—Ç –∏–ª–∏ –±—Å–∫. –ø—Ä–∏–º–µ—Ä: –±–∞—Å–∫–µ—Ç 1–∫–∫ –∏–ª–∏ –±—Å–∫ 1–∫–∫ –∏–ª–∏ –±–∞—Å–∫–µ—Ç –≤—Å–µ')
        return
    amount_text = amount_match.group(1).strip()
    
    try:
        if amount_text in ['–≤—Å–µ', '–≤—Å—ë', '–∞–ª–ª']:
            amount = users[user_id_str].get('balance', 0)
        else:
            amount = parse_amount(amount_text)
    except Exception:
        await message.answer('–Ω–µ –ø–æ–Ω—è–ª —Å—É–º–º—É. –ø—Ä–∏–º–µ—Ä: –±–∞—Å–∫–µ—Ç 1–∫, –±–∞—Å–∫–µ—Ç 1–∫–∫, –±–∞—Å–∫–µ—Ç –≤—Å–µ')
        return
    if amount <= 0:
        await message.answer('—Å—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π')
        return
    if users[user_id_str].get('balance', 0) < amount:
        await message.answer(f"—É —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥. –Ω–∞ —Å—á–µ—Ç—É: <b>${format_money(users[user_id_str].get('balance',0))}</b>", parse_mode='HTML')
        return
    
    basket_games[chat_id] = {
        'initiator_id': user_id_str,
        'amount': amount,
        'status': 'pending',
        'message_id': None
    }
    
    kb = InlineKeyboardMarkup(inline_keyboard=[
    
    [InlineKeyboardButton(text='‚úÖ –∏–≥—Ä–∞—Ç—å', callback_data='basket_accept')],
        [InlineKeyboardButton(text='‚ùå –æ—Ç–º–µ–Ω–∞', callback_data='basket_cancel')]
    
    ])
    nick = users[user_id_str].get('nick','–∏–≥—Ä–æ–∫')
    
    link = f"<a href=\"tg://user?id={user_id}\"><b>{nick}</b></a>"
    caption = (
    
    f"üèÄ {link} —Ö–æ—á–µ—Ç —Å—ã–≥—Ä–∞—Ç—å –≤ –±–∞—Å–∫–µ—Ç–±–æ–ª\n\n"
        f"—Å—Ç–∞–≤–∫–∞ ‚Äî <b>${format_money(amount)}</b>\n\n"
        f"–∂–º–∏ –∏–≥—Ä–∞—Ç—å, –µ—Å–ª–∏ –≥–æ—Ç–æ–≤"
    )
    # –ø—Ä–µ–≤—å—é-–∫–∞—Ä—Ç–∏–Ω–∫–∞ –∫–∞–∫ —á–∞—Å—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ (–æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ)
    import os
    try:
        # –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if os.path.exists(BASKET_IMAGE_PATH):
            try:
                msg = await bot.send_photo(chat_id, types.FSInputFile(BASKET_IMAGE_PATH), caption=caption, parse_mode='HTML', reply_markup=kb)
            except Exception as e:
                # –æ–±—Ä–∞–±–æ—Ç–∫–∞ flood control —Å –µ–¥–∏–Ω–∏—á–Ω—ã–º —Ä–µ—Ç—Ä–∞–µ–º
                try:
                    from aiogram.exceptions import TelegramRetryAfter
                except Exception:
                    TelegramRetryAfter = None
                if TelegramRetryAfter and isinstance(e, TelegramRetryAfter):
                    try:
                        await asyncio.sleep(getattr(e, 'retry_after', 3) + 1)
                        msg = await bot.send_photo(chat_id, types.FSInputFile(BASKET_IMAGE_PATH), caption=caption, parse_mode='HTML', reply_markup=kb)
                    except Exception as e2:
                        print(f'–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –±–∞—Å–∫–µ—Ç–∞ –ø–æ—Å–ª–µ —Ä–µ—Ç—Ä–∞—è: {e2}')
                        msg = await message.answer(caption, parse_mode='HTML', reply_markup=kb)
                else:
                    print(f'–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –±–∞—Å–∫–µ—Ç–∞: {e}')
                    msg = await message.answer(caption, parse_mode='HTML', reply_markup=kb)
        else:
            msg = await message.answer(caption, parse_mode='HTML', reply_markup=kb)
    except Exception as e:
        # –æ–±—Ä–∞–±–æ—Ç–∫–∞ flood control –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        print(f'fallback –Ω–∞ —Ç–µ–∫—Å—Ç –∏ –æ–Ω —Ç–æ–∂–µ —É–ø–∞–ª: {e}')
        try:
            from aiogram.exceptions import TelegramRetryAfter
        except Exception:
            TelegramRetryAfter = None
        if TelegramRetryAfter and isinstance(e, TelegramRetryAfter):
            try:
                await asyncio.sleep(getattr(e, 'retry_after', 3) + 1)
                msg = await message.answer(caption, parse_mode='HTML', reply_markup=kb)
            except Exception as e2:
                print(f'–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –±–∞—Å–∫–µ—Ç–∞ –ø–æ—Å–ª–µ —Ä–µ—Ç—Ä–∞—è: {e2}')
                # –Ω–∞ –∫—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π ‚Äî –Ω–µ–º–æ–π –ø—Ä–æ–≤–∞–ª –±–µ–∑ —Å–ø–∞–º–∞
                msg = None
        else:
            # –∏–Ω—ã–µ –æ—à–∏–±–∫–∏ ‚Äî –Ω–µ —Å–ø–∞–º–∏–º –ø–æ–≤—Ç–æ—Ä–Ω–æ
            msg = None
    
    if msg is not None:
        basket_games[chat_id]['message_id'] = msg.message_id
@dp.callback_query(lambda c: c.data == 'basket_cancel')
async def basket_cancel(callback: types.CallbackQuery):
    chat_id = callback.message.chat.id
    
    game = basket_games.get(chat_id)
    if not game:
        await callback.answer('–∏–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', show_alert=False)
        return
    if str(callback.from_user.id) != game['initiator_id']:
        await callback.answer('–æ—Ç–º–µ–Ω–∏—Ç—å –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å', show_alert=True)
        return
    # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–æ—á–∫–æ–π
    try:
        await bot.delete_message(chat_id, game.get('message_id'))
    except:
        pass
    basket_games.pop(chat_id, None)
    await callback.answer('–æ—Ç–º–µ–Ω–µ–Ω–æ')

@dp.callback_query(lambda c: c.data == 'basket_accept')
async def basket_accept(callback: types.CallbackQuery):
    chat_id = callback.message.chat.id
    
    accepter_id = str(callback.from_user.id)
    game = basket_games.get(chat_id)
    
    if not game or game.get('status') != 'pending':
        await callback.answer('–∏–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', show_alert=False)
        return
    if accepter_id == game['initiator_id']:
        await callback.answer('–Ω—É–∂–µ–Ω –≤—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫', show_alert=True)
        return
    amount = game['amount']
    
    if users.get(game['initiator_id'], {}).get('balance', 0) < amount:
        try:
            await bot.delete_message(chat_id, game.get('message_id'))
        except:
            pass
        basket_games.pop(chat_id, None)
        await callback.message.answer('–∏–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ ‚Äî —É —Å–æ–∑–¥–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥')
        try:
            await callback.answer()
        except:
            pass
        return
    if users.get(accepter_id, {}).get('balance', 0) < amount:
        await callback.answer('—É —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è —Å—Ç–∞–≤–∫–∏', show_alert=True)
        return
    
    # —Å–ø–∏—Å—ã–≤–∞–µ–º
    users[game['initiator_id']]['balance'] -= amount
    users[accepter_id]['balance'] -= amount
    save_users()
    game['status'] = 'started'
    game['opponent_id'] = accepter_id
    try:
        await bot.delete_message(chat_id, game.get('message_id'))
    except:
        pass
    await callback.message.answer('–Ω–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É')
    try:
        await callback.answer()
    except:
        pass
    
    # –±—Ä–æ—Å–∫–∏: —Å–Ω–∞—á–∞–ª–∞ —Ç–µ–∫—Å—Ç ¬´–∫—Ç–æ –∫–∏–¥–∞–µ—Ç¬ª, –ø–æ—Ç–æ–º –∫–∏–¥–∞–µ–º
    initiator_nick = users[game['initiator_id']].get('nick','–∏–≥—Ä–æ–∫')
    
    opponent_nick = users[accepter_id].get('nick','–∏–≥—Ä–æ–∫')
    initiator_link = f"<a href=\"tg://user?id={int(game['initiator_id'])}\"><b>{initiator_nick}</b></a>"
    
    opponent_link = f"<a href=\"tg://user?id={int(accepter_id)}\"><b>{opponent_nick}</b></a>"

    await callback.message.answer(f"–∫–∏–¥–∞–µ—Ç {initiator_link}", parse_mode='HTML')
    
    await asyncio.sleep(0.4)
    throw1 = await bot.send_dice(chat_id, emoji='üèÄ')
    
    await asyncio.sleep(3)
    
    await callback.message.answer(f"–∫–∏–¥–∞–µ—Ç {opponent_link}", parse_mode='HTML')
    
    await asyncio.sleep(0.4)
    throw2 = await bot.send_dice(chat_id, emoji='üèÄ')
    
    await asyncio.sleep(3)
    
    val1 = throw1.dice.value
    
    val2 = throw2.dice.value
    
    if val1 == val2:
        users[game['initiator_id']]['balance'] += amount
        users[accepter_id]['balance'] += amount
        save_users()
        await callback.message.answer(
            '–Ω–∏—á—å—è\n\n'
            f"–±–∞–ª–∞–Ω—Å {initiator_link} ‚Äî <b>${format_money(users[game['initiator_id']]['balance'])}</b>\n"
            f"–±–∞–ª–∞–Ω—Å {opponent_link} ‚Äî <b>${format_money(users[accepter_id]['balance'])}</b>",
            parse_mode='HTML'
    
    )
        basket_games.pop(chat_id, None)
        return
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏–¥–µ–∞–ª—å–Ω—ã–µ –±—Ä–æ—Å–∫–∏ –∏ –∑–∞–±–∏–≤–∞–Ω–∏–µ
    initiator_perfect = val1 == 5
    opponent_perfect = val2 == 5
    # –∑–∞–±–∏—Ç—ã–º —Å—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ 4-5; 1-3 ‚Äî –ø—Ä–æ–º–∞—Ö–∏/–∑–∞—Å—Ç—Ä–µ–≤–∞–Ω–∏–µ/¬´–ø–æ—á—Ç–∏¬ª
    initiator_scored = val1 >= 4
    opponent_scored = val2 >= 4
    
    # –µ—Å–ª–∏ –æ–±–∞ –∑–∞–±–∏–ª–∏ –∏–¥–µ–∞–ª—å–Ω–æ - –Ω–∏—á—å—è
    if initiator_perfect and opponent_perfect:
        users[game['initiator_id']]['balance'] += amount
        users[accepter_id]['balance'] += amount
        save_users()
        await callback.message.answer(
            '–Ω–∏—á—å—è - –æ–±–∞ –∑–∞–±–∏–ª–∏ –∏–¥–µ–∞–ª—å–Ω–æ!\n\n'
            f"–±–∞–ª–∞–Ω—Å {initiator_link} ‚Äî <b>${format_money(users[game['initiator_id']]['balance'])}</b>\n"
            f"–±–∞–ª–∞–Ω—Å {opponent_link} ‚Äî <b>${format_money(users[accepter_id]['balance'])}</b>",
            parse_mode='HTML'
    
    )
        basket_games.pop(chat_id, None)
        return
    
    # –µ—Å–ª–∏ –æ–±–∞ –Ω–µ –∑–∞–±–∏–ª–∏ - –Ω–∏—á—å—è
    if not initiator_scored and not opponent_scored:
        users[game['initiator_id']]['balance'] += amount
        users[accepter_id]['balance'] += amount
        save_users()
        await callback.message.answer(
            '–Ω–∏—á—å—è - –æ–±–∞ –Ω–µ –∑–∞–±–∏–ª–∏\n\n'
            f"–±–∞–ª–∞–Ω—Å {initiator_link} ‚Äî <b>${format_money(users[game['initiator_id']]['balance'])}</b>\n"
            f"–±–∞–ª–∞–Ω—Å {opponent_link} ‚Äî <b>${format_money(users[accepter_id]['balance'])}</b>",
            parse_mode='HTML'
    
    )
        basket_games.pop(chat_id, None)
        return
    
    # –µ—Å–ª–∏ –æ–¥–∏–Ω –∑–∞–±–∏–ª –∏–¥–µ–∞–ª—å–Ω–æ, –¥—Ä—É–≥–æ–π –æ–±—ã—á–Ω—ã–π - –ø—Ä–∏–∑ x2 —Ç–æ–º—É, –∫—Ç–æ –∏–¥–µ–∞–ª—å–Ω–æ
    if initiator_perfect and opponent_scored and not opponent_perfect:
        users[game['initiator_id']]['balance'] += amount * 2
        save_users()
        winner_link = f"<a href=\"tg://user?id={int(game['initiator_id'])}\"><b>{initiator_nick}</b></a>"
        loser_link = f"<a href=\"tg://user?id={int(accepter_id)}\"><b>{opponent_nick}</b></a>"
        await callback.message.answer(
            f"üèÜ –ø–æ–±–µ–¥–∏–ª {winner_link} (2x - –∏–¥–µ–∞–ª—å–Ω—ã–π –±—Ä–æ—Å–æ–∫!)\n"
            f"üíÄ {loser_link} –ø—Ä–æ–∏–≥—Ä–∞–ª (x0)\n\n"
            f"–±–∞–ª–∞–Ω—Å {winner_link} ‚Äî <b>${format_money(users[game['initiator_id']]['balance'])}</b>\n"
            f"–±–∞–ª–∞–Ω—Å {loser_link} ‚Äî <b>${format_money(users[accepter_id]['balance'])}</b>",
            parse_mode='HTML'
    
    )
        basket_games.pop(chat_id, None)
        return
    
    if opponent_perfect and initiator_scored and not initiator_perfect:
        users[accepter_id]['balance'] += amount * 2
        # –ø–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç (x0)
        save_users()
        winner_link = f"<a href=\"tg://user?id={int(accepter_id)}\"><b>{opponent_nick}</b></a>"
        loser_link = f"<a href=\"tg://user?id={int(game['initiator_id'])}\"><b>{initiator_nick}</b></a>"
        await callback.message.answer(
            f"üèÜ –ø–æ–±–µ–¥–∏–ª {winner_link} (2x - –∏–¥–µ–∞–ª—å–Ω—ã–π –±—Ä–æ—Å–æ–∫!)\n"
            f"üíÄ {loser_link} –ø—Ä–æ–∏–≥—Ä–∞–ª (x0)\n\n"
            f"–±–∞–ª–∞–Ω—Å {winner_link} ‚Äî <b>${format_money(users[accepter_id]['balance'])}</b>\n"
            f"–±–∞–ª–∞–Ω—Å {loser_link} ‚Äî <b>${format_money(users[game['initiator_id']]['balance'])}</b>",
            parse_mode='HTML'
    
    )
        basket_games.pop(chat_id, None)
        return
    
    # –µ—Å–ª–∏ –æ–¥–∏–Ω –∑–∞–±–∏–ª, –¥—Ä—É–≥–æ–π –Ω–µ—Ç - –ø—Ä–∏–∑ x2 —Ç–æ–º—É, –∫—Ç–æ –∑–∞–±–∏–ª
    print(f"DEBUG: initiator_scored={initiator_scored}, opponent_scored={opponent_scored}")
    print(f"DEBUG: val1={val1}, val2={val2}")
    if initiator_scored and not opponent_scored:
        users[game['initiator_id']]['balance'] += amount * 2
        save_users()
        winner_link = f"<a href=\"tg://user?id={int(game['initiator_id'])}\"><b>{initiator_nick}</b></a>"
        loser_link = f"<a href=\"tg://user?id={int(accepter_id)}\"><b>{opponent_nick}</b></a>"
        await callback.message.answer(
            f"üèÜ –ø–æ–±–µ–¥–∏–ª {winner_link} (2x - –∑–∞–±–∏–ª!)\n"
            f"üíÄ {loser_link} –ø—Ä–æ–∏–≥—Ä–∞–ª (x0)\n\n"
            f"–±–∞–ª–∞–Ω—Å {winner_link} ‚Äî <b>${format_money(users[game['initiator_id']]['balance'])}</b>\n"
            f"–±–∞–ª–∞–Ω—Å {loser_link} ‚Äî <b>${format_money(users[accepter_id]['balance'])}</b>",
            parse_mode='HTML'
    
    )
        basket_games.pop(chat_id, None)
        return
    
    print(f"DEBUG: opponent_scored={opponent_scored}, initiator_scored={initiator_scored}")
    if opponent_scored and not initiator_scored:
        users[accepter_id]['balance'] += amount * 2
        save_users()
        winner_link = f"<a href=\"tg://user?id={int(accepter_id)}\"><b>{opponent_nick}</b></a>"
        loser_link = f"<a href=\"tg://user?id={int(game['initiator_id'])}\"><b>{initiator_nick}</b></a>"
        await callback.message.answer(
            f"üèÜ –ø–æ–±–µ–¥–∏–ª {winner_link} (2x - –∑–∞–±–∏–ª!)\n"
            f"üíÄ {loser_link} –ø—Ä–æ–∏–≥—Ä–∞–ª (x0)\n\n"
            f"–±–∞–ª–∞–Ω—Å {winner_link} ‚Äî <b>${format_money(users[accepter_id]['balance'])}</b>\n"
            f"–±–∞–ª–∞–Ω—Å {loser_link} ‚Äî <b>${format_money(users[game['initiator_id']]['balance'])}</b>",
            parse_mode='HTML'
    
    )
        basket_games.pop(chat_id, None)
        return
    
    # –¥–∞–ª–µ–µ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∑–∞–±–∏–ª (–Ω–µ –∏–¥–µ–∞–ª—å–Ω–æ) ‚Äî —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –æ—á–∫–∏
    
    # –æ–±–∞ –∑–∞–±–∏–ª–∏ (–Ω–æ –Ω–µ –∏–¥–µ–∞–ª—å–Ω–æ) - –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –ø–æ –æ—á–∫–∞–º
    if val1 > val2:
        winner_id = game['initiator_id']
        winner_val = val1
        loser_id = accepter_id
        loser_val = val2
    else:
        winner_id = accepter_id
        winner_val = val2
        loser_id = game['initiator_id']
        loser_val = val1
    
    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –≤—ã–∏–≥—Ä—ã—à–∞
    # –≤—Å–µ–≥–¥–∞ 2x –∑–∞ –ø–æ–±–µ–¥—É
    win_amount = amount * 2
    multiplier_text = "2x"
    
    users[winner_id]['balance'] += win_amount
    save_users()
    
    winner_link = f"<a href=\"tg://user?id={int(winner_id)}\"><b>{users[winner_id].get('nick','–∏–≥—Ä–æ–∫')}</b></a>"
    
    loser_link = f"<a href=\"tg://user?id={int(loser_id)}\"><b>{users[loser_id].get('nick','–∏–≥—Ä–æ–∫')}</b></a>"
    
    await callback.message.answer(
        f"üèÜ –ø–æ–±–µ–¥–∏–ª {winner_link} ({multiplier_text})\n\n"
        f"–±–∞–ª–∞–Ω—Å {winner_link} ‚Äî <b>${format_money(users[winner_id]['balance'])}</b>\n"
        f"–±–∞–ª–∞–Ω—Å {loser_link} ‚Äî <b>${format_money(users[loser_id]['balance'])}</b>",
        parse_mode='HTML'
    
    )
    
    basket_games.pop(chat_id, None)
# === –∫–æ–Ω–µ—Ü –º–∏–Ω–∏-–∏–≥—Ä—ã –±–∞—Å–∫–µ—Ç–±–æ–ª ===

# –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∏–≥—Ä
dice_games = {}

# –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ç–æ–ø–∞
top_cache = {}
TOP_UPDATE_INTERVAL = 300  # 5 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
TOP_PAGE_SIZE = 5  # –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É

# === –º–∏–Ω–∏-–∏–≥—Ä–∞ –∫–æ—Å—Ç–∏ ===
@dp.message(F.text.lower().startswith('–∫–æ—Å—Ç–∏'))
async def dice_game(message: types.Message):
    """–∏–≥—Ä–∞ –≤ –∫–æ—Å—Ç–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.chat.type == 'private':
        markup = InlineKeyboardMarkup(inline_keyboard=[
    
    [InlineKeyboardButton(text='‚ûï –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ —á–∞—Ç', url='https://t.me/Dodeperplaybot?startgroup')]
        ])
        await message.answer(
            'üé≤ –∏–≥—Ä–∞ –≤ –∫–æ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–∞—Ö —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏\n\n'
            '–¥–æ–±–∞–≤—å –±–æ—Ç–∞ –≤ —á–∞—Ç, —á—Ç–æ–±—ã –∏–≥—Ä–∞—Ç—å!',
            reply_markup=markup
    
    )
        return
    
    user_id = str(message.from_user.id)
    
    # –£–±–∏—Ä–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∏–≥—Ä–∞–º
    
    if user_id not in users:
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="—Å–æ–∑–¥–∞—Ç—å —á–µ–ª–æ–≤–µ—á–∫–∞", callback_data="create_human")
        await message.answer("—Ç—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ", reply_markup=keyboard.as_markup())
        try:
            roulette_in_progress.discard(user_id)
        except Exception:
            pass
        return
    
    # –ø–∞—Ä—Å–∏–º —Å—Ç–∞–≤–∫—É
    text = message.text.lower()
    
    if any(tok in text for tok in ['–≤—Å–µ', '–≤—Å—ë', '–∞–ª–ª']):
        amount = users[user_id]['balance']
    else:
        try:
            # –∏–∑–≤–ª–µ–∫–∞–µ–º —Å—É–º–º—É –ø–æ—Å–ª–µ —Å–ª–æ–≤–∞ "–∫–æ—Å—Ç–∏"
            amount_text = text.replace('–∫–æ—Å—Ç–∏', '').strip()
            amount = parse_amount(amount_text)
        except:
            await message.answer('–Ω–∞–ø–∏—à–∏: –∫–æ—Å—Ç–∏ <—Å—É–º–º–∞> –∏–ª–∏ –∫–æ—Å—Ç–∏ –≤—Å–µ/–≤—Å—ë/–∞–ª–ª')
            return
    
    if amount <= 0:
        await message.answer('—Å—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0')
        return
    
    if amount > users[user_id]['balance']:
        await message.answer('—É —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è —Ç–∞–∫–æ–π —Å—Ç–∞–≤–∫–∏')
        return
    
    chat_id = str(message.chat.id)
    
    # –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∏–≥—Ä–∞, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é
    if chat_id in dice_games:
        old_game = dice_games[chat_id]
    
    try:
        pass
    except:
        pass
    
    # —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∏–≥—Ä—É –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞
    had_old_dice = chat_id in dice_games
    if had_old_dice:
        old_dice = dice_games.get(chat_id) or {}
        try:
            old_msg_id = old_dice.get('message_id')
            if old_msg_id:
                await bot.delete_message(chat_id, old_msg_id)
        except:
            pass
        dice_games.pop(chat_id, None)
        try:
            await message.answer('üîÑ —Å—Ç–∞—Ä–∞—è –∏–≥—Ä–∞ –≤ –∫–æ—Å—Ç–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞, —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤–∞—è')
        except Exception:
            pass
    
    # —Å–æ–∑–¥–∞–µ–º –∏–≥—Ä—É
    dice_games[chat_id] = {
        'initiator_id': user_id,
        'initiator_nick': users[user_id]['nick'],
        'amount': amount,
        'message_id': None
    }
    
    # —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    kb = InlineKeyboardMarkup(inline_keyboard=[
    
    [InlineKeyboardButton(text='‚úÖ –ø—Ä–∏–Ω—è—Ç—å', callback_data='dice_accept')],
        [InlineKeyboardButton(text='‚ùå –æ—Ç–º–µ–Ω–∞', callback_data='dice_cancel')]
    
    ])
    
    nick = users[user_id].get('nick','–∏–≥—Ä–æ–∫')
    
    link = f"<a href=\"tg://user?id={int(user_id)}\"><b>{nick}</b></a>"
    caption = (
    
    f"üé≤ {link} —Ö–æ—á–µ—Ç —Å—ã–≥—Ä–∞—Ç—å –≤ –∫–æ—Å—Ç–∏\n\n"
        f"—Å—Ç–∞–≤–∫–∞ ‚Äî <b>${format_money(amount)}</b>\n\n"
        f"–∂–º–∏ –ø—Ä–∏–Ω—è—Ç—å, –µ—Å–ª–∏ –≥–æ—Ç–æ–≤"
    )
    
    msg = await message.answer(caption, parse_mode='HTML', reply_markup=kb)
    
    dice_games[chat_id]['message_id'] = msg.message_id

@dp.callback_query(lambda c: c.data == 'dice_cancel')
async def dice_cancel(callback: types.CallbackQuery):
    """–æ—Ç–º–µ–Ω–∞ –∏–≥—Ä—ã –≤ –∫–æ—Å—Ç–∏"""
    chat_id = str(callback.message.chat.id)
    
    game = dice_games.get(chat_id)
    if not game:
        await callback.answer('–∏–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', show_alert=False)
        return
    if str(callback.from_user.id) != game['initiator_id']:
        await callback.answer('–æ—Ç–º–µ–Ω–∏—Ç—å –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å', show_alert=True)
        return
    # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–æ—á–∫–æ–π
    try:
        await bot.delete_message(chat_id, game.get('message_id'))
    except:
        pass
    dice_games.pop(chat_id, None)
    await callback.answer('–æ—Ç–º–µ–Ω–µ–Ω–æ')

@dp.callback_query(lambda c: c.data == 'dice_accept')
async def dice_accept(callback: types.CallbackQuery):
    """–ø—Ä–∏–Ω—è—Ç–∏–µ –∏–≥—Ä—ã –≤ –∫–æ—Å—Ç–∏"""
    chat_id = str(callback.message.chat.id)
    
    accepter_id = str(callback.from_user.id)
    game = dice_games.get(chat_id)
    
    if not game:
        await callback.answer('–∏–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', show_alert=True)
        return
    
    if accepter_id == game['initiator_id']:
        await callback.answer('–Ω—É–∂–µ–Ω –≤—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫', show_alert=True)
        return
    
    if accepter_id not in users:
        await callback.answer('—Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è', show_alert=True)
        return
    
    if users[accepter_id]['balance'] < game['amount']:
        await callback.answer('—É —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è —Å—Ç–∞–≤–∫–∏', show_alert=True)
        return
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å —Å–æ–∑–¥–∞—Ç–µ–ª—è
    if users.get(game['initiator_id'], {}).get('balance', 0) < game['amount']:
        try:
            await bot.delete_message(chat_id, game.get('message_id'))
        except:
            pass
        dice_games.pop(chat_id, None)
        await callback.message.answer('–∏–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ ‚Äî —É —Å–æ–∑–¥–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥')
        await callback.answer('–∏–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞', show_alert=True)
        return
    
    # —Å–Ω–∏–º–∞–µ–º –¥–µ–Ω—å–≥–∏ —Å –æ–±–æ–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
    users[game['initiator_id']]['balance'] -= game['amount']
    users[accepter_id]['balance'] -= game['amount']
    save_users()
    
    # —É–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await bot.delete_message(chat_id, game.get('message_id'))
    except:
        pass
    
    await callback.message.answer('–Ω–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É')
    await callback.answer('–∏–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!', show_alert=True)
    
    # –±—Ä–æ—Å–∫–∏: —Å–Ω–∞—á–∞–ª–∞ —Ç–µ–∫—Å—Ç ¬´–∫—Ç–æ –∫–∏–¥–∞–µ—Ç¬ª, –ø–æ—Ç–æ–º –∫–∏–¥–∞–µ–º
    initiator_nick = users[game['initiator_id']].get('nick','–∏–≥—Ä–æ–∫')
    
    opponent_nick = users[accepter_id].get('nick','–∏–≥—Ä–æ–∫')
    initiator_link = f"<a href=\"tg://user?id={int(game['initiator_id'])}\"><b>{initiator_nick}</b></a>"
    
    opponent_link = f"<a href=\"tg://user?id={int(accepter_id)}\"><b>{opponent_nick}</b></a>"

    await callback.message.answer(f"–∫–∏–¥–∞–µ—Ç {opponent_link}", parse_mode='HTML')
    
    await asyncio.sleep(0.4)
    throw1 = await bot.send_dice(chat_id, emoji='üé≤')
    
    await asyncio.sleep(3)
    
    await callback.message.answer(f"–∫–∏–¥–∞–µ—Ç {initiator_link}", parse_mode='HTML')
    
    await asyncio.sleep(0.4)
    throw2 = await bot.send_dice(chat_id, emoji='üé≤')
    
    await asyncio.sleep(3)
    
    val1 = throw1.dice.value
    
    val2 = throw2.dice.value
    
    if val1 == val2:
        users[game['initiator_id']]['balance'] += game['amount']
        users[accepter_id]['balance'] += game['amount']
        save_users()
        await callback.message.answer(
            '–Ω–∏—á—å—è\n\n'
            f"–±–∞–ª–∞–Ω—Å {initiator_link} ‚Äî <b>${format_money(users[game['initiator_id']]['balance'])}</b>\n"
            f"–±–∞–ª–∞–Ω—Å {opponent_link} ‚Äî <b>${format_money(users[accepter_id]['balance'])}</b>",
            parse_mode='HTML'
        )
        dice_games.pop(chat_id, None)
        return
    
    if val1 > val2:
        winner_id = accepter_id
        winner_val = val1
        loser_id = game['initiator_id']
        loser_val = val2
    else:
        winner_id = game['initiator_id']
        winner_val = val2
        loser_id = accepter_id
        loser_val = val1
    
    # –Ω–∞—á–∏—Å–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à
    win_amount = game['amount'] * 2  # –≤—Å–µ–≥–¥–∞ x2 —Å—Ç–∞–≤–∫–∏
    
    users[winner_id]['balance'] += win_amount
    save_users()
    
    winner_link = f"<a href=\"tg://user?id={int(winner_id)}\"><b>{users[winner_id].get('nick','–∏–≥—Ä–æ–∫')}</b></a>"
    
    loser_link = f"<a href=\"tg://user?id={int(loser_id)}\"><b>{users[loser_id].get('nick','–∏–≥—Ä–æ–∫')}</b></a>"
    
    await callback.message.answer(
        f"üé≤ {loser_link} –ø—Ä–æ–∏–≥—Ä–∞–ª –∏–≥—Ä–æ–∫—É {winner_link} <b>${format_money(game['amount'])}</b>.\n\n"
        f"‚Ä¢ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã ‚Äî <b>{loser_val}:{winner_val}</b>\n"
        f"‚Ä¢ –±–∞–ª–∞–Ω—Å {loser_link} ‚Äî <b>${format_money(users[loser_id]['balance'])}</b>\n"
        f"‚Ä¢ –±–∞–ª–∞–Ω—Å {winner_link} ‚Äî <b>${format_money(users[winner_id]['balance'])}</b>",
        parse_mode='HTML'
    
    )
    
    dice_games.pop(chat_id, None)
# === –∫–æ–Ω–µ—Ü –º–∏–Ω–∏-–∏–≥—Ä—ã –∫–æ—Å—Ç–∏ ===

# === –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ø ===
def get_top_players():
    """–ø–æ–ª—É—á–∞–µ—Ç —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –±–∞–ª–∞–Ω—Å—É (—Ç–æ–ª—å–∫–æ —Ç–æ–ø 100)"""
    # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –±–∞–ª–∞–Ω—Å—É (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
    sorted_users = sorted(users.items(), key=lambda x: x[1].get('balance', 0), reverse=True)
    
    # –ù–ï —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Å–∫—Ä—ã—Ç—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ - –æ–Ω–∏ –æ—Å—Ç–∞—é—Ç—Å—è –≤ —Ç–æ–ø–µ, –Ω–æ –±–µ–∑ —Å—Å—ã–ª–æ–∫
    # visible_users = [(uid, user_data) for uid, user_data in sorted_users if not user_data.get('hide_from_top', False)]
    
    # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø 100
    return sorted_users[:100]

def get_user_position(user_id: str) -> int:
    """–ø–æ–ª—É—á–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–æ–ø–µ"""
    sorted_users = get_top_players()
    
    for i, (uid, _) in enumerate(sorted_users):
        if uid == user_id:
            return i + 1
    return len(sorted_users) + 1

async def show_top_page(message: types.Message, page: int = 0):
    
    """–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–ø–∞"""
    user_id = str(message.from_user.id)
    
    # –ø–æ–ª—É—á–∞–µ–º —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤
    top_players = get_top_players()
    
    total_players = len(top_players)
    
    # –≤—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_position = get_user_position(user_id)
    
    # –≤—ã—á–∏—Å–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = page * TOP_PAGE_SIZE
    
    end_idx = min(start_idx + TOP_PAGE_SIZE, total_players)
    
    if start_idx >= total_players:
        page = 0
        start_idx = 0
        end_idx = min(TOP_PAGE_SIZE, total_players)
    
    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ç–æ–ø–∞
    top_text = f"üí∞ <b>—Ç–æ–ø 100 —Å–∞–º—ã—Ö –±–æ–≥–∞—Ç—ã—Ö –∏–≥—Ä–æ–∫–æ–≤</b>\n"
    
    if user_id in users:
        top_text += f"<i>(—Ç—ã –Ω–∞ {user_position}-–º –º–µ—Å—Ç–µ):</i>\n\n"
    else:
        top_text += "\n"
    
    # –¥–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    for i in range(start_idx, end_idx):
        rank = i + 1
        uid, user_data = top_players[i]
        nick = user_data.get('nick', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        balance = user_data.get('balance', 0)
        
        # –¥–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–æ–ø-3
        if rank == 1:
            rank_text = "ü•á"
        elif rank == 2:
            rank_text = "ü•à"
        elif rank == 3:
            rank_text = "ü•â"
        else:
            rank_text = f"{rank}."
        
        # —Å–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –Ω–µ —Å–∫—Ä—ã—Ç –∏–∑ —Ç–æ–ø–∞)
        hide_from_top = user_data.get('hide_from_top', False)
        if hide_from_top:
            user_link = f"<b>{nick}</b>"
        else:
            user_link = f"<a href=\"tg://user?id={int(uid)}\"><b>{nick}</b></a>"
        
        balance_text = f"<b>${format_money(balance)}</b>"
        
        top_text += f"{rank_text} {user_link} ‚Äî {balance_text}\n"
    
    # –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
    top_text += f"\n<i>—Ç–æ–ø –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Ä–∞–∑ –≤ 5 –º–∏–Ω—É—Ç</i>"
    
    # —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    keyboard = []
    
    # –∫–Ω–æ–ø–∫–∞ "–Ω–∞–∑–∞–¥" –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    if page > 0:
        keyboard.append([InlineKeyboardButton(text='‚¨ÖÔ∏è –Ω–∞–∑–∞–¥', callback_data=f'top_page_{page-1}')])
    
    # –∫–Ω–æ–ø–∫–∞ "–≤–ø–µ—Ä–µ–¥" –µ—Å–ª–∏ –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏ –º—ã –Ω–µ –¥–æ—Å—Ç–∏–≥–ª–∏ 100 –∏–≥—Ä–æ–∫–æ–≤
    if end_idx < total_players and end_idx < 100:
        keyboard.append([InlineKeyboardButton(text='—Å–ª–µ–¥ ‚û°Ô∏è', callback_data=f'top_page_{page+1}')])
    
    # –µ—Å–ª–∏ –Ω–µ—Ç –∫–Ω–æ–ø–æ–∫, –¥–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
    if not keyboard:
        keyboard.append([InlineKeyboardButton(text='üìä —Ç–æ–ø –æ–±–Ω–æ–≤–ª–µ–Ω', callback_data='top_refresh')])
    
    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    return top_text, markup

@dp.message(F.text.lower() == '—Ç–æ–ø')
async def show_top(message: types.Message):
    """–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤"""
    user_id = str(message.from_user.id)
    
    # –£–±–∏—Ä–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ç–æ–ø—É
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if user_id not in users:
        await message.answer('—Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π /start')
        return
    
    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–ø–∞
    top_text, markup = await show_top_page(message, 0)
    
    await message.answer(top_text, parse_mode='HTML', reply_markup=markup)

@dp.callback_query(lambda c: c.data.startswith('top_page_'))
async def top_page_callback(callback: types.CallbackQuery):
    """–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Ç–æ–ø–∞"""
    
    # –£–±–∏—Ä–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ç–æ–ø—É
    
    try:
        page = int(callback.data.split('_')[2])
        top_text, markup = await show_top_page(callback.message, page)
        
        # —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(top_text, parse_mode='HTML', reply_markup=markup)
        await callback.answer()
    except Exception as e:
        try:
            await callback.answer('–æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã', show_alert=True)
        except:
            pass

@dp.callback_query(lambda c: c.data == 'top_refresh')
async def top_refresh_callback(callback: types.CallbackQuery):
    """–æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–ø"""
    
    # –£–±–∏—Ä–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ç–æ–ø—É
    
    await callback.answer('—Ç–æ–ø –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç')
# === –∫–æ–Ω–µ—Ü –∫–æ–º–∞–Ω–¥—ã —Ç–æ–ø ===
# === —Ä—É–ª–µ—Ç–∫–∞ ===
def create_roulette_result_image(number, color, bet_type, amount, won, multiplier, win_amount):
    """—Å–æ–∑–¥–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä—É–ª–µ—Ç–∫–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏–≥—Ä—ã
    
    –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã:
    - –î–ª—è —á–∏—Å–ª–∞ 0 (–∑–µ—Ä–æ): –∏—Å–ø–æ–ª—å–∑—É–µ—Ç rul__zero.jpg (–∑–µ–ª–µ–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞, –Ω–æ–ª—å —É–∂–µ –µ—Å—Ç—å)
    - –î–ª—è –∫—Ä–∞—Å–Ω—ã—Ö —á–∏—Å–µ–ª: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç rul_red.jpg, –ø–∏—à–µ—Ç —á–∏—Å–ª–æ –Ω–∞ –∫—Ä–∞—Å–Ω–æ–π –ø–æ–ª–æ—Å–∫–µ –≤–Ω–∏–∑—É
    - –î–ª—è —á–µ—Ä–Ω—ã—Ö —á–∏—Å–µ–ª: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç rul_black.jpg, –ø–∏—à–µ—Ç —á–∏—Å–ª–æ –Ω–∞ —á–µ—Ä–Ω–æ–π –ø–æ–ª–æ—Å–∫–µ –≤–Ω–∏–∑—É
    
    –ß–∏—Å–ª–∞ –ø–∏—à—É—Ç—Å—è –±–µ–ª—ã–º —Ü–≤–µ—Ç–æ–º –Ω–∞ –ø–æ–ª–æ—Å–∫–µ –≤–Ω–∏–∑—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    try:
        # –æ—Ç–∫—Ä—ã–≤–∞–µ–º –±–∞–∑–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä—É–ª–µ—Ç–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ü–≤–µ—Ç–∞ –≤—ã–ø–∞–≤—à–µ–≥–æ —á–∏—Å–ª–∞
        if number == 0:
            # –∑–µ—Ä–æ - –∑–µ–ª–µ–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º rul__zero.jpg)
            base_image = Image.open('img/rul__zero.jpg')
        elif color == 'red':
            # –∫—Ä–∞—Å–Ω–æ–µ —á–∏—Å–ª–æ - –∫—Ä–∞—Å–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞
            base_image = Image.open('img/rul_red.jpg')
        else:
            # —á–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ - —á–µ—Ä–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞
            base_image = Image.open('img/rul_black.jpg')
        
        # —Å–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è
        img = base_image.copy()
        draw = ImageDraw.Draw(img)
        
        # –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —à—Ä–∏—Ñ—Ç, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
        try:
            # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
            font = ImageFont.truetype("arial.ttf", 50)
        except:
            try:
                # –ü—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ —à—Ä–∏—Ñ—Ç—ã –µ—Å–ª–∏ arial –Ω–µ –Ω–∞–π–¥–µ–Ω
                font = ImageFont.truetype("DejaVuSans-Bold.ttf", 70)
            except:
                try:
                    font = ImageFont.truetype("LiberationSans-Bold.ttf", 70)
                except:
                    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
                    font = ImageFont.load_default()
        
        # –ø–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        width, height = img.size
        
        # —Ä–∏—Å—É–µ–º –≤—ã–ø–∞–≤—à–µ–µ —á–∏—Å–ª–æ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–æ–ª–æ—Å–∫–µ (–∫—Ä–æ–º–µ –∑–µ—Ä–æ)
        if number != 0:  # –Ω–µ —Ä–∏—Å—É–µ–º —á–∏—Å–ª–æ –¥–ª—è –∑–µ—Ä–æ, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–æ —É–∂–µ –µ—Å—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ
            number_text = str(number)
            text_bbox = draw.textbbox((0, 0), number_text, font=font)
            text_width = text_bbox[2] - text_bbox[0]
            text_height = text_bbox[3] - text_bbox[1]
            
            # –ø–æ–∑–∏—Ü–∏—è –¥–ª—è —Ç–µ–∫—Å—Ç–∞ - –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ –ø–æ —Ü–µ–Ω—Ç—Ä—É, –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ –Ω–∞ –ø–æ–ª–æ—Å–∫–µ –≤–Ω–∏–∑—É
            x = (width - text_width) // 2
            
            if color == 'red':
                # –¥–ª—è –∫—Ä–∞—Å–Ω—ã—Ö —á–∏—Å–µ–ª - –Ω–∞ –∫—Ä–∞—Å–Ω–æ–π –ø–æ–ª–æ—Å–∫–µ –≤–Ω–∏–∑—É, —á—É—Ç—å –ø–æ–Ω–∏–∂–µ
                y = height - 120  # –Ω–∞ –∫—Ä–∞—Å–Ω–æ–π –ø–æ–ª–æ—Å–∫–µ –≤–Ω–∏–∑—É, —á—É—Ç—å –ø–æ–Ω–∏–∂–µ
                text_color = (255, 255, 255)  # –±–µ–ª—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –∫—Ä–∞—Å–Ω–æ–º —Ñ–æ–Ω–µ
            else:
                # –¥–ª—è —á–µ—Ä–Ω—ã—Ö —á–∏—Å–µ–ª - –Ω–∞ —á–µ—Ä–Ω–æ–π –ø–æ–ª–æ—Å–∫–µ –≤–Ω–∏–∑—É, —á—É—Ç—å –ø–æ–Ω–∏–∂–µ
                y = height - 120  # –Ω–∞ —á–µ—Ä–Ω–æ–π –ø–æ–ª–æ—Å–∫–µ –≤–Ω–∏–∑—É, —á—É—Ç—å –ø–æ–Ω–∏–∂–µ
                text_color = (255, 255, 255)  # –±–µ–ª—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–µ—Ä–Ω–æ–º —Ñ–æ–Ω–µ
            
            # —Ä–∏—Å—É–µ–º —Ç–µ–Ω—å –¥–ª—è —Ç–µ–∫—Å—Ç–∞ (—á–µ—Ä–Ω–∞—è —Ç–µ–Ω—å –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏)
            shadow_color = (0, 0, 0)  # —á–µ—Ä–Ω–∞—è —Ç–µ–Ω—å
            draw.text((x+2, y+2), number_text, fill=shadow_color, font=font)
            
            # —Ä–∏—Å—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –Ω–∞ –ø–æ–ª–æ—Å–∫–µ –≤–Ω–∏–∑—É
            draw.text((x, y), number_text, fill=text_color, font=font)
        
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø–∞–ø–∫—É img
        temp_path = f'img/temp_roulette_{random.randint(1000, 9999)}.png'
        img.save(temp_path, 'PNG')
        
        return temp_path
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä—É–ª–µ—Ç–∫–∏: {e}")
        return None

def get_roulette_number_color(number):
    """–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ü–≤–µ—Ç —á–∏—Å–ª–∞ –≤ —Ä—É–ª–µ—Ç–∫–µ"""
    if number == 0:
        return 'green'
    
    # –∫—Ä–∞—Å–Ω—ã–µ —á–∏—Å–ª–∞
    red_numbers = [1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36]
    
    if number in red_numbers:
        return 'red'
    else:
        return 'black'



# –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –∑–∞—â–∏—Ç—ã - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–≥–∞

@dp.message(F.text.lower().startswith('—Ä—É–ª'))
async def roulette_handler(message: types.Message):
    """–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä—É–ª–µ—Ç–∫–∏ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–ª–∏ –∏–≥—Ä–∞"""
    user_id = str(message.from_user.id)

    # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞–≤–æ–∫ –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞: –º–æ–ª—á–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—Ç–æ—Ä—É—é —Å—Ç–∞–≤–∫—É
    if user_id in roulette_in_progress:
        return
    roulette_in_progress.add(user_id)
    
    # –£–±–∏—Ä–∞–µ–º –∑–∞—â–∏—Ç—É –æ—Ç —Ñ–ª—É–¥–∞ - –Ω–µ –Ω—É–∂–Ω–∞
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if user_id not in users:
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="—Å–æ–∑–¥–∞—Ç—å —á–µ–ª–æ–≤–µ—á–∫–∞", callback_data="create_human")
        await message.answer("—Ç—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ", reply_markup=keyboard.as_markup())
        return
    
    # –ø–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    parts = message.text.lower().split()
    
    # –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ "—Ä—É–ª" - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    if len(parts) == 1:
        try:
            # –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è flood control
            await asyncio.sleep(0.5)
            await bot.send_photo(
                message.chat.id,
                types.FSInputFile('img/rul_info.jpg'),
                caption="üÉè <b>–∏—Å–ø–æ–ª—å–∑—É–π:</b>\n"
    
    "<code>—Ä—É–ª —Å—Ç–∞–≤–∫–∞ —Å—É–º–º–∞</code>\n\n"
                        "<b>—Å—Ç–∞–≤–∏—Ç—å –º–æ–∂–Ω–æ –Ω–∞:</b>\n"
                        "‚Ä¢ —á—ë—Ä–Ω–æ–µ/—á–µ—Ä–Ω–æ–µ/—á–µ—Ä (x2)\n"
                        "‚Ä¢ –∫—Ä–∞—Å–Ω–æ–µ/–∫—Ä–∞—Å/–∫—Ä–∞ (x2)\n"
                        "‚Ä¢ –∑–µ—Ä–æ/–Ω–æ–ª—å/–∑ (x36)\n"
                        "‚Ä¢ —á—ë—Ç/—á–µ—Ç–Ω–æ–µ/—á–µ—Ç (x2)\n"
                        "‚Ä¢ –Ω–µ—á—ë—Ç/–Ω–µ—á–µ—Ç–Ω–æ–µ/–Ω—á (x2)\n"
                        "‚Ä¢ —Ä—è–¥1, —Ä—è–¥2, —Ä—è–¥3 (x3)\n"
                        "‚Ä¢ 1-12, 13-24, 25-36 (x3)\n"
                        "‚Ä¢ 1-18, 19-36 (x2)\n"
                        "‚Ä¢ —á–∏—Å–ª–∞ 0-36 (x36)\n\n"
                        "üí° <b>–ø—Ä–∏–º–µ—Ä—ã:</b>\n"
                        "<code>—Ä—É–ª —á—ë—Ä–Ω–æ–µ 1000</code>\n"
                        "<code>—Ä—É–ª –∫—Ä–∞—Å–Ω–æ–µ 500–∫</code>\n"
                        "<code>—Ä—É–ª –∑–µ—Ä–æ 100</code>\n"
                        "<code>—Ä—É–ª 13-24 1–∫</code>",
                parse_mode='HTML'
            )
        except Exception as e:
            await message.answer(f"–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä—É–ª–µ—Ç–∫–µ: {e}")
        try:
            roulette_in_progress.discard(user_id)
        except Exception:
            pass
        return
    
    # –µ—Å–ª–∏ –µ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã - –∏–≥—Ä–∞–µ–º –≤ —Ä—É–ª–µ—Ç–∫—É
    if len(parts) < 3:
        await message.answer('–∏—Å–ø–æ–ª—å–∑—É–π: —Ä—É–ª —Å—Ç–∞–≤–∫–∞ —Å—É–º–º–∞\n–Ω–∞–ø—Ä–∏–º–µ—Ä: —Ä—É–ª —á—ë—Ä–Ω–æ–µ 1000')
        try:
            roulette_in_progress.discard(user_id)
        except Exception:
            pass
        return
    if len(parts) > 3:
        await message.answer('–Ω–µ–ª—å–∑—è —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç–∞–≤–æ–∫ —Å—Ä–∞–∑—É. –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: —Ä—É–ª <—Å—Ç–∞–≤–∫–∞> <—Å—É–º–º–∞>\n–Ω–∞–ø—Ä–∏–º–µ—Ä: —Ä—É–ª 13-24 1–∫ –∏–ª–∏ —Ä—É–ª –Ω–µ—á—ë—Ç 1–∫')
        try:
            roulette_in_progress.discard(user_id)
        except Exception:
            pass
        return
    
    bet_type = parts[1]
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–∏–ø —Å—Ç–∞–≤–∫–∏: –ø—Ä–∏–≤–æ–¥–∏–º —Ä–∞–∑–Ω—ã–µ —Ç–∏—Ä–µ –∫ –¥–µ—Ñ–∏—Å—É –∏ —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    bet_type = bet_type.replace('‚Äì', '-').replace('‚Äî', '-').replace('‚àí', '-').strip()
    
    # –∑–∞–ø—Ä–µ—Ç –Ω–∞ –≤—Ç–æ—Ä—É—é —Å—Ç–∞–≤–∫—É –≤–º–µ—Å—Ç–æ —Å—É–º–º—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: "—Ä—É–ª –Ω–µ—á 13-24 20–∫–∫–∫")
    amount_token = parts[2]
    
    conflicting_bet_tokens = {
        '—á—ë—Ä–Ω–æ–µ','—á–µ—Ä','—á–µ—Ä–Ω–æ–µ','—á–µ—Ä–Ω','—á—ë—Ä–Ω','—á','—á—ë—Ä',
        '–∫—Ä–∞—Å–Ω–æ–µ','–∫—Ä–∞—Å','–∫—Ä','–∫—Ä–∞—Å–Ω','–∫—Ä–∞—Å','–∫',
        '–∑–µ—Ä–æ','–∑','–Ω–æ–ª—å','–Ω—É–ª—å','–∑–µ—Ä','–∑–µ','0',
        '—á—ë—Ç','—á–µ—Ç','—á–µ—Ç–Ω–æ–µ','—á–µ—Ç–Ω','—á—ë—Ç–Ω–æ–µ','—á—ë—Ç–Ω',
        '–Ω–µ—á—ë—Ç','–Ω–µ—á–µ—Ç','–Ω—á','–Ω–µ—á–µ—Ç–Ω–æ–µ','–Ω–µ—á–µ—Ç–Ω','–Ω–µ—á—ë—Ç–Ω–æ–µ','–Ω–µ—á—ë—Ç–Ω','–Ω–µ—á',
        '—Ä—è–¥1','—Ä—è–¥ 1','1—Ä—è–¥','1 —Ä—è–¥','—Ä1','1—Ä',
        '—Ä—è–¥2','—Ä—è–¥ 2','2—Ä—è–¥','2 —Ä—è–¥','—Ä2','2—Ä',
        '—Ä—è–¥3','—Ä—è–¥ 3','3—Ä—è–¥','3 —Ä—è–¥','—Ä3','3—Ä',
        '1-12','13-24','25-36','1-18','19-36',
        '–º–∞–ª—ã–µ','–º–∞–ª—ã–π','–º','–º–∞–ª','–±–æ–ª—å—à–∏–µ','–±–æ–ª—å—à–æ–π','–±','–±–æ–ª'
    }
    if '-' in amount_token or amount_token in conflicting_bet_tokens:
        await message.answer('–Ω–µ–ª—å–∑—è —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç–∞–≤–æ–∫ —Å—Ä–∞–∑—É. –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: —Ä—É–ª <—Å—Ç–∞–≤–∫–∞> <—Å—É–º–º–∞>\n–Ω–∞–ø—Ä–∏–º–µ—Ä: —Ä—É–ª 13-24 1–∫ –∏–ª–∏ —Ä—É–ª –Ω–µ—á—ë—Ç 1–∫')
        try:
            roulette_in_progress.discard(user_id)
        except Exception:
            pass
        return
    
    # –†–∞–Ω–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–∏–ø–∞ —Å—Ç–∞–≤–∫–∏, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∏—Å—ã–≤–∞—Ç—å –¥–µ–Ω—å–≥–∏ –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ–π —Å—Ç–∞–≤–∫–µ
    recognized_types = [
        '—á—ë—Ä–Ω–æ–µ', '—á–µ—Ä', '—á–µ—Ä–Ω–æ–µ', '—á–µ—Ä–Ω', '—á—ë—Ä–Ω', '—á', '—á—ë—Ä',
        '–∫—Ä–∞—Å–Ω–æ–µ', '–∫—Ä–∞', '–∫—Ä', '–∫—Ä–∞—Å–Ω', '–∫—Ä–∞—Å', '–∫', '–∫—Ä–∞—Å–Ω',
        '–∑–µ—Ä–æ', '–∑', '–Ω–æ–ª—å', '–Ω—É–ª—å', '0', '–∑–µ—Ä', '–∑–µ',
        '—á—ë—Ç', '—á–µ—Ç', '—á', '—á–µ—Ç–Ω–æ–µ', '—á–µ—Ç–Ω', '—á—ë—Ç–Ω–æ–µ', '—á—ë—Ç–Ω', '—á—ë—Ç–Ω', '—á–µ—Ç–Ω',
        '–Ω–µ—á—ë—Ç', '–Ω–µ—á–µ—Ç', '–Ω—á', '–Ω–µ—á–µ—Ç–Ω–æ–µ', '–Ω–µ—á–µ—Ç–Ω', '–Ω–µ—á—ë—Ç–Ω–æ–µ', '–Ω–µ—á—ë—Ç–Ω', '–Ω–µ—á—ë—Ç–Ω', '–Ω–µ—á–µ—Ç–Ω', '–Ω–µ—á',
        '—Ä—è–¥1', '—Ä—è–¥ 1', '1—Ä—è–¥', '1 —Ä—è–¥', '—Ä1', '1—Ä',
        '—Ä—è–¥2', '—Ä—è–¥ 2', '2—Ä—è–¥', '2 —Ä—è–¥', '—Ä2', '2—Ä',
        '—Ä—è–¥3', '—Ä—è–¥ 3', '3—Ä—è–¥', '3 —Ä—è–¥', '—Ä3', '3—Ä',
        '1-12', '–ø–µ—Ä–≤–∞—è –¥—é–∂–∏–Ω–∞', '1–¥—é–∂–∏–Ω–∞', '1 –¥—é–∂–∏–Ω–∞', '1–¥', '–¥1',
        '13-24', '–≤—Ç–æ—Ä–∞—è –¥—é–∂–∏–Ω–∞', '2–¥—é–∂–∏–Ω–∞', '2 –¥—é–∂–∏–Ω–∞', '2–¥', '–¥2',
        '25-36', '—Ç—Ä–µ—Ç—å—è –¥—é–∂–∏–Ω–∞', '3–¥—é–∂–∏–Ω–∞', '3 –¥—é–∂–∏–Ω–∞', '3–¥', '–¥3',
        '1-18', '–º–∞–ª—ã–µ', '–º–∞–ª—ã–π', '–º', '–º–∞–ª',
        '19-36', '–±–æ–ª—å—à–∏–µ', '–±–æ–ª—å—à–æ–π', '–±', '–±–æ–ª'
    ]
    import re
    if bet_type not in recognized_types and not (bet_type.isdigit() and 0 <= int(bet_type) <= 36) and not re.match(r'^(\d{1,2})-(\d{1,2})$', bet_type):
        await message.answer(f'–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å—Ç–∞–≤–∫–∏ "{bet_type}". –∏—Å–ø–æ–ª—å–∑—É–π: —Ä—É–ª —á—ë—Ä–Ω–æ–µ 1000 –∏–ª–∏ —Ä—É–ª 13-24 1–∫')
        try:
            roulette_in_progress.discard(user_id)
        except Exception:
            pass
        return
    
    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫
    if len(parts) >= 3 and parts[2] in ['–≤–±', '–≤—Å–µ', '–≤—Å—ë', '–∞–ª–ª', '–≤–∞–±–∞–Ω–∫', '–≤—Å', '–≤', '–≤–∞–±', '–≤–∞–±–∞–Ω', '–≤—Å–µ–¥–µ–Ω—å–≥–∏', '–≤—Å—ë–¥–µ–Ω—å–≥–∏']:
        amount = users[user_id]['balance']  # —Å—Ç–∞–≤–∫–∞ –≤—Å–µ–º–∏ –¥–µ–Ω—å–≥–∞–º–∏
    else:
        try:
            amount = parse_amount(parts[2])
        except Exception as e:
            await message.answer('–Ω–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –∏—Å–ø–æ–ª—å–∑—É–π: —Ä—É–ª —á—ë—Ä–Ω–æ–µ 1000')
            try:
                roulette_in_progress.discard(user_id)
            except Exception:
                pass
            return
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞–≤–∫–∞ –±–æ–ª—å—à–µ 0
    if amount <= 0:
        await message.answer('—Å—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0')
        try:
            roulette_in_progress.discard(user_id)
        except Exception:
            pass
        return
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å (–∫—Ä–æ–º–µ —Å—Ç–∞–≤–∫–∏ –≤—Å–µ–º–∏ –¥–µ–Ω—å–≥–∞–º–∏)
    if len(parts) < 3 or parts[2] not in ['–≤–±', '–≤—Å–µ', '–≤—Å—ë', '–∞–ª–ª', '–≤–∞–±–∞–Ω–∫', '–≤—Å', '–≤', '–≤–∞–±', '–≤–∞–±–∞–Ω', '–≤—Å–µ–¥–µ–Ω—å–≥–∏', '–≤—Å—ë–¥–µ–Ω—å–≥–∏']:
        if users[user_id]['balance'] < amount:
            await message.answer(f"—É —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥. –Ω–∞ —Å—á–µ—Ç—É: <b>${format_money(users[user_id]['balance'])}</b>", parse_mode='HTML')
            try:
                roulette_in_progress.discard(user_id)
            except Exception:
                pass
            return
    
    # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É –°–†–ê–ó–£ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞
    users[user_id]['balance'] -= amount
    
    # –î–ª—è –∑–∞–Ω–∏–∂–µ–Ω–∏—è —à–∞–Ω—Å–æ–≤ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ–º –ø–æ–≤—Ç–æ—Ä–µ –æ–¥–Ω–æ–π —Å—Ç–∞–≤–∫–∏ –≤–µ–¥—ë–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å—Ç—Ä–∏–∫
    user_streak = roulette_bet_streaks.get(user_id, {'bet_type': None, 'streak': 0})

    # –î–æ–ø. –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ —Å—Ç–∞–≤–∫–∏ –¥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏—Å—Ö–æ–¥–∞
    recognized_types = [
        '—á—ë—Ä–Ω–æ–µ', '—á–µ—Ä', '—á–µ—Ä–Ω–æ–µ', '—á–µ—Ä–Ω', '—á—ë—Ä–Ω', '—á', '—á—ë—Ä',
        '–∫—Ä–∞—Å–Ω–æ–µ', '–∫—Ä–∞', '–∫—Ä', '–∫—Ä–∞—Å–Ω', '–∫—Ä–∞—Å', '–∫', '–∫—Ä–∞—Å–Ω',
        '–∑–µ—Ä–æ', '–∑', '–Ω–æ–ª—å', '–Ω—É–ª—å', '0', '–∑–µ—Ä', '–∑–µ',
        '—á—ë—Ç', '—á–µ—Ç', '—á', '—á–µ—Ç–Ω–æ–µ', '—á–µ—Ç–Ω', '—á—ë—Ç–Ω–æ–µ', '—á—ë—Ç–Ω', '—á—ë—Ç–Ω', '—á–µ—Ç–Ω',
        '–Ω–µ—á—ë—Ç', '–Ω–µ—á–µ—Ç', '–Ω—á', '–Ω–µ—á–µ—Ç–Ω–æ–µ', '–Ω–µ—á–µ—Ç–Ω', '–Ω–µ—á—ë—Ç–Ω–æ–µ', '–Ω–µ—á—ë—Ç–Ω', '–Ω–µ—á—ë—Ç–Ω', '–Ω–µ—á–µ—Ç–Ω', '–Ω–µ—á',
        '—Ä—è–¥1', '—Ä—è–¥ 1', '1—Ä—è–¥', '1 —Ä—è–¥', '—Ä1', '1—Ä',
        '—Ä—è–¥2', '—Ä—è–¥ 2', '2—Ä—è–¥', '2 —Ä—è–¥', '—Ä2', '2—Ä',
        '—Ä—è–¥3', '—Ä—è–¥ 3', '3—Ä—è–¥', '3 —Ä—è–¥', '—Ä3', '3—Ä',
        '1-12', '–ø–µ—Ä–≤–∞—è –¥—é–∂–∏–Ω–∞', '1–¥—é–∂–∏–Ω–∞', '1 –¥—é–∂–∏–Ω–∞', '1–¥', '–¥1',
        '13-24', '–≤—Ç–æ—Ä–∞—è –¥—é–∂–∏–Ω–∞', '2–¥—é–∂–∏–Ω–∞', '2 –¥—é–∂–∏–Ω–∞', '2–¥', '–¥2',
        '25-36', '—Ç—Ä–µ—Ç—å—è –¥—é–∂–∏–Ω–∞', '3–¥—é–∂–∏–Ω–∞', '3 –¥—é–∂–∏–Ω–∞', '3–¥', '–¥3',
        '1-18', '–º–∞–ª—ã–µ', '–º–∞–ª—ã–π', '–º', '–º–∞–ª',
        '19-36', '–±–æ–ª—å—à–∏–µ', '–±–æ–ª—å—à–æ–π', '–±', '–±–æ–ª'
    ]
    import re
    if bet_type not in recognized_types and not (bet_type.isdigit() and 0 <= int(bet_type) <= 36) and not re.match(r'^(\d{1,2})-(\d{1,2})$', bet_type):
        await message.answer(f'–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å—Ç–∞–≤–∫–∏ "{bet_type}". –∏—Å–ø–æ–ª—å–∑—É–π: —Ä—É–ª —á—ë—Ä–Ω–æ–µ 1000 –∏–ª–∏ —Ä—É–ª 13-24 1–∫')
        try:
            roulette_in_progress.discard(user_id)
        except Exception:
            pass
        return

    # –°—Ñ–æ—Ä–º–∏—Ä—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö —á–∏—Å–µ–ª –¥–ª—è —Å—Ç–∞–≤–∫–∏
    win_numbers = set()
    # –¶–≤–µ—Ç–∞
    if bet_type in ['—á—ë—Ä–Ω–æ–µ', '—á–µ—Ä', '—á–µ—Ä–Ω–æ–µ', '—á–µ—Ä–Ω', '—á—ë—Ä–Ω', '—á', '—á—ë—Ä']:
        win_numbers = {n for n in range(1, 37) if get_roulette_number_color(n) == 'black'}
    elif bet_type in ['–∫—Ä–∞—Å–Ω–æ–µ', '–∫—Ä–∞', '–∫—Ä', '–∫—Ä–∞—Å–Ω', '–∫—Ä–∞—Å', '–∫', '–∫—Ä–∞—Å–Ω']:
        win_numbers = {n for n in range(1, 37) if get_roulette_number_color(n) == 'red'}
    # –ù–æ–ª—å
    elif bet_type in ['–∑–µ—Ä–æ', '–∑', '–Ω–æ–ª—å', '–Ω—É–ª—å', '0', '–∑–µ—Ä', '–∑–µ']:
        win_numbers = {0}
    # –ß–µ—Ç / –ù–µ—á–µ—Ç (0 –≤—Å–µ–≥–¥–∞ –ø—Ä–æ–∏–≥—Ä—ã—à)
    elif bet_type in ['—á—ë—Ç', '—á–µ—Ç', '—á', '—á–µ—Ç–Ω–æ–µ', '—á–µ—Ç–Ω', '—á—ë—Ç–Ω–æ–µ', '—á—ë—Ç–Ω', '—á—ë—Ç–Ω', '—á–µ—Ç–Ω']:
        win_numbers = {n for n in range(1, 37) if n % 2 == 0}
    elif bet_type in ['–Ω–µ—á—ë—Ç', '–Ω–µ—á–µ—Ç', '–Ω—á', '–Ω–µ—á–µ—Ç–Ω–æ–µ', '–Ω–µ—á–µ—Ç–Ω', '–Ω–µ—á—ë—Ç–Ω–æ–µ', '–Ω–µ—á—ë—Ç–Ω', '–Ω–µ—á—ë—Ç–Ω', '–Ω–µ—á–µ—Ç–Ω', '–Ω–µ—á']:
        win_numbers = {n for n in range(1, 37) if n % 2 == 1}
    # –†—è–¥—ã
    elif bet_type in ['—Ä—è–¥1', '—Ä—è–¥ 1', '1—Ä—è–¥', '1 —Ä—è–¥', '—Ä1', '1—Ä']:
        win_numbers = {1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34}
    elif bet_type in ['—Ä—è–¥2', '—Ä—è–¥ 2', '2—Ä—è–¥', '2 —Ä—è–¥', '—Ä2', '2—Ä']:
        win_numbers = {2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35}
    elif bet_type in ['—Ä—è–¥3', '—Ä—è–¥ 3', '3—Ä—è–¥', '3 —Ä—è–¥', '—Ä3', '3—Ä']:
        win_numbers = {3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36}
    # –î—é–∂–∏–Ω—ã
    elif bet_type in ['1-12', '–ø–µ—Ä–≤–∞—è –¥—é–∂–∏–Ω–∞', '1–¥—é–∂–∏–Ω–∞', '1 –¥—é–∂–∏–Ω–∞', '1–¥', '–¥1']:
        win_numbers = set(range(1, 13))
    elif bet_type in ['13-24', '–≤—Ç–æ—Ä–∞—è –¥—é–∂–∏–Ω–∞', '2–¥—é–∂–∏–Ω–∞', '2 –¥—é–∂–∏–Ω–∞', '2–¥', '–¥2']:
        win_numbers = set(range(13, 25))
    elif bet_type in ['25-36', '—Ç—Ä–µ—Ç—å—è –¥—é–∂–∏–Ω–∞', '3–¥—é–∂–∏–Ω–∞', '3 –¥—é–∂–∏–Ω–∞', '3–¥', '–¥3']:
        win_numbers = set(range(25, 37))
    # –ü–æ–ª—è 1-18 / 19-36
    elif bet_type in ['1-18', '–º–∞–ª—ã–µ', '–º–∞–ª—ã–π', '–º', '–º–∞–ª']:
        win_numbers = set(range(1, 19))
    elif bet_type in ['19-36', '–±–æ–ª—å—à–∏–µ', '–±–æ–ª—å—à–æ–π', '–±', '–±–æ–ª']:
        win_numbers = set(range(19, 37))
    # –î–∏–∞–ø–∞–∑–æ–Ω —Ñ–æ—Ä–º–∞—Ç–∞ a-b
    elif re.match(r'^(\d{1,2})-(\d{1,2})$', bet_type):
        a, b = map(int, bet_type.split('-'))
        if 1 <= a <= b <= 36:
            win_numbers = set(range(a, b + 1))
        else:
            await message.answer('–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω. –∏—Å–ø–æ–ª—å–∑—É–π, –Ω–∞–ø—Ä–∏–º–µ—Ä: 13-24')
            try:
                roulette_in_progress.discard(user_id)
            except Exception:
                pass
            return
    # –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ
    elif bet_type.isdigit() and 0 <= int(bet_type) <= 36:
        win_numbers = {int(bet_type)}

    # –°–∏—Å—Ç–µ–º–∞ –≤ –ø–æ–ª—å–∑—É –∫–∞–∑–∏–Ω–æ ‚Äî –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –≤–ª–∏—è–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –≤—ã–±–æ—Ä —á–∏—Å–ª–∞, –Ω–æ –Ω–µ –ª–æ–º–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞
    player_balance = users[user_id]['balance']
    bet_percentage = (amount / player_balance) * 100 if player_balance > 0 else 0

    # –ë–∞–∑–æ–≤—ã–π —à–∞–Ω—Å –ø—Ä–æ–∏–≥—Ä—ã—à–∞ –ø–æ –±–∞–ª–∞–Ω—Å—É (—É–ª—É—á—à–µ–Ω –¥–ª—è –±–æ–ª–µ–µ —á–µ—Å—Ç–Ω–æ–π –∏–≥—Ä—ã)
    if player_balance <= 1_000_000:
        base_lose_chance = 0.20  # –±—ã–ª–æ 0.50 - —É–ª—É—á—à–∏–ª–∏ –Ω–∞ 5%
    elif player_balance <= 10_000_000:
        base_lose_chance = 0.20  # –±—ã–ª–æ 0.52 - —É–ª—É—á—à–∏–ª–∏ –Ω–∞ 5%
    elif player_balance <= 100_000_000:
        base_lose_chance = 0.20  # –±—ã–ª–æ 0.55 - —É–ª—É—á—à–∏–ª–∏ –Ω–∞ 6%
    elif player_balance <= 1_000_000_000:
        base_lose_chance = 0.20  # –±—ã–ª–æ 0.58 - —É–ª—É—á—à–∏–ª–∏ –Ω–∞ 7%
    elif player_balance <= 10_000_000_000:
        base_lose_chance = 0.20  # –±—ã–ª–æ 0.60 - —É–ª—É—á—à–∏–ª–∏ –Ω–∞ 7%
    elif player_balance <= 100_000_000_000:
        base_lose_chance = 0.20  # –±—ã–ª–æ 0.63 - —É–ª—É—á—à–∏–ª–∏ –Ω–∞ 8%
    elif player_balance <= 1_000_000_000_000:
        base_lose_chance = 0.20  # –±—ã–ª–æ 0.66 - —É–ª—É—á—à–∏–ª–∏ –Ω–∞ 9%
    else:
        base_lose_chance = 0.20  # –±—ã–ª–æ 0.68 - —É–ª—É—á—à–∏–ª–∏ –Ω–∞ 9%

    # –ë–æ–Ω—É—Å –∫ —à–∞–Ω—Å—É –ø—Ä–æ–∏–≥—Ä—ã—à–∞ –ø–æ —Ä–∞–∑–º–µ—Ä—É —Å—Ç–∞–≤–∫–∏ (–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–ª—É—á—à–µ–Ω)
    if bet_percentage <= 5:
        bet_bonus = 0.00  # –º–∞–ª–µ–Ω—å–∫–∏–µ —Å—Ç–∞–≤–∫–∏ - –±–µ–∑ —à—Ç—Ä–∞—Ñ–∞
    elif bet_percentage <= 15:
        bet_bonus = 0.00  # –±—ã–ª–æ 0.01 - —É–ª—É—á—à–∏–ª–∏ –≤ 2 —Ä–∞–∑–∞
    elif bet_percentage <= 30:
        bet_bonus = 0.00  # –±—ã–ª–æ 0.015 - —É–ª—É—á—à–∏–ª–∏ –ø–æ—á—Ç–∏ –≤ 2 —Ä–∞–∑–∞
    elif bet_percentage <= 50:
        bet_bonus = 0.0   # –±—ã–ª–æ 0.02 - —É–ª—É—á—à–∏–ª–∏ –≤ 2 —Ä–∞–∑–∞
    elif bet_percentage <= 80:
        bet_bonus = 0.0  # –±—ã–ª–æ 0.02 - —É–ª—É—á—à–∏–ª–∏ –ø–æ—á—Ç–∏ –≤ 2 —Ä–∞–∑–∞
    else:
        bet_bonus = 0.0  # –±—ã–ª–æ 0.025 - —É–ª—É—á—à–∏–ª–∏ –ø–æ—á—Ç–∏ –≤ 2 —Ä–∞–∑–∞

    # –æ–±—â–∏–π —à–∞–Ω—Å –ø—Ä–æ–∏–≥—Ä—ã—à–∞ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 50% –¥–ª—è –±–æ–ª–µ–µ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–π –∏–≥—Ä—ã
    # –Ω–æ –¥–ª—è x2 —Å—Ç–∞–≤–æ–∫ (18 —á–∏—Å–µ–ª) –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —à–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞ 50%
    # –¥–ª—è x3 —Å—Ç–∞–≤–æ–∫ (12 —á–∏—Å–µ–ª) –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —à–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞ 33.33%
    lose_chance = min(base_lose_chance + bet_bonus, 0.50)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥ —Å —É—á—ë—Ç–æ–º —Å–∏—Å—Ç–µ–º: —à–∞–Ω—Å –ø—Ä–æ–∏–≥—Ä—ã—à–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –±–∞–ª–∞–Ω—Å–∞ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —Å—Ç–∞–≤–∫–∏
    all_numbers = set(range(37))
    lose_numbers = list(all_numbers - win_numbers)
    win_numbers_list = list(win_numbers)
    # –ó–∞—â–∏—Ç–∞ –æ—Ç –ø—É—Å—Ç—ã—Ö –º–Ω–æ–∂–µ—Å—Ç–≤ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    if not win_numbers_list:
        number = random.randint(0, 36)
    else:
        # –ë–∞–∑–æ–≤–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–∏–≥—Ä—ã—à–∞
        win_probability = max(0.0, min(1.0, 1 - lose_chance))

        # –ü–æ—Ç–æ–ª–∫–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –≤—ã–∏–≥—Ä—ã—à–∞ –ø–æ —Ç–∏–ø—É —Å—Ç–∞–≤–∫–∏ (—É–ª—É—á—à–µ–Ω—ã)
        # x2 —Å—Ç–∞–≤–∫–∏ (—Ü–≤–µ—Ç–∞, —á–µ—Ç/–Ω–µ—á–µ—Ç, 1-18/19-36) - 60% —à–∞–Ω—Å (–±—ã–ª–æ 55%)
        # x3 —Å—Ç–∞–≤–∫–∏ (—Ä—è–¥—ã, –¥—é–∂–∏–Ω—ã) - 40% —à–∞–Ω—Å (–±—ã–ª–æ 38%)
        # x36 —Å—Ç–∞–≤–∫–∏ (–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —á–∏—Å–ª–∞, –∑–µ—Ä–æ) - 3% —à–∞–Ω—Å (–±—ã–ª–æ 2%)
        type_cap_win_prob = 0.35  # –±—ã–ª–æ 0.28 - —É–ª—É—á—à–∏–ª–∏ –Ω–∞ 25%
        if len(win_numbers) <= 1:
            # –æ–¥–∏–Ω–æ—á–Ω–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ –∑–µ—Ä–æ (x36)
            type_cap_win_prob = 0.03   # –±—ã–ª–æ 0.02 - —É–ª—É—á—à–∏–ª–∏ –Ω–∞ 50%
        elif len(win_numbers) in (12,):
            # –¥—é–∂–∏–Ω—ã –∏ —Ä—è–¥—ã (x3)
            type_cap_win_prob = 0.65   # –±—ã–ª–æ 0.38 - —É–ª—É—á—à–∏–ª–∏ –¥–æ 40%
        elif len(win_numbers) in (18,):
            # —Ü–≤–µ—Ç, —á—ë—Ç/–Ω–µ—á—ë—Ç, 1-18/19-36 (x2)
            type_cap_win_prob = 0.60   # –±—ã–ª–æ 0.55 - —É–ª—É—á—à–∏–ª–∏ –¥–æ 60%
        elif 2 <= len(win_numbers) <= 6:
            # —É–∑–∫–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã (2-6 —á–∏—Å–µ–ª)
            type_cap_win_prob = 0.65   # –±—ã–ª–æ 0.22 - —É–ª—É—á—à–∏–ª–∏ –Ω–∞ 27%
        else:
            # –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ (–≤–∫–ª—é—á–∞—è –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã)
            type_cap_win_prob = 0.65   # –±—ã–ª–æ 0.28 - —É–ª—É—á—à–∏–ª–∏ –Ω–∞ 25%

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–æ—Ç–æ–ª–∫–∏
        win_probability = min(win_probability, type_cap_win_prob)

        # –ë—É—Å—Ç –∑–∞ —Å–µ—Ä–∏—é –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π: –∏–≥—Ä–æ–∫—É, –∫–æ—Ç–æ—Ä—ã–π —á–∞—Å—Ç–æ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–ª, –ø–æ–¥–Ω–∏–º–∞–µ–º —à–∞–Ω—Å (—É–ª—É—á—à–µ–Ω–æ)
        # –•—Ä–∞–Ω–∏–º –≤ users[user]['roulette_loss_streak']
        loss_streak = int(users[user_id].get('roulette_loss_streak', 0))
        if loss_streak >= 2:  # –±—ã–ª–æ 3 - —Å–Ω–∏–∑–∏–ª–∏ –ø–æ—Ä–æ–≥
            # –£–ª—É—á—à–µ–Ω–Ω—ã–µ –±—É—Å—Ç—ã: 2 ‚Äî +8–ø.–ø., 4 ‚Äî +15–ø.–ø., 6 ‚Äî +22–ø.–ø., 8 ‚Äî +30–ø.–ø.
            boost = 0.0
            if loss_streak >= 8:
                boost = 0.30  # –±—ã–ª–æ 0.15 - —É–¥–≤–æ–∏–ª–∏
            elif loss_streak >= 6:
                boost = 0.22  # –±—ã–ª–æ 0.10 - —É–¥–≤–æ–∏–ª–∏
            elif loss_streak >= 4:
                boost = 0.15  # –±—ã–ª–æ 0.10 - —É–ª—É—á—à–∏–ª–∏ –Ω–∞ 50%
            else:
                boost = 0.08  # –±—ã–ª–æ 0.05 - —É–ª—É—á—à–∏–ª–∏ –Ω–∞ 60%
            win_probability = min(type_cap_win_prob, win_probability + boost)
            
        # –î–ª—è —á–∏—Å–ª–∞/–∑–µ—Ä–æ: –ø–æ—Å–ª–µ –±—É—Å—Ç–æ–≤ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º–æ–º 3% (—É–ª—É—á—à–∏–ª–∏ —Å 2%)
        if len(win_numbers) <= 1:
            win_probability = min(0.03, win_probability)  # –±—ã–ª–æ 0.02 - —É–ª—É—á—à–∏–ª–∏ –Ω–∞ 50%

        # === –ê–ù–¢–ò-–ë–û–ù–£–°–´ –î–õ–Ø –¢–û–ü-3 –ò–ì–†–û–ö–û–í ===
        # –°–∫—Ä—ã—Ç–æ–µ ¬´–ø—Ä–æ–∫–ª—è—Ç–∏–µ¬ª —Ç–æ–ø-3: —Å–Ω–∏–∂–∞–µ–º —à–∞–Ω—Å –ø–æ–±–µ–¥—ã (—É—Å–∏–ª–µ–Ω–æ)
        try:
            position = get_user_position(user_id)
            if position <= 3:
                # –£—Å–∏–ª–µ–Ω–Ω–æ–µ –∑–∞–Ω–∏–∂–µ–Ω–∏–µ –¥–ª—è —Ç–æ–ø-3
                win_probability *= 0.99  # -25% –¥–ª—è —Ç–æ–ø-3
                # –î–æ–ø. –æ—Å–ª–∞–±–ª–µ–Ω–∏–µ –¥–ª—è 1-–≥–æ –º–µ—Å—Ç–∞
                if position == 1:
                    win_probability *= 0.99  # –µ—â—ë -20% –¥–ª—è 1-–≥–æ –º–µ—Å—Ç–∞
                elif position == 2:
                    win_probability *= 0.99  # –µ—â—ë -15% –¥–ª—è 2-–≥–æ –º–µ—Å—Ç–∞
                elif position == 3:
                    win_probability *= 0.99  # –µ—â—ë -10% –¥–ª—è 3-–≥–æ –º–µ—Å—Ç–∞
        except Exception:
            pass

        # === –°–ò–°–¢–ï–ú–ê "–ß–ï–ú –ë–û–õ–¨–®–ï –®–ê–ù–°, –¢–ï–ú –ë–û–õ–¨–®–ï –†–ò–°–ö" ===
        # –ß–µ–º –≤—ã—à–µ —à–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞, —Ç–µ–º –±–æ–ª—å—à–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–æ–∏–≥—Ä—ã—à–∞ (–Ω–æ –Ω–µ –æ—á–µ–Ω—å —Å–∏–ª—å–Ω–æ)
        if win_probability > 0.5:  # –ï—Å–ª–∏ —à–∞–Ω—Å –±–æ–ª—å—à–µ 50%
            risk_multiplier = 1.0 + (win_probability - 0.5) * 0.1  # –ú–∞–∫—Å–∏–º—É–º +15% –∫ –ø—Ä–æ–∏–≥—Ä—ã—à—É
            win_probability /= risk_multiplier
            print(f"üé∞ –†–∏—Å–∫-–º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è {user_id}: x{risk_multiplier:.2f} (—à–∞–Ω—Å: {win_probability*100:.1f}%)")
        elif win_probability > 0.3:  # –ï—Å–ª–∏ —à–∞–Ω—Å –±–æ–ª—å—à–µ 30%
            risk_multiplier = 1.0 + (win_probability - 0.3) * 0.1  # –ú–∞–∫—Å–∏–º—É–º +4% –∫ –ø—Ä–æ–∏–≥—Ä—ã—à—É
            win_probability /= risk_multiplier
            print(f"üé∞ –†–∏—Å–∫-–º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è {user_id}: x{risk_multiplier:.2f} (—à–∞–Ω—Å: {win_probability*100:.1f}%)")

        # –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ —Å—Ç–∞–≤–∏—Ç –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ —Ç–∏–ø —Å—Ç–∞–≤–∫–∏ –ø–æ–¥—Ä—è–¥ 8+ —Ä–∞–∑, –≤–≤–æ–¥–∏–º –º—è–≥–∫–æ–µ –∑–∞–Ω–∏–∂–µ–Ω–∏–µ —à–∞–Ω—Å–∞ (—É–ª—É—á—à–µ–Ω–æ)
        if user_streak['bet_type'] == bet_type:
            current_streak = user_streak.get('streak', 0) + 1
        else:
            current_streak = 1

        if current_streak >= 8:  # –±—ã–ª–æ 6 - —É–≤–µ–ª–∏—á–∏–ª–∏ –ø–æ—Ä–æ–≥
            # –ë–æ–ª–µ–µ –º—è–≥–∫–æ–µ –∑–∞–Ω–∏–∂–µ–Ω–∏–µ: -10% –≤–º–µ—Å—Ç–æ -15%, –∏ –Ω–µ –Ω–∏–∂–µ 40% –æ—Ç –ø–æ—Ç–æ–ª–∫–∞
            win_probability *= 0.99  # –±—ã–ª–æ 0.85 - —É–ª—É—á—à–∏–ª–∏ —Å -15% –¥–æ -10%
            min_floor = max(0.001, type_cap_win_prob * 0.40)  # –±—ã–ª–æ 0.30 - —É–ª—É—á—à–∏–ª–∏ –¥–æ 40%
            win_probability = max(min_floor, win_probability)

        # === –ê–ù–¢–ò-–ë–û–ù–£–°–´ –î–õ–Ø –ë–û–ì–ê–¢–´–• –ò–ì–†–û–ö–û–í ===
        # –ü–æ–Ω–∏–∂–µ–Ω–∏–µ —à–∞–Ω—Å–æ–≤ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Å—Ç–∞–≤–æ–∫ (>= 70–∫–∫–∫) - —É—Å–∏–ª–µ–Ω–æ
        if amount >= 300_000_000_000:
            win_probability *= 0.99  # -35% –¥–ª—è –æ—á–µ–Ω—å –±–æ–ª—å—à–∏—Ö —Å—Ç–∞–≤–æ–∫
        elif amount >= 70_000_000_000:
            win_probability *= 0.99  # -20% –¥–ª—è –±–æ–ª—å—à–∏—Ö —Å—Ç–∞–≤–æ–∫

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–Ω—Ç–∏-–±–æ–Ω—É—Å—ã –ø–æ –∞–±—Å–æ–ª—é—Ç–Ω–æ–º—É –±–∞–ª–∞–Ω—Å—É –∏–≥—Ä–æ–∫–∞
        player_balance = users[user_id]['balance']
        if player_balance >= 1_000_000_000_000:  # 1–∫–∫–∫–∫+
            balance_penalty = 0.99  # -15% –¥–ª—è –æ—á–µ–Ω—å –±–æ–≥–∞—Ç—ã—Ö
            win_probability *= balance_penalty
            print(f"üé∞ –ê–Ω—Ç–∏-–±–æ–Ω—É—Å –ø–æ –±–∞–ª–∞–Ω—Å—É –¥–ª—è {user_id}: x{balance_penalty} (–±–∞–ª–∞–Ω—Å: ${format_money(player_balance)})")
        elif player_balance >= 100_000_000_000:  # 100–∫–∫–∫+
            balance_penalty = 0.99  # -10% –¥–ª—è –±–æ–≥–∞—Ç—ã—Ö
            win_probability *= balance_penalty
            print(f"üé∞ –ê–Ω—Ç–∏-–±–æ–Ω—É—Å –ø–æ –±–∞–ª–∞–Ω—Å—É –¥–ª—è {user_id}: x{balance_penalty} (–±–∞–ª–∞–Ω—Å: ${format_money(player_balance)})")

        # === –ü–†–û–ö–õ–Ø–¢–ò–ï –£–î–ê–ß–ò ===
        # –ï—Å–ª–∏ —É –∏–≥—Ä–æ–∫–∞ –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π —à–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞, –¥–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä—ã—Ç–æ–µ –ø—Ä–æ–∫–ª—è—Ç–∏–µ
        if win_probability > 0.4:  # –ï—Å–ª–∏ —à–∞–Ω—Å –±–æ–ª—å—à–µ 40%
            curse_strength = min(0.15, (win_probability - 0.4) * 0.5)  # –ú–∞–∫—Å–∏–º—É–º -15%
            curse_multiplier = 1.0 - curse_strength
            win_probability *= curse_multiplier
            print(f"üé∞ –ü—Ä–æ–∫–ª—è—Ç–∏–µ —É–¥–∞—á–∏ –¥–ª—è {user_id}: -{curse_strength*100:.1f}% (—Ñ–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–Ω—Å: {win_probability*100:.1f}%)")

        # === –§–ò–ù–ê–õ–¨–ù–ê–Ø –ó–ê–©–ò–¢–ê –û–¢ –°–õ–ò–®–ö–û–ú –ù–ò–ó–ö–ò–• –®–ê–ù–°–û–í ===
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —à–∞–Ω—Å –Ω–µ —Å—Ç–∞–ª —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–º –ø–æ—Å–ª–µ –≤—Å–µ—Ö –∞–Ω—Ç–∏-–±–æ–Ω—É—Å–æ–≤
        min_safe_probability = type_cap_win_prob * 0.3  # –ú–∏–Ω–∏–º—É–º 30% –æ—Ç –ø–æ—Ç–æ–ª–∫–∞ —Ç–∏–ø–∞ —Å—Ç–∞–≤–∫–∏
        if win_probability < min_safe_probability:
            old_probability = win_probability
            win_probability = min_safe_probability
            print(f"üé∞ –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏—Ö —à–∞–Ω—Å–æ–≤ –¥–ª—è {user_id}: {old_probability*100:.1f}% ‚Üí {win_probability*100:.1f}%")

        # –û–±–Ω–æ–≤–∏–º –ª–æ–∫–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Å—Ç—Ä–∏–∫–∞ (–∑–∞–ø–∏—à–µ–º –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã)
        user_streak_next = {'bet_type': bet_type, 'streak': current_streak}



        if random.random() < win_probability and win_numbers_list:
            number = random.choice(win_numbers_list)
        else:
            # –µ—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ lose_numbers –ø—É—Å—Ç, –≤—ã–±–µ—Ä–µ–º –∏–∑ –≤—Å–µ—Ö
            if lose_numbers:
                number = random.choice(lose_numbers)
            else:
                number = random.randint(0, 36)
    
    color = get_roulette_number_color(number)
    
    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à —Å —É—á–µ—Ç–æ–º —Ä–∞–∑–º–µ—Ä–∞ —Å—Ç–∞–≤–∫–∏
    won = False
    
    multiplier = 0
    
    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤—ã–∏–≥—Ä–∞–ª –ª–∏ –∏–≥—Ä–æ–∫ –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º —Ä—É–ª–µ—Ç–∫–∏
    should_win_by_rules = False
    
    bet_multiplier = 0
    
    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π –¥–ª—è —Ç–∏–ø–æ–≤ —Å—Ç–∞–≤–æ–∫
    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –≤—ã–ø–ª–∞—Ç—ã –ø–æ —Ç–∏–ø—É —Å—Ç–∞–≤–∫–∏ (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞)
    import re
    type_multiplier = 0
    range_match = re.match(r'^(\d{1,2})-(\d{1,2})$', bet_type)
    if bet_type.isdigit() and 0 <= int(bet_type) <= 36:
        type_multiplier = 36
    elif bet_type in ['–∑–µ—Ä–æ', '–∑', '–Ω–æ–ª—å', '–Ω—É–ª—å', '0', '–∑–µ—Ä', '–∑–µ']:
        type_multiplier = 36
    elif range_match:
        a = int(range_match.group(1))
        b = int(range_match.group(2))
        if (a, b) in [(1, 18), (19, 36)]:
            type_multiplier = 2
        elif 1 <= a <= b <= 36 and (b - a + 1) == 12:
            type_multiplier = 3
        else:
            type_multiplier = 0
    elif bet_type in ['—Ä—è–¥1', '—Ä—è–¥ 1', '1—Ä—è–¥', '1 —Ä—è–¥', '—Ä1', '1—Ä',
                      '—Ä—è–¥2', '—Ä—è–¥ 2', '2—Ä—è–¥', '2 —Ä—è–¥', '—Ä2', '2—Ä',
                      '—Ä—è–¥3', '—Ä—è–¥ 3', '3—Ä—è–¥', '3 —Ä—è–¥', '—Ä3', '3—Ä',
                      '1-12', '13-24', '25-36']:
        type_multiplier = 3
    elif bet_type in ['1-18', '19-36', '–º–∞–ª—ã–µ', '–º–∞–ª—ã–π', '–º', '–º–∞–ª', '–±–æ–ª—å—à–∏–µ', '–±–æ–ª—å—à–æ–π', '–±', '–±–æ–ª',
                      '—á—ë—Ç', '—á–µ—Ç', '—á', '—á–µ—Ç–Ω–æ–µ', '—á–µ—Ç–Ω', '—á—ë—Ç–Ω–æ–µ', '—á—ë—Ç–Ω',
                      '–Ω–µ—á—ë—Ç', '–Ω–µ—á–µ—Ç', '–Ω—á', '–Ω–µ—á–µ—Ç–Ω–æ–µ', '–Ω–µ—á–µ—Ç–Ω', '–Ω–µ—á—ë—Ç–Ω–æ–µ', '–Ω–µ—á—ë—Ç–Ω', '–Ω–µ—á']:
        type_multiplier = 2
    if bet_type in ['—á—ë—Ä–Ω–æ–µ', '—á–µ—Ä', '—á–µ—Ä–Ω–æ–µ', '—á–µ—Ä–Ω', '—á—ë—Ä–Ω', '—á', '—á—ë—Ä'] and color == 'black':
        should_win_by_rules = True
        bet_multiplier = 2
    elif bet_type in ['–∫—Ä–∞—Å–Ω–æ–µ', '–∫—Ä–∞', '–∫—Ä', '–∫—Ä–∞—Å–Ω', '–∫—Ä–∞—Å', '–∫', '–∫—Ä–∞—Å–Ω'] and color == 'red':
        should_win_by_rules = True
        bet_multiplier = 2
    elif bet_type in ['–∑–µ—Ä–æ', '–∑', '–Ω–æ–ª—å', '–Ω—É–ª—å', '0', '–∑–µ—Ä', '–∑–µ'] and number == 0:
        should_win_by_rules = True
        bet_multiplier = 36
    elif bet_type in ['—á—ë—Ç', '—á–µ—Ç', '—á', '—á–µ—Ç–Ω–æ–µ', '—á–µ—Ç–Ω', '—á—ë—Ç–Ω–æ–µ', '—á—ë—Ç–Ω', '—á—ë—Ç–Ω', '—á–µ—Ç–Ω'] and number != 0 and number % 2 == 0:
        should_win_by_rules = True
        bet_multiplier = 2
    elif bet_type in ['–Ω–µ—á—ë—Ç', '–Ω–µ—á–µ—Ç', '–Ω—á', '–Ω–µ—á–µ—Ç–Ω–æ–µ', '–Ω–µ—á–µ—Ç–Ω', '–Ω–µ—á—ë—Ç–Ω–æ–µ', '–Ω–µ—á—ë—Ç–Ω', '–Ω–µ—á—ë—Ç–Ω', '–Ω–µ—á–µ—Ç–Ω', '–Ω–µ—á'] and number % 2 == 1:
        should_win_by_rules = True
        bet_multiplier = 2
    
    # —Å—Ç–∞–≤–∫–∏ –Ω–∞ —Ä—è–¥—ã
    if bet_type in ['—Ä—è–¥1', '—Ä—è–¥ 1', '1—Ä—è–¥', '1 —Ä—è–¥', '—Ä1', '1—Ä', '—Ä—è–¥1', '—Ä—è–¥1'] and number in [1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34]:
        should_win_by_rules = True
        bet_multiplier = 3
    if bet_type in ['—Ä—è–¥2', '—Ä—è–¥ 2', '2—Ä—è–¥', '2 —Ä—è–¥', '—Ä2', '2—Ä', '—Ä—è–¥2', '—Ä—è–¥2'] and number in [2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35]:
        should_win_by_rules = True
        bet_multiplier = 3
    if bet_type in ['—Ä—è–¥3', '—Ä—è–¥ 3', '3—Ä—è–¥', '3 —Ä—è–¥', '—Ä3', '3—Ä', '—Ä—è–¥3', '—Ä—è–¥3'] and number in [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36]:
        should_win_by_rules = True
        bet_multiplier = 3
    # —Å—Ç–∞–≤–∫–∏ –Ω–∞ –¥—é–∂–∏–Ω—ã
    if bet_type in ['1-12', '–ø–µ—Ä–≤–∞—è –¥—é–∂–∏–Ω–∞', '1–¥—é–∂–∏–Ω–∞', '1 –¥—é–∂–∏–Ω–∞', '1–¥', '–¥1'] and 1 <= number <= 12:
        should_win_by_rules = True
        bet_multiplier = 3
    if bet_type in ['13-24', '–≤—Ç–æ—Ä–∞—è –¥—é–∂–∏–Ω–∞', '2–¥—é–∂–∏–Ω–∞', '2 –¥—é–∂–∏–Ω–∞', '2–¥', '–¥2'] and 13 <= number <= 24:
        should_win_by_rules = True
        bet_multiplier = 3
    if bet_type in ['25-36', '—Ç—Ä–µ—Ç—å—è –¥—é–∂–∏–Ω–∞', '3–¥—é–∂–∏–Ω–∞', '3 –¥—é–∂–∏–Ω–∞', '3–¥', '–¥3'] and 25 <= number <= 36:
        should_win_by_rules = True
        bet_multiplier = 3
    # —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –≤–∏–¥–∞ a-b
    if range_match:
        a = int(range_match.group(1))
        b = int(range_match.group(2))
        if 1 <= a <= b <= 36 and a <= number <= b:
            # –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–Ω–æ–∂–∏—Ç–µ–ª—å –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º: 1-18/19-36 = x2, –¥—é–∂–∏–Ω—ã = x3
            if (a, b) in [(1, 18), (19, 36)]:
                should_win_by_rules = True
                bet_multiplier = 2
            elif (b - a + 1) == 12:
                should_win_by_rules = True
                bet_multiplier = 3
    # —Å—Ç–∞–≤–∫–∏ –Ω–∞ —Å–µ–∫—Ç–æ—Ä–∞
    if bet_type in ['1-18', '1-18', '–º–∞–ª—ã–µ', '–º–∞–ª—ã–π', '–º', '–º–∞–ª', '1-18', '1-18'] and 1 <= number <= 18:
        should_win_by_rules = True
        bet_multiplier = 2
    if bet_type in ['19-36', '19-36', '–±–æ–ª—å—à–∏–µ', '–±–æ–ª—å—à–æ–π', '–±', '–±–æ–ª', '19-36', '19-36'] and 19 <= number <= 36:
        should_win_by_rules = True
        bet_multiplier = 2
    # —Å—Ç–∞–≤–∫–∏ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —á–∏—Å–ª–∞
    if bet_type.isdigit() and 0 <= int(bet_type) <= 36:
        bet_number = int(bet_type)
        if number == bet_number:
            should_win_by_rules = True
            bet_multiplier = 36
    
    # –ò—Ç–æ–≥ –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º —Ä—É–ª–µ—Ç–∫–∏ –±–µ–∑ —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–æ–±–µ–¥ –¥–ª—è –ø—Ä–æ–∏–≥—Ä—ã—à–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫
    won = should_win_by_rules
    multiplier = bet_multiplier if won else 0
    
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —Ç–∏–ø —Å—Ç–∞–≤–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω
    recognized_types = [
    
    '—á—ë—Ä–Ω–æ–µ', '—á–µ—Ä', '—á–µ—Ä–Ω–æ–µ', '—á–µ—Ä–Ω', '—á—ë—Ä–Ω', '—á', '—á—ë—Ä',
        '–∫—Ä–∞—Å–Ω–æ–µ', '–∫—Ä–∞', '–∫—Ä', '–∫—Ä–∞—Å–Ω', '–∫—Ä–∞—Å', '–∫', '–∫—Ä–∞—Å–Ω',
        '–∑–µ—Ä–æ', '–∑', '–Ω–æ–ª—å', '–Ω—É–ª—å', '0', '–∑–µ—Ä', '–∑–µ',
        '—á—ë—Ç', '—á–µ—Ç', '—á', '—á–µ—Ç–Ω–æ–µ', '—á–µ—Ç–Ω', '—á—ë—Ç–Ω–æ–µ', '—á—ë—Ç–Ω', '—á—ë—Ç–Ω', '—á–µ—Ç–Ω',
        '–Ω–µ—á—ë—Ç', '–Ω–µ—á–µ—Ç', '–Ω—á', '–Ω–µ—á–µ—Ç–Ω–æ–µ', '–Ω–µ—á–µ—Ç–Ω', '–Ω–µ—á—ë—Ç–Ω–æ–µ', '–Ω–µ—á—ë—Ç–Ω', '–Ω–µ—á—ë—Ç–Ω', '–Ω–µ—á–µ—Ç–Ω', '–Ω–µ—á',
        '—Ä—è–¥1', '—Ä—è–¥ 1', '1—Ä—è–¥', '1 —Ä—è–¥', '—Ä1', '1—Ä',
        '—Ä—è–¥2', '—Ä—è–¥ 2', '2—Ä—è–¥', '2 —Ä—è–¥', '—Ä2', '2—Ä',
        '—Ä—è–¥3', '—Ä—è–¥ 3', '3—Ä—è–¥', '3 —Ä—è–¥', '—Ä3', '3—Ä',
        '1-12', '–ø–µ—Ä–≤–∞—è –¥—é–∂–∏–Ω–∞', '1–¥—é–∂–∏–Ω–∞', '1 –¥—é–∂–∏–Ω–∞', '1–¥', '–¥1',
        '13-24', '–≤—Ç–æ—Ä–∞—è –¥—é–∂–∏–Ω–∞', '2–¥—é–∂–∏–Ω–∞', '2 –¥—é–∂–∏–Ω–∞', '2–¥', '–¥2',
        '25-36', '—Ç—Ä–µ—Ç—å—è –¥—é–∂–∏–Ω–∞', '3–¥—é–∂–∏–Ω–∞', '3 –¥—é–∂–∏–Ω–∞', '3–¥', '–¥3',
        '1-18', '–º–∞–ª—ã–µ', '–º–∞–ª—ã–π', '–º', '–º–∞–ª',
        '19-36', '–±–æ–ª—å—à–∏–µ', '–±–æ–ª—å—à–æ–π', '–±', '–±–æ–ª'
    ]
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —Ç–∏–ø —Å—Ç–∞–≤–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω
    if bet_type not in recognized_types and not (bet_type.isdigit() and 0 <= int(bet_type) <= 36) and not re.match(r'^(\d{1,2})-(\d{1,2})$', bet_type):
        # –µ—Å–ª–∏ —Ç–∏–ø —Å—Ç–∞–≤–∫–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        await message.answer(f'–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å—Ç–∞–≤–∫–∏ "{bet_type}". –∏—Å–ø–æ–ª—å–∑—É–π: —Ä—É–ª —á—ë—Ä–Ω–æ–µ 1000 –∏–ª–∏ —Ä—É–ª 13-24 1–∫')
        try:
            roulette_in_progress.discard(user_id)
        except Exception:
            pass
        return
    
    # –ø–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ (—ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –Ω–∏–∫/username –æ—Ç HTML)
    raw_name = message.from_user.first_name or message.from_user.username or "–∏–≥—Ä–æ–∫"
    
    user_name = html_escape(raw_name)
    user_mention = f"<a href='tg://user?id={message.from_user.id}'><b>{user_name}</b></a>"
    
    # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if won:
        # –ù–∞—á–∏—Å–ª—è–µ–º –ü–û–õ–ù–´–ô –≤—ã–∏–≥—Ä—ã—à (—Å—Ç–∞–≤–∫–∞ * –º–Ω–æ–∂–∏—Ç–µ–ª—å), —Ç.–∫. —Å—Ç–∞–≤–∫–∞ –±—ã–ª–∞ —Å–ø–∏—Å–∞–Ω–∞ —Ä–∞–Ω—å—à–µ
        # –î–ª—è —Ç–µ–∫—Å—Ç–∞ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —á–∏—Å—Ç—É—é –ø—Ä–∏–±—ã–ª—å
        profit_amount = amount * (multiplier - 1)
        payout_amount = amount * multiplier
        
        # –ù–∞—á–∏—Å–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à
        users[user_id]['balance'] += payout_amount
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —ç—Ç–æ —Å—Ç–∞–≤–∫–∞ "–≤—Å–µ"
        was_all_in = len(parts) >= 3 and parts[2] in ['–≤–±', '–≤—Å–µ', '–≤—Å—ë', '–∞–ª–ª', '–≤–∞–±–∞–Ω–∫', '–≤—Å', '–≤', '–≤–∞–±', '–≤–∞–±–∞–Ω', '–≤—Å–µ–¥–µ–Ω—å–≥–∏', '–≤—Å—ë–¥–µ–Ω—å–≥–∏']
        
        if was_all_in:
            result_text = f"{user_mention}, –ø–æ–∑–¥—Ä–∞–≤–ª—è—é! —Ç—ã –≤—ã–∏–≥—Ä–∞–ª <b>${format_money(payout_amount)}</b> (x{multiplier}).\n\n"
            result_text += f"–±–∞–ª–∞–Ω—Å ‚Äî <b>${format_money(users[user_id]['balance'])}</b>."
        else:
            result_text = f"{user_mention}, –ø–æ–∑–¥—Ä–∞–≤–ª—è—é! —Ç—ã –≤—ã–∏–≥—Ä–∞–ª <b>${format_money(profit_amount)}</b> (x{multiplier}).\n\n"
            result_text += f"–±–∞–ª–∞–Ω—Å ‚Äî <b>${format_money(users[user_id]['balance'])}</b>."
    else:
        # –°—Ç–∞–≤–∫–∞ —É–∂–µ —Å–ø–∏—Å–∞–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–∏–≥—Ä—ã—à
        result_text = f"{user_mention}, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é —Ç—ã –ø—Ä–æ–∏–≥—Ä–∞–ª <b>${format_money(amount)}</b>.\n\n"
        result_text += f"–±–∞–ª–∞–Ω—Å ‚Äî <b>${format_money(users[user_id]['balance'])}</b>."
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ä–∏—é –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π: –ø—Ä–∏ –≤—ã–∏–≥—Ä—ã—à–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º, –ø—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º
    try:
        if won:
            users[user_id]['roulette_loss_streak'] = 0
        else:
            users[user_id]['roulette_loss_streak'] = int(users[user_id].get('roulette_loss_streak', 0)) + 1
    except Exception:
        pass
    
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    save_users()
    
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π —Ä—É–ª–µ—Ç–∫–∏
    try:
        # —Å–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        # –ü–µ—Ä–µ–¥–∞–µ–º –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—É–º–º—É —á–∏—Å—Ç–æ–≥–æ –≤—ã–∏–≥—Ä—ã—à–∞ (–∏–ª–∏ 0 –ø—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ)
        image_path = create_roulette_result_image(number, color, bet_type, amount, won, multiplier, profit_amount if won else 0)
        
        if image_path and os.path.exists(image_path):
            # –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è flood control
            await asyncio.sleep(0.5)
            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            await bot.send_photo(
                message.chat.id,
                types.FSInputFile(image_path),
                caption=result_text,
                parse_mode='HTML'
            )
            
            # —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                os.remove(image_path)
            except:
                pass
        else:
            # –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            await message.answer(result_text, parse_mode='HTML')
    
    except Exception as e:
        # –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        try:
            await message.answer(result_text, parse_mode='HTML')
        except Exception as e2:
            # –µ—Å–ª–∏ –∏ —Å HTML –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ HTML
            plain_text = result_text.replace('<b>', '').replace('</b>', '').replace('<a href="tg://user?id=', '').replace('</a>', '')
            await message.answer(plain_text)

    # –û–±–Ω–æ–≤–∏–º —Å—Ç—Ä–∏–∫ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å—Ç–∞–≤–æ–∫
    try:
        roulette_bet_streaks[user_id] = user_streak_next
    except Exception:
        pass
    finally:
        # –°–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –∏—Å—Ö–æ–¥–∞
        try:
            roulette_in_progress.discard(user_id)
        except Exception:
            pass

# === –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —Å–ø–∞–º–∞ ===
@dp.message()
async def handle_all_messages(message: types.Message):
    """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —Å–ø–∞–º–∞"""
    
    # –£–±–∏—Ä–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–ø–∞–º
    if message.text and is_spam_message(message.text):
        print(f"üö´ –°–ø–∞–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {message.text[:50]}...")
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–ø–∞–º
    
    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–ø–∞–º, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ
    # (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å)

# === –∫–æ–º–∞–Ω–¥–∞ —Ä—É–ª–µ—Ç–∫–∏ ===
@dp.message(Command('rul'))
async def roulette_command_handler(message: types.Message):
    """–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /rul"""
    
    # –£–±–∏—Ä–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ä—É–ª–µ—Ç–∫–µ
    # –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Ä—É–ª–µ—Ç–∫–∏
    await roulette_handler(message)

# === –∫–æ–Ω–µ—Ü —Ä—É–ª–µ—Ç–∫–∏ ===
# === –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "—Å–æ–∑–¥–∞—Ç—å —á–µ–ª–æ–≤–µ—á–∫–∞" ===
@dp.callback_query(lambda c: c.data == 'confirm_clear_db')
async def confirm_clear_db_callback(callback: types.CallbackQuery):
    """–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    user_id = callback.from_user.id
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS:
        await callback.answer('—É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ', show_alert=True)
        return
    
    # –æ—á–∏—â–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    global users
    users = {}
    
    save_users()
    
    await callback.answer('–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞!', show_alert=True)
    
    await callback.message.edit_text(
        'üóëÔ∏è <b>–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞!</b>\n\n'
        '‚úÖ –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–¥–∞–ª–µ–Ω—ã\n'
        '‚úÖ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã\n'
        '‚úÖ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞\n\n'
        'üìÖ <b>–¥–∞—Ç–∞ –æ—á–∏—Å—Ç–∫–∏:</b> ' + datetime.datetime.now().strftime('%d.%m.%Y %H:%M:%S'),
        parse_mode='HTML'
    )

@dp.callback_query(lambda c: c.data == 'cancel_clear_db')
async def cancel_clear_db_callback(callback: types.CallbackQuery):
    """–æ—Ç–º–µ–Ω–∞ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    user_id = callback.from_user.id
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS:
        await callback.answer('—É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ', show_alert=True)
        return
    
    await callback.answer('–æ—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞', show_alert=True)
    
    await callback.message.edit_text(
        '‚ùå <b>–æ—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n'
        '–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Å—Ç–∞–ª–∞—Å—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π',
        parse_mode='HTML'
    )

@dp.callback_query(lambda c: c.data == 'claim_bonus')
async def claim_bonus_callback(callback: types.CallbackQuery):
    """–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞"""
    user_id = callback.from_user.id
    
    user_id_str = str(user_id)
    
    # –£–±–∏—Ä–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ–Ω—É—Å–∞–º
    
    if user_id_str not in users:
        await callback.answer("—Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è", show_alert=True)
        return
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
    is_subscribed = await check_channel_subscription(user_id)
    
    if not is_subscribed:
        # —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='‚úÖ –∑–∞–±—Ä–∞—Ç—å –±–æ–Ω—É—Å', callback_data='claim_bonus')]
        ])
        
        await callback.message.edit_text(
            '<b>‚ùå –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª ‚Äî https://t.me/daisicx</b>',
            parse_mode='HTML',
            reply_markup=markup,
            disable_web_page_preview=True
        )
        await callback.answer()
        return
    
    user_data = users[user_id_str]
    
    nick = user_data.get('nick', '–∏–≥—Ä–æ–∫')
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–æ–Ω—É—Å–∞
    last_bonus_time = user_data.get('last_bonus_time', 0)
    
    current_time = datetime.datetime.now().timestamp()
    time_diff = current_time - last_bonus_time
    
    # 5 –º–∏–Ω—É—Ç = 300 —Å–µ–∫—É–Ω–¥
    if time_diff >= 300:
        # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–æ–Ω—É—Å –æ—Ç 1 –¥–æ 10–∫–∫–∫
        min_bonus = 1_000_000_000  # 1–∫–∫–∫
        max_bonus = 10_000_000_000  # 10–∫–∫–∫
        bonus_amount = random.randint(min_bonus, max_bonus)
        
        # –≤—ã–¥–∞–µ–º –±–æ–Ω—É—Å
        user_data['balance'] += bonus_amount
        user_data['last_bonus_time'] = current_time
        save_users()
        
        await callback.answer(f"–±–æ–Ω—É—Å –ø–æ–ª—É—á–µ–Ω! +${format_money(bonus_amount)}", show_alert=True)
        await callback.message.edit_text(
            f'<b>{nick}</b>, —Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–∞–ª –±–æ–Ω—É—Å! —Ç—ã –ø–æ–ª—É—á–∏–ª <b>${format_money(bonus_amount)}</b>',
            parse_mode='HTML'
        )
    else:
        # –µ—â–µ —Ä–∞–Ω–æ
        remaining_time = 300 - time_diff
        minutes = int(remaining_time // 60)
        seconds = int(remaining_time % 60)
        time_text = f'<b>{minutes}:{seconds:02d}</b>'
        
        await callback.answer(f"‚ùå –æ—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏ {time_text} –¥–æ –±–æ–Ω—É—Å–∞", show_alert=True)

@dp.callback_query(lambda c: c.data == 'create_human')
async def create_human_callback(callback: types.CallbackQuery):
    """–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–ª–æ–≤–µ—á–∫–∞"""
    try:
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /start –≤ –ª–∏—á–∫—É
        await callback.answer("–ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ª–∏—á–∫—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...")
        
        # —Å–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞
        bot_info = await bot.get_me()
        bot_username = bot_info.username
        
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π
        await callback.message.answer(
            f"–Ω–∞–∂–º–∏ –Ω–∞ —Å—Å—ã–ª–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –±–æ—Ç—É –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è:\n\n"
            f"https://t.me/{bot_username}?start=ref{callback.from_user.id}"
        )
        
    except Exception as e:
        print(f"–æ—à–∏–±–∫–∞ –≤ create_human_callback: {e}")
        await callback.answer("–ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

# === –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===
@dp.callback_query(lambda c: c.data == 'bank_deposit')
async def bank_deposit_callback(callback: types.CallbackQuery):
    """–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–ª–æ–∂–∏—Ç—å –¥–µ–Ω—å–≥–∏ –≤ –±–∞–Ω–∫"""
    user_id = callback.from_user.id
    
    user_id_str = str(user_id)
    
    if user_id_str not in users:
        await callback.answer("—Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è", show_alert=True)
        return
    
    user_data = users[user_id_str]
    
    balance = user_data.get('balance', 0)
    current_deposit = user_data.get('bank_deposit', 0)
    
    if current_deposit > 0:
        await callback.answer("—É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –≤–∫–ª–∞–¥! —Å–Ω–∞—á–∞–ª–∞ –∑–∞–±–µ—Ä–∏ –¥–µ–Ω—å–≥–∏", show_alert=True)
        return
    
    if balance <= 0:
        await callback.answer("—É —Ç–µ–±—è –Ω–µ—Ç –¥–µ–Ω–µ–≥ –¥–ª—è –≤–∫–ª–∞–¥–∞", show_alert=True)
        return
    
    # —Å–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã
    markup = InlineKeyboardMarkup(inline_keyboard=[
    
    [InlineKeyboardButton(text='üí∞ 10% –æ—Ç –±–∞–ª–∞–Ω—Å–∞', callback_data='deposit_10')],
        [InlineKeyboardButton(text='üí∞ 25% –æ—Ç –±–∞–ª–∞–Ω—Å–∞', callback_data='deposit_25')],
    
    [InlineKeyboardButton(text='üí∞ 50% –æ—Ç –±–∞–ª–∞–Ω—Å–∞', callback_data='deposit_50')],
        [InlineKeyboardButton(text='üí∞ 75% –æ—Ç –±–∞–ª–∞–Ω—Å–∞', callback_data='deposit_75')],
    
    [InlineKeyboardButton(text='üí∞ –≤—Å–µ –¥–µ–Ω—å–≥–∏', callback_data='deposit_all')],
        [InlineKeyboardButton(text='‚ùå –æ—Ç–º–µ–Ω–∞', callback_data='bank_cancel')]
    
    ])
    
    await callback.message.edit_text(
        f'üí∞ <b>–ø–æ–ª–æ–∂–∏—Ç—å –¥–µ–Ω—å–≥–∏ –≤ –±–∞–Ω–∫</b>\n\n'
        f'üí≥ <b>—Ç–≤–æ–π –±–∞–ª–∞–Ω—Å:</b> <b>${format_money(balance)}</b>\n\n'
        f'–≤—ã–±–µ—Ä–∏ —Å—É–º–º—É –¥–ª—è –≤–∫–ª–∞–¥–∞:',
        parse_mode='HTML',
    
    reply_markup=markup
    )

@dp.callback_query(lambda c: c.data.startswith('deposit_'))
async def deposit_amount_callback(callback: types.CallbackQuery):
    """–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã –≤–∫–ª–∞–¥–∞"""
    user_id = callback.from_user.id
    
    user_id_str = str(user_id)
    
    if user_id_str not in users:
        await callback.answer("—Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è", show_alert=True)
        return
    
    user_data = users[user_id_str]
    
    balance = user_data.get('balance', 0)
    current_deposit = user_data.get('bank_deposit', 0)
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã–π –≤–∫–ª–∞–¥
    if current_deposit > 0:
        await callback.answer("—É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –≤–∫–ª–∞–¥! —Å–Ω–∞—á–∞–ª–∞ –∑–∞–±–µ—Ä–∏ –¥–µ–Ω—å–≥–∏", show_alert=True)
        return
    
    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç
    percent = callback.data.split('_')[1]
    
    if percent == 'all':
        deposit_amount = balance
    else:
        percent_int = int(percent)
        deposit_amount = int(balance * percent_int / 100)
    
    if deposit_amount <= 0:
        await callback.answer("—Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è", show_alert=True)
        return
    
    if deposit_amount > balance:
        await callback.answer("—É —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥", show_alert=True)
        return

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–∫–ª–∞–¥
    if deposit_amount > BANK_MAX_DEPOSIT:
        deposit_amount = BANK_MAX_DEPOSIT
    
    # —Å–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥
    user_data['bank_deposit'] = deposit_amount
    user_data['bank_deposit_time'] = datetime.datetime.now().timestamp()
    user_data['balance'] -= deposit_amount
    save_users()
    
    # –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ —Å–ø–∏—Å–∞–Ω–∏—è
    new_balance = user_data['balance']
    
    await callback.answer(f"–≤–∫–ª–∞–¥ —Å–æ–∑–¥–∞–Ω! ${format_money(deposit_amount)}", show_alert=True)
    
    # —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –±–∞–Ω–∫
    markup = InlineKeyboardMarkup(inline_keyboard=[
    
    [InlineKeyboardButton(text='üí∞ –ø–æ–ª–æ–∂–∏—Ç—å –¥–µ–Ω—å–≥–∏', callback_data='bank_deposit')],
        [InlineKeyboardButton(text='üí∏ –∑–∞–±—Ä–∞—Ç—å –¥–µ–Ω—å–≥–∏', callback_data='bank_withdraw')],
    
    [InlineKeyboardButton(text='üìä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∫–ª–∞–¥–µ', callback_data='bank_info')]
    ])
    
    await callback.message.edit_text(
        f'‚úÖ <b>–≤–∫–ª–∞–¥ —Å–æ–∑–¥–∞–Ω!</b>\n\n'
        f'üí∞ <b>—Å—É–º–º–∞ –≤–∫–ª–∞–¥–∞:</b> <b>${format_money(deposit_amount)}</b>\n'
        f'üí≥ <b>–Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:</b> <b>${format_money(new_balance)}</b>\n'
        f'‚è∞ <b>–≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è:</b> <b>{datetime.datetime.now().strftime("%H:%M")}</b>\n\n'
        f'üí° –ø—Ä–æ—Ü–µ–Ω—Ç—ã –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è 24 —á–∞—Å–∞ (10%)\n'
        f'üíé <b>–∑–∞ 24 —á–∞—Å–∞ –ø–æ–ª—É—á–∏—à—å:</b> <b>${format_money(int(deposit_amount * 0.10))}</b> (–º–∞–∫—Å–∏–º—É–º 10%)\n\n'
        f'‚ö†Ô∏è <b>–≤–Ω–∏–º–∞–Ω–∏–µ:</b> —Å–Ω—è—Ç—å –¥–µ–Ω—å–≥–∏ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞!\n'
        f'üîí <b>–º–∞–∫—Å. –≤–∫–ª–∞–¥:</b> <b>${format_money(BANK_MAX_DEPOSIT)}</b>',
        parse_mode='HTML',
    
    reply_markup=markup
    )

@dp.callback_query(lambda c: c.data == 'bank_withdraw')
async def bank_withdraw_callback(callback: types.CallbackQuery):
    """–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∑–∞–±—Ä–∞—Ç—å –¥–µ–Ω—å–≥–∏ –∏–∑ –±–∞–Ω–∫–∞"""
    user_id = callback.from_user.id
    user_id_str = str(user_id)
    
    if user_id_str not in users:
        await callback.answer("—Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è", show_alert=True)
        return
    
    user_data = users[user_id_str]
    deposit = user_data.get('bank_deposit', 0)
    deposit_time = user_data.get('bank_deposit_time', 0)
    
    if deposit <= 0:
        await callback.answer("—É —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–∫–ª–∞–¥–∞", show_alert=True)
        return
    
    # —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è
    current_time = datetime.datetime.now().timestamp()
    time_passed = current_time - deposit_time
    can_withdraw = time_passed >= 86400  # 24 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    
    if can_withdraw:
        # –º–æ–∂–Ω–æ —Å–Ω—è—Ç—å - –Ω–∞—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã
        hours_passed = time_passed / 3600
        hours_passed = min(hours_passed, 24)  # –º–∞–∫—Å–∏–º—É–º 24 —á–∞—Å–∞
        total_interest = int(deposit * 0.004167 * hours_passed)  # 10% –∑–∞ 24 —á–∞—Å–∞
        total_withdraw = deposit + total_interest
        
        # –∑–∞–±–∏—Ä–∞–µ–º –¥–µ–Ω—å–≥–∏ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏
        user_data['balance'] += total_withdraw
        user_data['bank_deposit'] = 0
        user_data['bank_deposit_time'] = 0
        save_users()
        
        # –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
        new_balance = user_data['balance']
        
        await callback.answer(f"–¥–µ–Ω—å–≥–∏ –∑–∞–±—Ä–∞–Ω—ã! +${format_money(total_withdraw)}", show_alert=True)
        
        # —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –±–∞–Ω–∫
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='üí∞ –ø–æ–ª–æ–∂–∏—Ç—å –¥–µ–Ω—å–≥–∏', callback_data='bank_deposit')],
            [InlineKeyboardButton(text='üí∏ –∑–∞–±—Ä–∞—Ç—å –¥–µ–Ω—å–≥–∏', callback_data='bank_withdraw')],
            [InlineKeyboardButton(text='üìä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∫–ª–∞–¥–µ', callback_data='bank_info')]
        ])
        
        hours_passed_int = int(hours_passed)
        minutes_passed_int = int((hours_passed - hours_passed_int) * 60)
        
        await callback.message.edit_text(
            f'üí∏ <b>–¥–µ–Ω—å–≥–∏ –∑–∞–±—Ä–∞–Ω—ã!</b>\n\n'
            f'üí∞ <b>—Å—É–º–º–∞ –≤–∫–ª–∞–¥–∞:</b> <b>${format_money(deposit)}</b>\n'
            f'‚è∞ <b>–≤—Ä–µ–º—è –≤–∫–ª–∞–¥–∞:</b> <b>{hours_passed_int}—á {minutes_passed_int}–º</b>\n'
            f'üíé <b>–Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã:</b> <b>${format_money(total_interest)}</b>\n'
            f'üí≥ <b>–≤—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ:</b> <b>${format_money(total_withdraw)}</b>\n'
            f'üí≥ <b>–Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:</b> <b>${format_money(new_balance)}</b>\n\n'
            f'‚úÖ –¥–µ–Ω—å–≥–∏ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–∞ —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å!',
            parse_mode='HTML',
            reply_markup=markup
        )
    else:
        # –¥–æ—Å—Ä–æ—á–Ω–æ–µ —Å–Ω—è—Ç–∏–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        penalty = int(deposit * 0.05)  # 5% —à—Ç—Ä–∞—Ñ
        total_withdraw = deposit - penalty
        remaining_time = 86400 - time_passed
        remaining_hours = int(remaining_time // 3600)
        remaining_minutes = int((remaining_time % 3600) // 60)
        
        # —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ —Å–Ω—è—Ç–∏—è
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='‚úÖ –¥–∞, –∑–∞–±—Ä–∞—Ç—å —Å–æ —à—Ç—Ä–∞—Ñ–æ–º', callback_data='withdraw_early_confirm')],
            [InlineKeyboardButton(text='‚ùå –æ—Ç–º–µ–Ω–∞', callback_data='bank_cancel')]
        ])
        
        await callback.message.edit_text(
            f'‚ö†Ô∏è <b>–≤–Ω–∏–º–∞–Ω–∏–µ! –¥–æ—Å—Ä–æ—á–Ω–æ–µ —Å–Ω—è—Ç–∏–µ –≤–∫–ª–∞–¥–∞</b>\n\n'
            f'üí∞ <b>—Å—É–º–º–∞ –≤–∫–ª–∞–¥–∞:</b> <b>${format_money(deposit)}</b>\n'
            f'‚è≥ <b>–¥–æ —Å–Ω—è—Ç–∏—è –±–µ–∑ —à—Ç—Ä–∞—Ñ–∞ –æ—Å—Ç–∞–ª–æ—Å—å:</b> <b>{remaining_hours}—á {remaining_minutes}–º</b>\n\n'
            f'üí∏ <b>–ø—Ä–∏ –¥–æ—Å—Ä–æ—á–Ω–æ–º —Å–Ω—è—Ç–∏–∏:</b>\n'
            f'‚Ä¢ —à—Ç—Ä–∞—Ñ <b>5%</b> = <b>${format_money(penalty)}</b>\n'
            f'‚Ä¢ –ø—Ä–æ—Ü–µ–Ω—Ç—ã <b>–Ω–µ –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è</b>\n'
            f'‚Ä¢ –ø–æ–ª—É—á–∏—à—å <b>${format_money(total_withdraw)}</b>\n\n'
            f'‚ùì <b>—Ç–æ—á–Ω–æ —Ö–æ—á–µ—à—å –∑–∞–±—Ä–∞—Ç—å –≤–∫–ª–∞–¥ –¥–æ—Å—Ä–æ—á–Ω–æ?</b>',
            parse_mode='HTML',
            reply_markup=markup
        )
        await callback.answer()

@dp.callback_query(lambda c: c.data == 'bank_info')
async def bank_info_callback(callback: types.CallbackQuery):
    """–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∫–ª–∞–¥–µ"""
    user_id = callback.from_user.id
    user_id_str = str(user_id)
    
    if user_id_str not in users:
        await callback.answer("—Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è", show_alert=True)
        return
    
    user_data = users[user_id_str]
    balance = user_data.get('balance', 0)
    deposit = user_data.get('bank_deposit', 0)
    deposit_time = user_data.get('bank_deposit_time', 0)
    
    # —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã
    current_time = datetime.datetime.now().timestamp()
    hours_passed = 0
    total_interest = 0
    can_withdraw = False
    
    if deposit > 0 and deposit_time > 0:
        hours_passed = (current_time - deposit_time) / 3600  # —á–∞—Å—ã
        # –º–∞–∫—Å–∏–º—É–º 24 —á–∞—Å–∞ –¥–ª—è 10%
        hours_passed = min(hours_passed, 24)
        # 10% –∑–∞ 24 —á–∞—Å–∞ = 0.4167% –∑–∞ —á–∞—Å
        total_interest = int(deposit * 0.004167 * hours_passed)
        # –º–æ–∂–Ω–æ —Å–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞
        can_withdraw = (current_time - deposit_time) >= 86400  # 24 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='üí∞ –ø–æ–ª–æ–∂–∏—Ç—å –¥–µ–Ω—å–≥–∏', callback_data='bank_deposit')],
        [InlineKeyboardButton(text='üí∏ –∑–∞–±—Ä–∞—Ç—å –¥–µ–Ω—å–≥–∏', callback_data='bank_withdraw')],
        [InlineKeyboardButton(text='üìä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∫–ª–∞–¥–µ', callback_data='bank_info')]
    ])
    
    bank_text = f'üìä <b>–ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∫–ª–∞–¥–µ</b>\n\n'
    bank_text += f'üí≥ <b>—Ç–≤–æ–π –±–∞–ª–∞–Ω—Å:</b> <b>${format_money(balance)}</b>\n'
    
    if deposit > 0:
        # —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        hours_passed_int = int(hours_passed)
        minutes_passed_int = int((hours_passed - hours_passed_int) * 60)
        percent_earned = (total_interest / deposit) * 100 if deposit > 0 else 0
        hours_to_max = max(0, 24 - hours_passed)
        potential_interest = int(deposit * 0.004167 * hours_to_max)
        
        bank_text += f'üí∞ <b>—Å—É–º–º–∞ –≤–∫–ª–∞–¥–∞:</b> <b>${format_money(deposit)}</b>\n'
        bank_text += f'‚è∞ <b>–≤—Ä–µ–º—è –≤–∫–ª–∞–¥–∞:</b> <b>{hours_passed_int}—á {minutes_passed_int}–º</b>\n'
        bank_text += f'üíé <b>–Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã:</b> <b>${format_money(total_interest)}</b>\n'
        bank_text += f'üìà <b>–ø—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Ö–æ–¥–∞:</b> <b>{percent_earned:.2f}%</b>\n'
        
        if can_withdraw:
            bank_text += f'‚úÖ <b>–º–æ–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å –¥–µ–Ω—å–≥–∏</b>\n\n'
        else:
            remaining_time = 86400 - (current_time - deposit_time)
            remaining_hours = int(remaining_time // 3600)
            remaining_minutes = int((remaining_time % 3600) // 60)
            bank_text += f'‚è≥ <b>–¥–æ —Å–Ω—è—Ç–∏—è:</b> <b>{remaining_hours}—á {remaining_minutes}–º</b>\n\n'
    else:
        bank_text += f'üí∞ <b>–≤–∫–ª–∞–¥:</b> <b>–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–∫–ª–∞–¥–∞</b>\n\n'
    
    bank_text += 'üí° <b>–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∏—Å—Ç–µ–º–∞:</b>\n'
    bank_text += '‚Ä¢ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è 24 —á–∞—Å–∞ (10%)\n'
    bank_text += '‚Ä¢ —Å–Ω—è—Ç—å –¥–µ–Ω—å–≥–∏ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ —Å—É—Ç–∫–∏\n'
    bank_text += '‚Ä¢ –ø—Ä–∏ –¥–æ—Å—Ä–æ—á–Ω–æ–º —Å–Ω—è—Ç–∏–∏ - —à—Ç—Ä–∞—Ñ 5% –±–µ–∑ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤\n'
    bank_text += '‚Ä¢ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–π —á–∞—Å\n\n'
    bank_text += 'üìä <b>–ø—Ä–∏–º–µ—Ä—ã –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏:</b>\n'
    bank_text += '‚Ä¢ –≤–∫–ª–∞–¥ 1–∫–∫–∫ ‚Üí –∑–∞ 24 —á–∞—Å–∞: 100–∫–∫ (10%)\n'
    bank_text += '‚Ä¢ –≤–∫–ª–∞–¥ 10–∫–∫–∫ ‚Üí –∑–∞ 24 —á–∞—Å–∞: 1–∫–∫–∫ (10%)\n'
    bank_text += '‚Ä¢ –≤–∫–ª–∞–¥ 100–∫–∫–∫ ‚Üí –∑–∞ 24 —á–∞—Å–∞: 10–∫–∫–∫ (10%)'
    
    await callback.message.edit_text(bank_text, parse_mode='HTML', reply_markup=markup)

@dp.callback_query(lambda c: c.data == 'bank_cancel')
async def bank_cancel_callback(callback: types.CallbackQuery):
    """–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã –≤ –±–∞–Ω–∫–µ"""
    user_id = callback.from_user.id
    user_id_str = str(user_id)
    
    if user_id_str not in users:
        await callback.answer("—Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è", show_alert=True)
        return
    
    # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é –±–∞–Ω–∫–∞
    user_data = users[user_id_str]
    balance = user_data.get('balance', 0)
    deposit = user_data.get('bank_deposit', 0)
    deposit_time = user_data.get('bank_deposit_time', 0)
    
    # —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã
    current_time = datetime.datetime.now().timestamp()
    hours_passed = 0
    total_interest = 0
    can_withdraw = False
    
    if deposit > 0 and deposit_time > 0:
        hours_passed = (current_time - deposit_time) / 3600  # —á–∞—Å—ã
        # –º–∞–∫—Å–∏–º—É–º 24 —á–∞—Å–∞ –¥–ª—è 10%
        hours_passed = min(hours_passed, 24)
        # 10% –∑–∞ 24 —á–∞—Å–∞ = 0.4167% –∑–∞ —á–∞—Å
        total_interest = int(deposit * 0.004167 * hours_passed)
        # –º–æ–∂–Ω–æ —Å–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞
        can_withdraw = (current_time - deposit_time) >= 86400  # 24 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='üí∞ –ø–æ–ª–æ–∂–∏—Ç—å –¥–µ–Ω—å–≥–∏', callback_data='bank_deposit')],
        [InlineKeyboardButton(text='üí∏ –∑–∞–±—Ä–∞—Ç—å –¥–µ–Ω—å–≥–∏', callback_data='bank_withdraw')],
        [InlineKeyboardButton(text='üìä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∫–ª–∞–¥–µ', callback_data='bank_info')]
    ])
    
    bank_text = f'üè¶ <b>–±–∞–Ω–∫</b>\n\n'
    bank_text += f'üí≥ <b>—Ç–≤–æ–π –±–∞–ª–∞–Ω—Å:</b> <b>${format_money(balance)}</b>\n'
    
    if deposit > 0:
        hours_passed_int = int(hours_passed)
        minutes_passed_int = int((hours_passed - hours_passed_int) * 60)
        bank_text += f'üí∞ <b>–≤–∫–ª–∞–¥:</b> <b>${format_money(deposit)}</b>\n'
        bank_text += f'‚è∞ <b>–≤—Ä–µ–º—è –≤–∫–ª–∞–¥–∞:</b> <b>{hours_passed_int}—á {minutes_passed_int}–º</b>\n'
        bank_text += f'üíé <b>–Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã:</b> <b>${format_money(total_interest)}</b>\n'
        
        if can_withdraw:
            bank_text += f'‚úÖ <b>–º–æ–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å –¥–µ–Ω—å–≥–∏</b>\n\n'
        else:
            remaining_time = 86400 - (current_time - deposit_time)
            remaining_hours = int(remaining_time // 3600)
            remaining_minutes = int((remaining_time % 3600) // 60)
            bank_text += f'‚è≥ <b>–¥–æ —Å–Ω—è—Ç–∏—è:</b> <b>{remaining_hours}—á {remaining_minutes}–º</b>\n\n'
    else:
        bank_text += f'üí∞ <b>–≤–∫–ª–∞–¥:</b> <b>–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–∫–ª–∞–¥–∞</b>\n\n'
    
    bank_text += 'üí° <b>–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>\n'
    bank_text += '‚Ä¢ –ø–æ–ª–æ–∂–∏ –¥–µ–Ω—å–≥–∏ –≤–æ –≤–∫–ª–∞–¥\n'
    bank_text += '‚Ä¢ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è 24 —á–∞—Å–∞ (10%)\n'
    bank_text += '‚Ä¢ —Å–Ω—è—Ç—å –¥–µ–Ω—å–≥–∏ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ —Å—É—Ç–∫–∏\n'
    bank_text += '‚Ä¢ –ø—Ä–∏ –¥–æ—Å—Ä–æ—á–Ω–æ–º —Å–Ω—è—Ç–∏–∏ - —à—Ç—Ä–∞—Ñ –±–µ–∑ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤\n\n'
    bank_text += '‚ö†Ô∏è <b>–≤–∞–∂–Ω–æ:</b> –≤–∫–ª–∞–¥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ 24 —á–∞—Å–∞!'
    
    await callback.message.edit_text(bank_text, parse_mode='HTML', reply_markup=markup)
    await callback.answer()

@dp.callback_query(lambda c: c.data == 'withdraw_early_confirm')
async def withdraw_early_confirm_callback(callback: types.CallbackQuery):
    """–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ —Å–Ω—è—Ç–∏—è –≤–∫–ª–∞–¥–∞"""
    user_id = callback.from_user.id
    
    user_id_str = str(user_id)
    
    if user_id_str not in users:
        await callback.answer("—Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è", show_alert=True)
        return
    
    user_data = users[user_id_str]
    
    deposit = user_data.get('bank_deposit', 0)
    deposit_time = user_data.get('bank_deposit_time', 0)
    
    if deposit <= 0:
        await callback.answer("—É —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–∫–ª–∞–¥–∞", show_alert=True)
        return
    
    # —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —à—Ç—Ä–∞—Ñ
    penalty = int(deposit * 0.05)  # 5% —à—Ç—Ä–∞—Ñ
    
    total_withdraw = deposit - penalty
    
    # –∑–∞–±–∏—Ä–∞–µ–º –¥–µ–Ω—å–≥–∏ —Å–æ —à—Ç—Ä–∞—Ñ–æ–º
    user_data['balance'] += total_withdraw
    user_data['bank_deposit'] = 0
    user_data['bank_deposit_time'] = 0
    save_users()
    
    # –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
    new_balance = user_data['balance']
    
    await callback.answer(f"‚ö†Ô∏è –¥–æ—Å—Ä–æ—á–Ω–æ–µ —Å–Ω—è—Ç–∏–µ! —à—Ç—Ä–∞—Ñ ${format_money(penalty)} (5%) –∑–∞ —Ç–æ —á—Ç–æ –∑–∞–±—Ä–∞–ª –≤–∫–ª–∞–¥ —Ä–∞–Ω—å—à–µ 24 —á–∞—Å–æ–≤", show_alert=True)
    
    # —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –±–∞–Ω–∫
    markup = InlineKeyboardMarkup(inline_keyboard=[
    
    [InlineKeyboardButton(text='üí∞ –ø–æ–ª–æ–∂–∏—Ç—å –¥–µ–Ω—å–≥–∏', callback_data='bank_deposit')],
        [InlineKeyboardButton(text='üí∏ –∑–∞–±—Ä–∞—Ç—å –¥–µ–Ω—å–≥–∏', callback_data='bank_withdraw')],
    
    [InlineKeyboardButton(text='üìä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∫–ª–∞–¥–µ', callback_data='bank_info')]
    ])
    
    await callback.message.edit_text(
        f'‚ö†Ô∏è <b>–¥–æ—Å—Ä–æ—á–Ω–æ–µ —Å–Ω—è—Ç–∏–µ –≤–∫–ª–∞–¥–∞!</b>\n\n'
        f'üí∞ <b>—Å—É–º–º–∞ –≤–∫–ª–∞–¥–∞:</b> <b>${format_money(deposit)}</b>\n'
        f'üí∏ <b>—à—Ç—Ä–∞—Ñ 5% –∑–∞ –¥–æ—Å—Ä–æ—á–Ω–æ–µ —Å–Ω—è—Ç–∏–µ:</b> <b>${format_money(penalty)}</b>\n'
        f'üí≥ <b>–ø–æ–ª—É—á–µ–Ω–æ –Ω–∞ –±–∞–ª–∞–Ω—Å:</b> <b>${format_money(total_withdraw)}</b>\n'
        f'üí≥ <b>–Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:</b> <b>${format_money(new_balance)}</b>\n\n'
        f'‚ùå <b>–ø—Ä–æ—Ü–µ–Ω—Ç—ã –Ω–µ –Ω–∞—á–∏—Å–ª–µ–Ω—ã!</b> –≤–∫–ª–∞–¥ –¥–æ–ª–∂–µ–Ω –ª–µ–∂–∞—Ç—å 24 —á–∞—Å–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è 10%',
        parse_mode='HTML',
    
    reply_markup=markup
    )

@dp.callback_query(lambda c: c.data == 'bank_stats')
async def bank_stats_callback(callback: types.CallbackQuery):
    """–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∫–ª–∞–¥–æ–≤"""
    user_id = callback.from_user.id
    
    user_id_str = str(user_id)
    
    if user_id_str not in users:
        await callback.answer("—Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è", show_alert=True)
        return
    
    # —Å–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∫–ª–∞–¥–æ–≤
    total_deposits = 0
    
    users_with_deposits = 0
    max_deposit = 0
    
    deposits_list = []
    
    for user_id_key, user_data in users.items():
        deposit = user_data.get('bank_deposit', 0)
        if deposit > 0:
            total_deposits += deposit
            users_with_deposits += 1
            deposits_list.append(deposit)
            if deposit > max_deposit:
                max_deposit = deposit
    
    total_users = len(users)
    percentage_with_deposits = (users_with_deposits / total_users * 100) if total_users > 0 else 0
    
    average_deposit = (total_deposits / users_with_deposits) if users_with_deposits > 0 else 0
    
    # —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    markup = InlineKeyboardMarkup(inline_keyboard=[
    
    [InlineKeyboardButton(text='üèÜ —Ç–æ–ø –≤–∫–ª–∞–¥–æ–≤', callback_data='bank_top')],
        [InlineKeyboardButton(text='‚¨ÖÔ∏è –Ω–∞–∑–∞–¥', callback_data='bank_cancel')]
    
    ])
    
    stats_text = f'üí≥ <b>—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∫–ª–∞–¥–æ–≤:</b>\n\n'
    
    stats_text += f'üí∞ <b>–æ–±—â–∞—è —Å—É–º–º–∞ –≤–∫–ª–∞–¥–æ–≤:</b> <b>${format_money(total_deposits)}</b>\n'
    stats_text += f'üë• <b>–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª–∞–¥–∞–º–∏:</b> <b>{users_with_deposits}/{total_users}</b>\n'
    stats_text += f'üìä <b>–ø—Ä–æ—Ü–µ–Ω—Ç —Å –≤–∫–ª–∞–¥–∞–º–∏:</b> <b>{percentage_with_deposits:.1f}%</b>\n'
    stats_text += f'üíé <b>–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–∫–ª–∞–¥:</b> <b>${format_money(max_deposit)}</b>\n'
    stats_text += f'üìà <b>—Å—Ä–µ–¥–Ω–∏–π –≤–∫–ª–∞–¥:</b> <b>${format_money(int(average_deposit))}</b>\n\n'
    stats_text += f'üí° <b>–ø–æ–¥—Å–∫–∞–∑–∫–∞:</b> –∏—Å–ø–æ–ª—å–∑—É–π "—Ç–æ–ø –≤–∫–ª–∞–¥–æ–≤ üèÜ" –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª—É—á—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤'
    
    await callback.message.edit_text(stats_text, parse_mode='HTML', reply_markup=markup)
    
    await callback.answer()
@dp.callback_query(lambda c: c.data == 'bank_top')
async def bank_top_callback(callback: types.CallbackQuery):
    """–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ç–æ–ø –≤–∫–ª–∞–¥–æ–≤"""
    user_id = callback.from_user.id
    user_id_str = str(user_id)
    
    if user_id_str not in users:
        await callback.answer("—Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è", show_alert=True)
        return
    
    # —Å–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤–∫–ª–∞–¥–∞—Ö
    deposits_data = []
    total_deposits = 0
    users_with_deposits = 0
    
    for user_id_key, user_data in users.items():
        deposit = user_data.get('bank_deposit', 0)
        if deposit > 0:
            deposits_data.append({
                'user_id': user_id_key,
                'nick': user_data.get('nick', '–∏–≥—Ä–æ–∫'),
                'tg_username': user_data.get('tg_username', ''),
                'deposit': deposit
            })
            total_deposits += deposit
            users_with_deposits += 1
    
    # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É –≤–∫–ª–∞–¥–∞ (—É–±—ã–≤–∞–Ω–∏–µ)
    deposits_data.sort(key=lambda x: x['deposit'], reverse=True)
    
    # —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='üìà —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∫–ª–∞–¥–æ–≤', callback_data='bank_stats')],
        [InlineKeyboardButton(text='‚¨ÖÔ∏è –Ω–∞–∑–∞–¥', callback_data='bank_cancel')]
    ])
    
    top_text = f'üèÜ <b>—Ç–æ–ø-10 –ø–æ –≤–∫–ª–∞–¥–∞–º:</b>\n\n'
    medals = ['ü•á', 'ü•à', 'ü•â']
    
    for i, data in enumerate(deposits_data[:10]):
        if i < 3:
            rank = medals[i]
        else:
            rank = f'{i+1}.'
        
        username = data['tg_username']
        if username:
            username = f'@{username}'
        else:
            username = data['nick']
        
        top_text += f'{rank} <b>{username}</b>\n'
        top_text += f'   üí∞ <b>${format_money(data["deposit"])}</b>\n\n'
    
    top_text += f'üìä <b>–æ–±—â–∞—è —Å—É–º–º–∞ –≤–∫–ª–∞–¥–æ–≤:</b> <b>${format_money(total_deposits)}</b>\n'
    top_text += f'üë• <b>–≤—Å–µ–≥–æ —Å –≤–∫–ª–∞–¥–∞–º–∏:</b> <b>{users_with_deposits}</b>'
    
    await callback.message.edit_text(top_text, parse_mode='HTML', reply_markup=markup)
    await callback.answer()

# === –∫–æ–Ω–µ—Ü –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ===

# === —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞–ª–æ–≥–∞ –Ω–∞ –±–æ–≥–∞—Ç—Å—Ç–≤–æ ===
async def send_tax_notification(user_id: int, text: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–ª–æ–≥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        await bot.send_message(
            chat_id=user_id,
    
    text=text,
            parse_mode='HTML'
    
    )
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞–ª–æ–≥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def collect_wealth_tax():
    """–°–ø–∏—Å—ã–≤–∞–µ—Ç –Ω–∞–ª–æ–≥ –Ω–∞ –±–æ–≥–∞—Ç—Å—Ç–≤–æ (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç) —É —Ç–æ–ø-15 –∏–≥—Ä–æ–∫–æ–≤ –∫–∞–∂–¥—ã–π —á–∞—Å"""
    try:
        print("üí∞ –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –Ω–∞–ª–æ–≥–∞ –Ω–∞ –±–æ–≥–∞—Ç—Å—Ç–≤–æ...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-15 –∏–≥—Ä–æ–∫–æ–≤
        top_players = get_top_players()[:15]
        
        if not top_players:
            print("‚ö†Ô∏è –ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —Å–±–æ—Ä–∞ –Ω–∞–ª–æ–≥–∞")
            return
        
        total_tax_collected = 0
        
        for rank, (user_id, user_data) in enumerate(top_players, 1):
            current_balance = user_data.get('balance', 0)
            
            if current_balance <= 0:
                continue
            
            # –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞–ª–æ–≥ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç)
            tax_amount = int(current_balance * WEALTH_TAX_PERCENT / 100)
            
            if tax_amount <= 0:
                continue
            
            # –°–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞–ª–æ–≥
            users[user_id]['balance'] -= tax_amount
            total_tax_collected += tax_amount
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                nick = user_data.get('nick', '–∏–≥—Ä–æ–∫')
                new_balance = users[user_id]['balance']
                
                notification_text = (
                    f"üí∞ <b>–Ω–∞–ª–æ–≥ –Ω–∞ –±–æ–≥–∞—Ç—Å—Ç–≤–æ</b>\n\n"
                    f"üë§ <b>{nick}</b>, —Å —Ç–≤–æ–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –±—ã–ª —Å–Ω—è—Ç –Ω–∞–ª–æ–≥ –Ω–∞ –±–æ–≥–∞—Ç—Å—Ç–≤–æ –≤ —Ä–∞–∑–º–µ—Ä–µ <b>${format_money(tax_amount)}</b>\n"
                    f"üí≥ <b>—Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å ‚Äî ${format_money(new_balance)}</b>\n\n"
                    f"üìä <i>—Ç—ã —Ç–æ–ø #{rank} –∏–≥—Ä–æ–∫</i>"
                )
                
                await send_tax_notification(int(user_id), notification_text)
                
                print(f"‚úÖ –ù–∞–ª–æ–≥ —Å–æ–±—Ä–∞–Ω —Å {nick} (ID: {user_id}): ${format_money(tax_amount)}")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        save_users()
        
        print(f"üí∞ –ù–∞–ª–æ–≥ –Ω–∞ –±–æ–≥–∞—Ç—Å—Ç–≤–æ —Å–æ–±—Ä–∞–Ω! –í—Å–µ–≥–æ: ${format_money(total_tax_collected)}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        now = datetime.datetime.now()
        admin_report = (
            f"üìä <b>–û—Ç—á–µ—Ç –æ —Å–±–æ—Ä–µ –Ω–∞–ª–æ–≥–∞ –Ω–∞ –±–æ–≥–∞—Ç—Å—Ç–≤–æ</b>\n\n"
            f"üí∞ <b>–û–±—â–∞—è —Å—É–º–º–∞ –Ω–∞–ª–æ–≥–∞:</b> ${format_money(total_tax_collected)}\n"
            f"üë• <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤:</b> {len(top_players)}\n"
            f"üìä <b>–ü—Ä–æ—Ü–µ–Ω—Ç –Ω–∞–ª–æ–≥–∞:</b> {WEALTH_TAX_PERCENT}%\n"
            f"‚è∞ <b>–í—Ä–µ–º—è —Å–±–æ—Ä–∞:</b> {now.strftime('%d.%m.%Y %H:%M')}"
        )
        
        for admin_id in ADMIN_IDS:
            try:
                await bot.send_message(
                    chat_id=admin_id,
                    text=admin_report,
                    parse_mode='HTML'
                )
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –Ω–∞–ª–æ–≥–∞ –Ω–∞ –±–æ–≥–∞—Ç—Å—Ç–≤–æ: {e}")

async def start_wealth_tax_scheduler():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–±–æ—Ä–∞ –Ω–∞–ª–æ–≥–∞ –Ω–∞ –±–æ–≥–∞—Ç—Å—Ç–≤–æ –∫–∞–∂–¥—ã–π —á–∞—Å —Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º —É —Ç–æ–ø-15 –∏–≥—Ä–æ–∫–æ–≤"""
    print("‚è∞ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ª–æ–≥–∞ –Ω–∞ –±–æ–≥–∞—Ç—Å—Ç–≤–æ...")
    
    # –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    if hasattr(start_wealth_tax_scheduler, '_running'):
        print("‚ö†Ô∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ª–æ–≥–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω!")
        return
    
    start_wealth_tax_scheduler._running = True
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        now = datetime.datetime.now()
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–∞—Å–∞ (–ø—Ä–æ—Å—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ)
        next_hour = now.replace(minute=0, second=0, microsecond=0) + datetime.timedelta(hours=1)
        delay_seconds = (next_hour - now).total_seconds()
        
        print(f"‚è∞ –ü–µ—Ä–≤—ã–π —Å–±–æ—Ä –Ω–∞–ª–æ–≥–∞ –≤ {next_hour.strftime('%H:%M')} (—á–µ—Ä–µ–∑ {int(delay_seconds/60)} –º–∏–Ω—É—Ç)")
        
        # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–∞—Å–∞
        await asyncio.sleep(delay_seconds)
        
        while True:
            try:
                # –°–æ–±–∏—Ä–∞–µ–º –Ω–∞–ª–æ–≥
                await collect_wealth_tax()
                
                # –ñ–¥–µ–º —á–∞—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–±–æ—Ä–∞
                await asyncio.sleep(3600)  # 1 —á–∞—Å
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –Ω–∞–ª–æ–≥–∞: {e}")
                await asyncio.sleep(300)  # –∂–¥–µ–º 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
    finally:
        # –°–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        start_wealth_tax_scheduler._running = False

# === –ø—Ä–æ—Å—Ç–æ–π –ø–∏–Ω–≥ –¥–ª—è Render ===
async def ping_render():
    """–ü—Ä–æ—Å—Ç–æ–π –ø–∏–Ω–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞—Å—ã–ø–∞–Ω–∏—è –Ω–∞ Render"""
    try:
        print("Ping sent to keep Render alive")
    except Exception as e:
        print(f"Ping error: {e}")

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
async def start_ping():
    while True:
        await asyncio.sleep(600)  # 10 –º–∏–Ω—É—Ç
        await ping_render()

# === –∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞ ===
def is_spam_message(text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ø–∞–º–æ–º"""
    spam_keywords = [
    
    'jetacas', 'casino', 'bonus', 'promo code', 'welcome1k',
        'üü¢', 'üí∞', 'üîë', 'üì•', 'üîí', '‚ö°Ô∏è', 'üéÆ', 'üïê', 'üíµ', '‚úÖ', 'üí≥', 'üîó'
    ]
    
    text_lower = text.lower()
    
    for keyword in spam_keywords:
        if keyword.lower() in text_lower:
            return True
    return False





def cleanup_temp_files():
    """–æ—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Ä—É–ª–µ—Ç–∫–∏"""
    try:
        for filename in os.listdir('.'):
            if filename.startswith('temp_roulette_') and filename.endswith('.png'):
                try:
                    os.remove(filename)
                except:
                    pass
    except:
        pass

if __name__ == '__main__':
    try:
        # –æ—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        cleanup_temp_files()
        asyncio.run(main())
    except KeyboardInterrupt:
        # –æ—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        cleanup_temp_files()
        pass
    finally:
        # –æ—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        cleanup_temp_files()
